(self["webpackChunkex_Plugin_Tiled"] = self["webpackChunkex_Plugin_Tiled"] || []).push([["commons"],{

/***/ "./node_modules/@ewoudenberg/difflib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@ewoudenberg/difflib/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/difflib */ "./node_modules/@ewoudenberg/difflib/lib/difflib.js");


/***/ }),

/***/ "./node_modules/@ewoudenberg/difflib/lib/difflib.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ewoudenberg/difflib/lib/difflib.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

// Generated by CoffeeScript 2.6.1
(function() {
  /*
  Module difflib -- helpers for computing deltas between objects.

  Function getCloseMatches(word, possibilities, n=3, cutoff=0.6):
      Use SequenceMatcher to return list of the best "good enough" matches.

  Function contextDiff(a, b):
      For two lists of strings, return a delta in context diff format.

  Function ndiff(a, b):
      Return a delta: the difference between `a` and `b` (lists of strings).

  Function restore(delta, which):
      Return one of the two sequences that generated an ndiff delta.

  Function unifiedDiff(a, b):
      For two lists of strings, return a delta in unified diff format.

  Class SequenceMatcher:
      A flexible class for comparing pairs of sequences of any type.

  Class Differ:
      For producing human-readable deltas from sequences of lines of text.
  */
  var Differ, Heap, IS_CHARACTER_JUNK, IS_LINE_JUNK, SequenceMatcher, _any, _arrayCmp, _calculateRatio, _countLeading, _formatRangeContext, _formatRangeUnified, _has, assert, contextDiff, floor, getCloseMatches, max, min, ndiff, restore, unifiedDiff,
    indexOf = [].indexOf;

  // Requires
  ({floor, max, min} = Math);

  Heap = __webpack_require__(/*! heap */ "./node_modules/heap/index.js");

  assert = __webpack_require__(/*! assert */ "./node_modules/assert/build/assert.js");

  // Helper functions
  _calculateRatio = function(matches, length) {
    if (length) {
      return 2.0 * matches / length;
    } else {
      return 1.0;
    }
  };

  _arrayCmp = function(a, b) {
    var i, l, la, lb, ref;
    [la, lb] = [a.length, b.length];
    for (i = l = 0, ref = min(la, lb); (0 <= ref ? l < ref : l > ref); i = 0 <= ref ? ++l : --l) {
      if (a[i] < b[i]) {
        return -1;
      }
      if (a[i] > b[i]) {
        return 1;
      }
    }
    return la - lb;
  };

  _has = function(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  };

  _any = function(items) {
    var item, l, len;
    for (l = 0, len = items.length; l < len; l++) {
      item = items[l];
      if (item) {
        return true;
      }
    }
    return false;
  };

  SequenceMatcher = class SequenceMatcher {
    /*
    SequenceMatcher is a flexible class for comparing pairs of sequences of
    any type, so long as the sequence elements are hashable.  The basic
    algorithm predates, and is a little fancier than, an algorithm
    published in the late 1980's by Ratcliff and Obershelp under the
    hyperbolic name "gestalt pattern matching".  The basic idea is to find
    the longest contiguous matching subsequence that contains no "junk"
    elements (R-O doesn't address junk).  The same idea is then applied
    recursively to the pieces of the sequences to the left and to the right
    of the matching subsequence.  This does not yield minimal edit
    sequences, but does tend to yield matches that "look right" to people.

    SequenceMatcher tries to compute a "human-friendly diff" between two
    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the
    longest *contiguous* & junk-free matching subsequence.  That's what
    catches peoples' eyes.  The Windows(tm) windiff has another interesting
    notion, pairing up elements that appear uniquely in each sequence.
    That, and the method here, appear to yield more intuitive difference
    reports than does diff.  This method appears to be the least vulnerable
    to synching up on blocks of "junk lines", though (like blank lines in
    ordinary text files, or maybe "<P>" lines in HTML files).  That may be
    because this is the only method of the 3 that has a *concept* of
    "junk" <wink>.

    Example, comparing two strings, and considering blanks to be "junk":

    >>> isjunk = (c) -> c is ' '
    >>> s = new SequenceMatcher(isjunk,
                                'private Thread currentThread;',
                                'private volatile Thread currentThread;')

    .ratio() returns a float in [0, 1], measuring the "similarity" of the
    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the
    sequences are close matches:

    >>> s.ratio().toPrecision(3)
    '0.866'

    If you're only interested in where the sequences match,
    .getMatchingBlocks() is handy:

    >>> for [a, b, size] in s.getMatchingBlocks()
    ...   console.log("a[#{a}] and b[#{b}] match for #{size} elements");
    a[0] and b[0] match for 8 elements
    a[8] and b[17] match for 21 elements
    a[29] and b[38] match for 0 elements

    Note that the last tuple returned by .get_matching_blocks() is always a
    dummy, (len(a), len(b), 0), and this is the only case in which the last
    tuple element (number of elements matched) is 0.

    If you want to know how to change the first sequence into the second,
    use .get_opcodes():

    >>> for [op, a1, a2, b1, b2] in s.getOpcodes()
    ...   console.log "#{op} a[#{a1}:#{a2}] b[#{b1}:#{b2}]"
    equal a[0:8] b[0:8]
    insert a[8:8] b[8:17]
    equal a[8:29] b[17:38]

    See the Differ class for a fancy human-friendly file differencer, which
    uses SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    See also function getCloseMatches() in this module, which shows how
    simple code building on SequenceMatcher can be used to do useful work.

    Timing:  Basic R-O is cubic time worst case and quadratic time expected
    case.  SequenceMatcher is quadratic time for the worst case and has
    expected-case behavior dependent in a complicated way on how many
    elements the sequences have in common; best case time is linear.

    Methods:

    constructor(isjunk=null, a='', b='')
        Construct a SequenceMatcher.

    setSeqs(a, b)
        Set the two sequences to be compared.

    setSeq1(a)
        Set the first sequence to be compared.

    setSeq2(b)
        Set the second sequence to be compared.

    findLongestMatch(alo, ahi, blo, bhi)
        Find longest matching block in a[alo:ahi] and b[blo:bhi].

    getMatchingBlocks()
        Return list of triples describing matching subsequences.

    getOpcodes()
        Return list of 5-tuples describing how to turn a into b.

    ratio()
        Return a measure of the sequences' similarity (float in [0,1]).

    quickRatio()
        Return an upper bound on .ratio() relatively quickly.

    realQuickRatio()
        Return an upper bound on ratio() very quickly.
    */
    constructor(isjunk1, a = '', b = '', autojunk = true) {
      this.isjunk = isjunk1;
      this.autojunk = autojunk;
      /*
      Construct a SequenceMatcher.

      Optional arg isjunk is null (the default), or a one-argument
      function that takes a sequence element and returns true iff the
      element is junk.  Null is equivalent to passing "(x) -> 0", i.e.
      no elements are considered to be junk.  For example, pass
          (x) -> x in ' \t'
      if you're comparing lines as sequences of characters, and don't
      want to synch up on blanks or hard tabs.

      Optional arg a is the first of two sequences to be compared.  By
      default, an empty string.  The elements of a must be hashable.  See
      also .setSeqs() and .setSeq1().

      Optional arg b is the second of two sequences to be compared.  By
      default, an empty string.  The elements of b must be hashable. See
      also .setSeqs() and .setSeq2().

      Optional arg autojunk should be set to false to disable the
      "automatic junk heuristic" that treats popular elements as junk
      (see module documentation for more information).
      */
      // Members:
      // a
      //      first sequence
      // b
      //      second sequence; differences are computed as "what do
      //      we need to do to 'a' to change it into 'b'?"
      // b2j
      //      for x in b, b2j[x] is a list of the indices (into b)
      //      at which x appears; junk elements do not appear
      // fullbcount
      //      for x in b, fullbcount[x] == the number of times x
      //      appears in b; only materialized if really needed (used
      //      only for computing quickRatio())
      // matchingBlocks
      //      a list of [i, j, k] triples, where a[i...i+k] == b[j...j+k];
      //      ascending & non-overlapping in i and in j; terminated by
      //      a dummy (len(a), len(b), 0) sentinel
      // opcodes
      //      a list of [tag, i1, i2, j1, j2] tuples, where tag is
      //      one of
      //          'replace'   a[i1...i2] should be replaced by b[j1...j2]
      //          'delete'    a[i1...i2] should be deleted
      //          'insert'    b[j1...j2] should be inserted
      //          'equal'     a[i1...i2] == b[j1...j2]
      // isjunk
      //      a user-supplied function taking a sequence element and
      //      returning true iff the element is "junk" -- this has
      //      subtle but helpful effects on the algorithm, which I'll
      //      get around to writing up someday <0.9 wink>.
      //      DON'T USE!  Only __chainB uses this.  Use isbjunk.
      // isbjunk
      //      for x in b, isbjunk(x) == isjunk(x) but much faster;
      //      DOES NOT WORK for x in a!
      // isbpopular
      //      for x in b, isbpopular(x) is true iff b is reasonably long
      //      (at least 200 elements) and x accounts for more than 1 + 1% of
      //      its elements (when autojunk is enabled).
      //      DOES NOT WORK for x in a!
      this.a = this.b = null;
      this.setSeqs(a, b);
    }

    setSeqs(a, b) {
      /* 
      Set the two sequences to be compared. 

      >>> s = new SequenceMatcher()
      >>> s.setSeqs('abcd', 'bcde')
      >>> s.ratio()
      0.75
      */
      this.setSeq1(a);
      return this.setSeq2(b);
    }

    setSeq1(a) {
      /* 
      Set the first sequence to be compared. 

      The second sequence to be compared is not changed.

      >>> s = new SequenceMatcher(null, 'abcd', 'bcde')
      >>> s.ratio()
      0.75
      >>> s.setSeq1('bcde')
      >>> s.ratio()
      1.0

      SequenceMatcher computes and caches detailed information about the
      second sequence, so if you want to compare one sequence S against
      many sequences, use .setSeq2(S) once and call .setSeq1(x)
      repeatedly for each of the other sequences.

      See also setSeqs() and setSeq2().
      */
      if (a === this.a) {
        return;
      }
      this.a = a;
      return this.matchingBlocks = this.opcodes = null;
    }

    setSeq2(b) {
      /*
      Set the second sequence to be compared. 

      The first sequence to be compared is not changed.

      >>> s = new SequenceMatcher(null, 'abcd', 'bcde')
      >>> s.ratio()
      0.75
      >>> s.setSeq2('abcd')
      >>> s.ratio()
      1.0

      SequenceMatcher computes and caches detailed information about the
      second sequence, so if you want to compare one sequence S against
      many sequences, use .setSeq2(S) once and call .setSeq1(x)
      repeatedly for each of the other sequences.

      See also setSeqs() and setSeq1().
      */
      if (b === this.b) {
        return;
      }
      this.b = b;
      this.matchingBlocks = this.opcodes = null;
      this.fullbcount = null;
      return this._chainB();
    }

    // For each element x in b, set b2j[x] to a list of the indices in
    // b where x appears; the indices are in increasing order; note that
    // the number of times x appears in b is b2j[x].length ...
    // when @isjunk is defined, junk elements don't show up in this
    // map at all, which stops the central findLongestMatch method
    // from starting any matching block at a junk element ...
    // also creates the fast isbjunk function ...
    // b2j also does not contain entries for "popular" elements, meaning
    // elements that account for more than 1 + 1% of the total elements, and
    // when the sequence is reasonably large (>= 200 elements); this can
    // be viewed as an adaptive notion of semi-junk, and yields an enormous
    // speedup when, e.g., comparing program files with hundreds of
    // instances of "return null;" ...
    // note that this is only called when b changes; so for cross-product
    // kinds of matches, it's best to call setSeq2 once, then setSeq1
    // repeatedly
    _chainB() {
      var b, b2j, elt, i, indices, isjunk, junk, l, len, n, ntest, popular;
      // Because isjunk is a user-defined function, and we test
      // for junk a LOT, it's important to minimize the number of calls.
      // Before the tricks described here, __chainB was by far the most
      // time-consuming routine in the whole module!  If anyone sees
      // Jim Roskind, thank him again for profile.py -- I never would
      // have guessed that.
      // The first trick is to build b2j ignoring the possibility
      // of junk.  I.e., we don't call isjunk at all yet.  Throwing
      // out the junk later is much cheaper than building b2j "right"
      // from the start.
      b = this.b;
      this.b2j = b2j = new Map();
      for (i = l = 0, len = b.length; l < len; i = ++l) {
        elt = b[i];
        if (!b2j.has(elt)) {
          b2j.set(elt, []);
        }
        indices = b2j.get(elt);
        indices.push(i);
      }
      // Purge junk elements
      junk = new Map();
      isjunk = this.isjunk;
      if (isjunk) {
        b2j.forEach(function(idxs, elt) {
          if (isjunk(elt)) {
            junk.set(elt, true);
            return b2j.delete(elt);
          }
        });
      }
      // Purge popular elements that are not junk
      popular = new Map();
      n = b.length;
      if (this.autojunk && n >= 200) {
        ntest = floor(n / 100) + 1;
        b2j.forEach(function(idxs, elt) {
          if (idxs.length > ntest) {
            popular.set(elt, true);
            return b2j.delete(elt);
          }
        });
      }
      // Now for x in b, isjunk(x) == x in junk, but the latter is much faster.
      // Sicne the number of *unique* junk elements is probably small, the
      // memory burden of keeping this set alive is likely trivial compared to
      // the size of b2j.
      this.isbjunk = function(b) {
        return junk.has(b);
      };
      return this.isbpopular = function(b) {
        return popular.has(b);
      };
    }

    findLongestMatch(alo, ahi, blo, bhi) {
      var a, b, b2j, besti, bestj, bestsize, i, isbjunk, j, j2len, jlist, k, l, len, m, newj2len, ref, ref1;
      /* 
      Find longest matching block in a[alo...ahi] and b[blo...bhi].  

      If isjunk is not defined:

      Return [i,j,k] such that a[i...i+k] is equal to b[j...j+k], where
          alo <= i <= i+k <= ahi
          blo <= j <= j+k <= bhi
      and for all [i',j',k'] meeting those conditions,
          k >= k'
          i <= i'
          and if i == i', j <= j'

      In other words, of all maximal matching blocks, return one that
      starts earliest in a, and of all those maximal matching blocks that
      start earliest in a, return the one that starts earliest in b.

      >>> isjunk = (x) -> x is ' '
      >>> s = new SequenceMatcher(isjunk, ' abcd', 'abcd abcd')
      >>> s.findLongestMatch(0, 5, 0, 9)
      [1, 0, 4]

      >>> s = new SequenceMatcher(null, 'ab', 'c')
      >>> s.findLongestMatch(0, 2, 0, 1)
      [0, 0, 0]
      */
      // CAUTION:  stripping common prefix or suffix would be incorrect.
      // E.g.,
      //    ab
      //    acab
      // Longest matching block is "ab", but if common prefix is
      // stripped, it's "a" (tied with "b").  UNIX(tm) diff does so
      // strip, so ends up claiming that ab is changed to acab by
      // inserting "ca" in the middle.  That's minimal but unintuitive:
      // "it's obvious" that someone inserted "ac" at the front.
      // Windiff ends up at the same place as diff, but by pairing up
      // the unique 'b's and then matching the first two 'a's.
      [a, b, b2j, isbjunk] = [this.a, this.b, this.b2j, this.isbjunk];
      [besti, bestj, bestsize] = [alo, blo, 0];
      // find longest junk-free match
      // during an iteration of the loop, j2len[j] = length of longest
      // junk-free match ending with a[i-1] and b[j]
      j2len = {};
      for (i = l = ref = alo, ref1 = ahi; (ref <= ref1 ? l < ref1 : l > ref1); i = ref <= ref1 ? ++l : --l) {
        // look at all instances of a[i] in b; note that because
        // b2j has no junk keys, the loop is skipped if a[i] is junk
        newj2len = {};
        jlist = [];
        if (b2j.has(a[i])) {
          jlist = b2j.get(a[i]);
        }
        for (m = 0, len = jlist.length; m < len; m++) {
          j = jlist[m];
          if (j < blo) {
            // a[i] matches b[j]
            continue;
          }
          if (j >= bhi) {
            break;
          }
          k = newj2len[j] = (j2len[j - 1] || 0) + 1;
          if (k > bestsize) {
            [besti, bestj, bestsize] = [i - k + 1, j - k + 1, k];
          }
        }
        j2len = newj2len;
      }
      // Extend the best by non-junk elements on each end.  In particular,
      // "popular" non-junk elements aren't in b2j, which greatly speeds
      // the inner loop above, but also means "the best" match so far
      // doesn't contain any junk *or* popular non-junk elements.
      while (besti > alo && bestj > blo && !isbjunk(b[bestj - 1]) && a[besti - 1] === b[bestj - 1]) {
        [besti, bestj, bestsize] = [besti - 1, bestj - 1, bestsize + 1];
      }
      while (besti + bestsize < ahi && bestj + bestsize < bhi && !isbjunk(b[bestj + bestsize]) && a[besti + bestsize] === b[bestj + bestsize]) {
        bestsize++;
      }
      // Now that we have a wholly interesting match (albeit possibly
      // empty!), we may as well suck up the matching junk on each
      // side of it too.  Can't think of a good reason not to, and it
      // saves post-processing the (possibly considerable) expense of
      // figuring out what to do with it.  In the case of an empty
      // interesting match, this is clearly the right thing to do,
      // because no other kind of match is possible in the regions.
      while (besti > alo && bestj > blo && isbjunk(b[bestj - 1]) && a[besti - 1] === b[bestj - 1]) {
        [besti, bestj, bestsize] = [besti - 1, bestj - 1, bestsize + 1];
      }
      while (besti + bestsize < ahi && bestj + bestsize < bhi && isbjunk(b[bestj + bestsize]) && a[besti + bestsize] === b[bestj + bestsize]) {
        bestsize++;
      }
      return [besti, bestj, bestsize];
    }

    getMatchingBlocks() {
      var ahi, alo, bhi, blo, i, i1, i2, j, j1, j2, k, k1, k2, l, la, lb, len, matchingBlocks, nonAdjacent, queue, x;
      if (this.matchingBlocks) {
        /*
        Return list of triples describing matching subsequences.

        Each triple is of the form [i, j, n], and means that
        a[i...i+n] == b[j...j+n].  The triples are monotonically increasing in
        i and in j.  it's also guaranteed that if
        [i, j, n] and [i', j', n'] are adjacent triples in the list, and
        the second is not the last triple in the list, then i+n != i' or
        j+n != j'.  IOW, adjacent triples never describe adjacent equal
        blocks.

        The last triple is a dummy, [a.length, b.length, 0], and is the only
        triple with n==0.

        >>> s = new SequenceMatcher(null, 'abxcd', 'abcd')
        >>> s.getMatchingBlocks()
        [[0, 0, 2], [3, 2, 2], [5, 4, 0]]

        */
        return this.matchingBlocks;
      }
      [la, lb] = [this.a.length, this.b.length];
      // This is most naturally expressed as a recursive algorithm, but
      // at least one user bumped into extreme use cases that exceeded
      // the recursion limit on their box.  So, now we maintain a list
      // ('queue`) of blocks we still need to look at, and append partial
      // results to `matching_blocks` in a loop; the matches are sorted
      // at the end.
      queue = [[0, la, 0, lb]];
      matchingBlocks = [];
      while (queue.length) {
        [alo, ahi, blo, bhi] = queue.pop();
        [i, j, k] = x = this.findLongestMatch(alo, ahi, blo, bhi);
        // a[alo...i] vs b[blo...j] unknown
        // a[i...i+k] same as b[j...j+k]
        // a[i+k...ahi] vs b[j+k...bhi] unknown
        if (k) {
          matchingBlocks.push(x);
          if (alo < i && blo < j) {
            queue.push([alo, i, blo, j]);
          }
          if (i + k < ahi && j + k < bhi) {
            queue.push([i + k, ahi, j + k, bhi]);
          }
        }
      }
      matchingBlocks.sort(_arrayCmp);
      // It's possible that we have adjacent equal blocks in the
      // matching_blocks list now. 
      i1 = j1 = k1 = 0;
      nonAdjacent = [];
      for (l = 0, len = matchingBlocks.length; l < len; l++) {
        [i2, j2, k2] = matchingBlocks[l];
        // Is this block adjacent to i1, j1, k1?
        if (i1 + k1 === i2 && j1 + k1 === j2) {
          // Yes, so collapse them -- this just increases the length of
          // the first block by the length of the second, and the first
          // block so lengthened remains the block to compare against.
          k1 += k2;
        } else {
          // Not adjacent.  Remember the first block (k1==0 means it's
          // the dummy we started with), and make the second block the
          // new block to compare against.
          if (k1) {
            nonAdjacent.push([i1, j1, k1]);
          }
          [i1, j1, k1] = [i2, j2, k2];
        }
      }
      if (k1) {
        nonAdjacent.push([i1, j1, k1]);
      }
      nonAdjacent.push([la, lb, 0]);
      return this.matchingBlocks = nonAdjacent;
    }

    getOpcodes() {
      var ai, answer, bj, i, j, l, len, ref, size, tag;
      if (this.opcodes) {
        /* 
        Return list of 5-tuples describing how to turn a into b.

        Each tuple is of the form [tag, i1, i2, j1, j2].  The first tuple
        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the
        tuple preceding it, and likewise for j1 == the previous j2.

        The tags are strings, with these meanings:

        'replace':  a[i1...i2] should be replaced by b[j1...j2]
        'delete':   a[i1...i2] should be deleted.
                    Note that j1==j2 in this case.
        'insert':   b[j1...j2] should be inserted at a[i1...i1].
                    Note that i1==i2 in this case.
        'equal':    a[i1...i2] == b[j1...j2]

        >>> s = new SequenceMatcher(null, 'qabxcd', 'abycdf')
        >>> s.getOpcodes()
        [ [ 'delete'  , 0 , 1 , 0 , 0 ] ,
          [ 'equal'   , 1 , 3 , 0 , 2 ] ,
          [ 'replace' , 3 , 4 , 2 , 3 ] ,
          [ 'equal'   , 4 , 6 , 3 , 5 ] ,
          [ 'insert'  , 6 , 6 , 5 , 6 ] ]
        */
        return this.opcodes;
      }
      i = j = 0;
      this.opcodes = answer = [];
      ref = this.getMatchingBlocks();
      for (l = 0, len = ref.length; l < len; l++) {
        [ai, bj, size] = ref[l];
        // invariant:  we've pumped out correct diffs to change
        // a[0...i] into b[0...j], and the next matching block is
        // a[ai...ai+size] == b[bj...bj+size].  So we need to pump
        // out a diff to change a[i:ai] into b[j...bj], pump out
        // the matching block, and move [i,j] beyond the match
        tag = '';
        if (i < ai && j < bj) {
          tag = 'replace';
        } else if (i < ai) {
          tag = 'delete';
        } else if (j < bj) {
          tag = 'insert';
        }
        if (tag) {
          answer.push([tag, i, ai, j, bj]);
        }
        [i, j] = [ai + size, bj + size];
        // the list of matching blocks is terminated by a
        // sentinel with size 0
        if (size) {
          answer.push(['equal', ai, i, bj, j]);
        }
      }
      return answer;
    }

    getGroupedOpcodes(n = 3) {
      /* 
      Isolate change clusters by eliminating ranges with no changes.

      Return a list groups with upto n lines of context.
      Each group is in the same format as returned by get_opcodes().

      >>> a = [1...40].map(String)
      >>> b = a.slice()
      >>> b[8...8] = 'i'
      >>> b[20] += 'x'
      >>> b[23...28] = []
      >>> b[30] += 'y'
      >>> s = new SequenceMatcher(null, a, b)
      >>> s.getGroupedOpcodes()
      [ [ [ 'equal'  , 5 , 8  , 5 , 8 ],
          [ 'insert' , 8 , 8  , 8 , 9 ],
          [ 'equal'  , 8 , 11 , 9 , 12 ] ],
        [ [ 'equal'   , 16 , 19 , 17 , 20 ],
          [ 'replace' , 19 , 20 , 20 , 21 ],
          [ 'equal'   , 20 , 22 , 21 , 23 ],
          [ 'delete'  , 22 , 27 , 23 , 23 ],
          [ 'equal'   , 27 , 30 , 23 , 26 ] ],
        [ [ 'equal'   , 31 , 34 , 27 , 30 ],
          [ 'replace' , 34 , 35 , 30 , 31 ],
          [ 'equal'   , 35 , 38 , 31 , 34 ] ] ]
      */
      var codes, group, groups, i1, i2, j1, j2, l, len, nn, tag;
      codes = this.getOpcodes();
      if (!codes.length) {
        codes = [['equal', 0, 1, 0, 1]];
      }
      // Fixup leading and trailing groups if they show no changes.
      if (codes[0][0] === 'equal') {
        [tag, i1, i2, j1, j2] = codes[0];
        codes[0] = [tag, max(i1, i2 - n), i2, max(j1, j2 - n), j2];
      }
      if (codes[codes.length - 1][0] === 'equal') {
        [tag, i1, i2, j1, j2] = codes[codes.length - 1];
        codes[codes.length - 1] = [tag, i1, min(i2, i1 + n), j1, min(j2, j1 + n)];
      }
      nn = n + n;
      groups = [];
      group = [];
      for (l = 0, len = codes.length; l < len; l++) {
        [tag, i1, i2, j1, j2] = codes[l];
        // End the current group and start a new one whenever
        // there is a large range with no changes.
        if (tag === 'equal' && i2 - i1 > nn) {
          group.push([tag, i1, min(i2, i1 + n), j1, min(j2, j1 + n)]);
          groups.push(group);
          group = [];
          [i1, j1] = [max(i1, i2 - n), max(j1, j2 - n)];
        }
        group.push([tag, i1, i2, j1, j2]);
      }
      if (group.length && !(group.length === 1 && group[0][0] === 'equal')) {
        groups.push(group);
      }
      return groups;
    }

    ratio() {
      /*
      Return a measure of the sequences' similarity (float in [0,1]).

      Where T is the total number of elements in both sequences, and
      M is the number of matches, this is 2.0*M / T.
      Note that this is 1 if the sequences are identical, and 0 if
      they have nothing in common.

      .ratio() is expensive to compute if you haven't already computed
      .getMatchingBlocks() or .getOpcodes(), in which case you may
      want to try .quickRatio() or .realQuickRatio() first to get an
      upper bound.

      >>> s = new SequenceMatcher(null, 'abcd', 'bcde')
      >>> s.ratio()
      0.75
      >>> s.quickRatio()
      0.75
      >>> s.realQuickRatio()
      1.0
      */
      var l, len, match, matches, ref;
      matches = 0;
      ref = this.getMatchingBlocks();
      for (l = 0, len = ref.length; l < len; l++) {
        match = ref[l];
        matches += match[2];
      }
      return _calculateRatio(matches, this.a.length + this.b.length);
    }

    quickRatio() {
      var avail, elt, fullbcount, l, len, len1, m, matches, numb, ref, ref1;
      /*
      Return an upper bound on ratio() relatively quickly.

      This isn't defined beyond that it is an upper bound on .ratio(), and
      is faster to compute.
      */
      // viewing a and b as multisets, set matches to the cardinality
      // of their intersection; this counts the number of matches
      // without regard to order, so is clearly an upper bound
      if (!this.fullbcount) {
        this.fullbcount = fullbcount = {};
        ref = this.b;
        for (l = 0, len = ref.length; l < len; l++) {
          elt = ref[l];
          fullbcount[elt] = (fullbcount[elt] || 0) + 1;
        }
      }
      fullbcount = this.fullbcount;
      // avail[x] is the number of times x appears in 'b' less the
      // number of times we've seen it in 'a' so far ... kinda
      avail = {};
      matches = 0;
      ref1 = this.a;
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        elt = ref1[m];
        if (_has(avail, elt)) {
          numb = avail[elt];
        } else {
          numb = fullbcount[elt] || 0;
        }
        avail[elt] = numb - 1;
        if (numb > 0) {
          matches++;
        }
      }
      return _calculateRatio(matches, this.a.length + this.b.length);
    }

    realQuickRatio() {
      /*
      Return an upper bound on ratio() very quickly.

      This isn't defined beyond that it is an upper bound on .ratio(), and
      is faster to compute than either .ratio() or .quickRatio().
      */
      var la, lb;
      [la, lb] = [this.a.length, this.b.length];
      // can't have more matches than the number of elements in the
      // shorter sequence
      return _calculateRatio(min(la, lb), la + lb);
    }

  };

  getCloseMatches = function(word, possibilities, n = 3, cutoff = 0.6) {
    var l, len, len1, m, result, results, s, score, x;
    /*
    Use SequenceMatcher to return list of the best "good enough" matches.

    word is a sequence for which close matches are desired (typically a
    string).

    possibilities is a list of sequences against which to match word
    (typically a list of strings).

    Optional arg n (default 3) is the maximum number of close matches to
    return.  n must be > 0.

    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities
    that don't score at least that similar to word are ignored.

    The best (no more than n) matches among the possibilities are returned
    in a list, sorted by similarity score, most similar first.

    >>> getCloseMatches('appel', ['ape', 'apple', 'peach', 'puppy'])
    ['apple', 'ape']
    >>> KEYWORDS = require('coffee-script').RESERVED
    >>> getCloseMatches('wheel', KEYWORDS)
    ['when', 'while']
    >>> getCloseMatches('accost', KEYWORDS)
    ['const']
    */
    if (!(n > 0)) {
      throw new Error(`n must be > 0: (${n})`);
    }
    if (!((0.0 <= cutoff && cutoff <= 1.0))) {
      throw new Error(`cutoff must be in [0.0, 1.0]: (${cutoff})`);
    }
    result = [];
    s = new SequenceMatcher();
    s.setSeq2(word);
    for (l = 0, len = possibilities.length; l < len; l++) {
      x = possibilities[l];
      s.setSeq1(x);
      if (s.realQuickRatio() >= cutoff && s.quickRatio() >= cutoff && s.ratio() >= cutoff) {
        result.push([s.ratio(), x]);
      }
    }
    // Move the best scorers to head of list
    result = Heap.nlargest(result, n, _arrayCmp);
    results = [];
    for (m = 0, len1 = result.length; m < len1; m++) {
      [score, x] = result[m];
      // Strip scores for the best n matches
      results.push(x);
    }
    return results;
  };

  _countLeading = function(line, ch) {
    /*
    Return number of `ch` characters at the start of `line`.

    >>> _countLeading('   abc', ' ')
    3
    */
    var i, n;
    [i, n] = [0, line.length];
    while (i < n && line[i] === ch) {
      i++;
    }
    return i;
  };

  Differ = class Differ {
    /*
    Differ is a class for comparing sequences of lines of text, and
    producing human-readable differences or deltas.  Differ uses
    SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    Each line of a Differ delta begins with a two-letter code:

        '- '    line unique to sequence 1
        '+ '    line unique to sequence 2
        '  '    line common to both sequences
        '? '    line not present in either input sequence

    Lines beginning with '? ' attempt to guide the eye to intraline
    differences, and were not present in either input sequence.  These lines
    can be confusing if the sequences contain tab characters.

    Note that Differ makes no claim to produce a *minimal* diff.  To the
    contrary, minimal diffs are often counter-intuitive, because they synch
    up anywhere possible, sometimes accidental matches 100 pages apart.
    Restricting synch points to contiguous matches preserves some notion of
    locality, at the occasional cost of producing a longer diff.

    Example: Comparing two texts.

    >>> text1 = ['1. Beautiful is better than ugly.\n',
    ...   '2. Explicit is better than implicit.\n',
    ...   '3. Simple is better than complex.\n',
    ...   '4. Complex is better than complicated.\n']
    >>> text1.length
    4
    >>> text2 = ['1. Beautiful is better than ugly.\n',
    ...   '3.   Simple is better than complex.\n',
    ...   '4. Complicated is better than complex.\n',
    ...   '5. Flat is better than nested.\n']

    Next we instantiate a Differ object:

    >>> d = new Differ()

    Note that when instantiating a Differ object we may pass functions to
    filter out line and character 'junk'.

    Finally, we compare the two:

    >>> result = d.compare(text1, text2)
    [ '  1. Beautiful is better than ugly.\n',
      '- 2. Explicit is better than implicit.\n',
      '- 3. Simple is better than complex.\n',
      '+ 3.   Simple is better than complex.\n',
      '?   ++\n',
      '- 4. Complex is better than complicated.\n',
      '?          ^                     ---- ^\n',
      '+ 4. Complicated is better than complex.\n',
      '?         ++++ ^                      ^\n',
      '+ 5. Flat is better than nested.\n' ]

    Methods:

    constructor(linejunk=null, charjunk=null)
        Construct a text differencer, with optional filters.
    compare(a, b)
        Compare two sequences of lines; generate the resulting delta.
    */
    constructor(linejunk1, charjunk1) {
      this.linejunk = linejunk1;
      this.charjunk = charjunk1;
    }

    /*
    Construct a text differencer, with optional filters.

    The two optional keyword parameters are for filter functions:

    - `linejunk`: A function that should accept a single string argument,
      and return true iff the string is junk. The module-level function
      `IS_LINE_JUNK` may be used to filter out lines without visible
      characters, except for at most one splat ('#').  It is recommended
      to leave linejunk null. 

    - `charjunk`: A function that should accept a string of length 1. The
      module-level function `IS_CHARACTER_JUNK` may be used to filter out
      whitespace characters (a blank or tab; **note**: bad idea to include
      newline in this!).  Use of IS_CHARACTER_JUNK is recommended.
    */
    compare(a, b) {
      /*
      Compare two sequences of lines; generate the resulting delta.

      Each sequence must contain individual single-line strings ending with
      newlines. Such sequences can be obtained from the `readlines()` method
      of file-like objects.  The delta generated also consists of newline-
      terminated strings, ready to be printed as-is via the writeline()
      method of a file-like object.

      Example:

      >>> d = new Differ
      >>> d.compare(['one\n', 'two\n', 'three\n'],
      ...           ['ore\n', 'tree\n', 'emu\n'])
      [ '- one\n',
        '?  ^\n',
        '+ ore\n',
        '?  ^\n',
        '- two\n',
        '- three\n',
        '?  -\n',
        '+ tree\n',
        '+ emu\n' ]
      */
      var ahi, alo, bhi, blo, cruncher, g, l, len, len1, line, lines, m, ref, tag;
      cruncher = new SequenceMatcher(this.linejunk, a, b);
      lines = [];
      ref = cruncher.getOpcodes();
      for (l = 0, len = ref.length; l < len; l++) {
        [tag, alo, ahi, blo, bhi] = ref[l];
        switch (tag) {
          case 'replace':
            g = this._fancyReplace(a, alo, ahi, b, blo, bhi);
            break;
          case 'delete':
            g = this._dump('-', a, alo, ahi);
            break;
          case 'insert':
            g = this._dump('+', b, blo, bhi);
            break;
          case 'equal':
            g = this._dump(' ', a, alo, ahi);
            break;
          default:
            throw new Error(`unknow tag (${tag})`);
        }
        for (m = 0, len1 = g.length; m < len1; m++) {
          line = g[m];
          lines.push(line);
        }
      }
      return lines;
    }

    _dump(tag, x, lo, hi) {
      var i, l, ref, ref1, results;
      results = [];
      for (i = l = ref = lo, ref1 = hi; (ref <= ref1 ? l < ref1 : l > ref1); i = ref <= ref1 ? ++l : --l) {
        /*
        Generate comparison results for a same-tagged range.
        */
        results.push(`${tag} ${x[i]}`);
      }
      return results;
    }

    _plainReplace(a, alo, ahi, b, blo, bhi) {
      var first, g, l, len, len1, line, lines, m, ref, second;
      assert(alo < ahi && blo < bhi);
      // dump the shorter block first -- reduces the burden on short-term
      // memory if the blocks are of very different sizes
      if (bhi - blo < ahi - alo) {
        first = this._dump('+', b, blo, bhi);
        second = this._dump('-', a, alo, ahi);
      } else {
        first = this._dump('-', a, alo, ahi);
        second = this._dump('+', b, blo, bhi);
      }
      lines = [];
      ref = [first, second];
      for (l = 0, len = ref.length; l < len; l++) {
        g = ref[l];
        for (m = 0, len1 = g.length; m < len1; m++) {
          line = g[m];
          lines.push(line);
        }
      }
      return lines;
    }

    _fancyReplace(a, alo, ahi, b, blo, bhi) {
      var aelt, ai, ai1, ai2, atags, belt, bestRatio, besti, bestj, bj, bj1, bj2, btags, cruncher, cutoff, eqi, eqj, i, j, l, la, lb, len, len1, len2, len3, len4, line, lines, m, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, t, tag;
      /*
      When replacing one block of lines with another, search the blocks
      for *similar* lines; the best-matching pair (if any) is used as a
      synch point, and intraline difference marking is done on the
      similar pair. Lots of work, but often worth it.

      Example:
      >>> d = new Differ
      >>> d._fancyReplace(['abcDefghiJkl\n'], 0, 1,
      ...                 ['abcdefGhijkl\n'], 0, 1)
      [ '- abcDefghiJkl\n',
        '?    ^  ^  ^\n',
        '+ abcdefGhijkl\n',
        '?    ^  ^  ^\n' ]
      */
      // don't synch up unless the lines have a similarity score of at
      // least cutoff; best_ratio tracks the best score seen so far
      [bestRatio, cutoff] = [0.74, 0.75];
      cruncher = new SequenceMatcher(this.charjunk);
      [eqi, eqj] = [
        null,
        null // 1st indices of equal lines (if any)
      ];
      lines = [];
// search for the pair that matches best without being identical
// (identical lines must be junk lines, & we don't want to synch up
// on junk -- unless we have to)
      for (j = l = ref = blo, ref1 = bhi; (ref <= ref1 ? l < ref1 : l > ref1); j = ref <= ref1 ? ++l : --l) {
        bj = b[j];
        cruncher.setSeq2(bj);
        for (i = m = ref2 = alo, ref3 = ahi; (ref2 <= ref3 ? m < ref3 : m > ref3); i = ref2 <= ref3 ? ++m : --m) {
          ai = a[i];
          if (ai === bj) {
            if (eqi === null) {
              [eqi, eqj] = [i, j];
            }
            continue;
          }
          cruncher.setSeq1(ai);
          // computing similarity is expensive, so use the quick
          // upper bounds first -- have seen this speed up messy
          // compares by a factor of 3.
          // note that ratio() is only expensive to compute the first
          // time it's called on a sequence pair; the expensive part
          // of the computation is cached by cruncher
          if (cruncher.realQuickRatio() > bestRatio && cruncher.quickRatio() > bestRatio && cruncher.ratio() > bestRatio) {
            [bestRatio, besti, bestj] = [cruncher.ratio(), i, j];
          }
        }
      }
      if (bestRatio < cutoff) {
        // no non-identical "pretty close" pair
        if (eqi === null) {
          ref4 = this._plainReplace(a, alo, ahi, b, blo, bhi);
          // no identical pair either -- treat it as a straight replace
          for (o = 0, len = ref4.length; o < len; o++) {
            line = ref4[o];
            lines.push(line);
          }
          return lines;
        }
        // no close pair, but an identical pair -- synch up on that
        [besti, bestj, bestRatio] = [eqi, eqj, 1.0];
      } else {
        // there's a close pair, so forget the identical pair (if any)
        eqi = null;
      }
      ref5 = this._fancyHelper(a, alo, besti, b, blo, bestj);
      // a[besti] very similar to b[bestj]; eqi is null iff they're not
      // identical

      // pump out diffs from before the synch point
      for (p = 0, len1 = ref5.length; p < len1; p++) {
        line = ref5[p];
        lines.push(line);
      }
      // do intraline marking on the synch pair
      [aelt, belt] = [a[besti], b[bestj]];
      if (eqi === null) {
        // pump out a '-', '?', '+', '?' quad for the synched lines
        atags = btags = '';
        cruncher.setSeqs(aelt, belt);
        ref6 = cruncher.getOpcodes();
        for (q = 0, len2 = ref6.length; q < len2; q++) {
          [tag, ai1, ai2, bj1, bj2] = ref6[q];
          [la, lb] = [ai2 - ai1, bj2 - bj1];
          switch (tag) {
            case 'replace':
              atags += Array(la + 1).join('^');
              btags += Array(lb + 1).join('^');
              break;
            case 'delete':
              atags += Array(la + 1).join('-');
              break;
            case 'insert':
              btags += Array(lb + 1).join('+');
              break;
            case 'equal':
              atags += Array(la + 1).join(' ');
              btags += Array(lb + 1).join(' ');
              break;
            default:
              throw new Error(`unknow tag (${tag})`);
          }
        }
        ref7 = this._qformat(aelt, belt, atags, btags);
        for (r = 0, len3 = ref7.length; r < len3; r++) {
          line = ref7[r];
          lines.push(line);
        }
      } else {
        // the synch pair is identical
        lines.push('  ' + aelt);
      }
      ref8 = this._fancyHelper(a, besti + 1, ahi, b, bestj + 1, bhi);
      // pump out diffs from after the synch point
      for (t = 0, len4 = ref8.length; t < len4; t++) {
        line = ref8[t];
        lines.push(line);
      }
      return lines;
    }

    _fancyHelper(a, alo, ahi, b, blo, bhi) {
      var g;
      g = [];
      if (alo < ahi) {
        if (blo < bhi) {
          g = this._fancyReplace(a, alo, ahi, b, blo, bhi);
        } else {
          g = this._dump('-', a, alo, ahi);
        }
      } else if (blo < bhi) {
        g = this._dump('+', b, blo, bhi);
      }
      return g;
    }

    _qformat(aline, bline, atags, btags) {
      /*
      Format "?" output and deal with leading tabs.

      Example:

      >>> d = new Differ
      >>> d._qformat('\tabcDefghiJkl\n', '\tabcdefGhijkl\n',
      [ '- \tabcDefghiJkl\n',
        '? \t ^ ^  ^\n',
        '+ \tabcdefGhijkl\n',
        '? \t ^ ^  ^\n' ]
      */
      var common, lines;
      lines = [];
      // Can hurt, but will probably help most of the time.
      common = min(_countLeading(aline, '\t'), _countLeading(bline, '\t'));
      common = min(common, _countLeading(atags.slice(0, common), ' '));
      common = min(common, _countLeading(btags.slice(0, common), ' '));
      atags = atags.slice(common).replace(/\s+$/, '');
      btags = btags.slice(common).replace(/\s+$/, '');
      lines.push('- ' + aline);
      if (atags.length) {
        lines.push(`? ${Array(common + 1).join('\t')}${atags}\n`);
      }
      lines.push('+ ' + bline);
      if (btags.length) {
        lines.push(`? ${Array(common + 1).join('\t')}${btags}\n`);
      }
      return lines;
    }

  };

  // With respect to junk, an earlier version of ndiff simply refused to
  // *start* a match with a junk element.  The result was cases like this:
  //     before: private Thread currentThread;
  //     after:  private volatile Thread currentThread;
  // If you consider whitespace to be junk, the longest contiguous match
  // not starting with junk is "e Thread currentThread".  So ndiff reported
  // that "e volatil" was inserted between the 't' and the 'e' in "private".
  // While an accurate view, to people that's absurd.  The current version
  // looks for matching blocks that are entirely junk-free, then extends the
  // longest one of those as far as possible but only with matching junk.
  // So now "currentThread" is matched, then extended to suck up the
  // preceding blank; then "private" is matched, and extended to suck up the
  // following blank; then "Thread" is matched; and finally ndiff reports
  // that "volatile " was inserted before "Thread".  The only quibble
  // remaining is that perhaps it was really the case that " volatile"
  // was inserted after "private".  I can live with that <wink>.
  IS_LINE_JUNK = function(line, pat = /^\s*#?\s*$/) {
    /*
    Return 1 for ignorable line: iff `line` is blank or contains a single '#'.

    Examples:

    >>> IS_LINE_JUNK('\n')
    true
    >>> IS_LINE_JUNK('  #   \n')
    true
    >>> IS_LINE_JUNK('hello\n')
    false
    */
    return pat.test(line);
  };

  IS_CHARACTER_JUNK = function(ch, ws = ' \t') {
    /*
    Return 1 for ignorable character: iff `ch` is a space or tab.

    Examples:
    >>> IS_CHARACTER_JUNK(' ').should.be.true
    true
    >>> IS_CHARACTER_JUNK('\t').should.be.true
    true
    >>> IS_CHARACTER_JUNK('\n').should.be.false
    false
    >>> IS_CHARACTER_JUNK('x').should.be.false
    false
    */
    return indexOf.call(ws, ch) >= 0;
  };

  _formatRangeUnified = function(start, stop) {
    var beginning, length;
    /*
    Convert range to the "ed" format'
    */
    // Per the diff spec at http://www.unix.org/single_unix_specification/
    beginning = start + 1; // lines start numbering with one
    length = stop - start;
    if (length === 1) {
      return `${beginning}`;
    }
    if (!length) { // empty ranges begin at line just before the range
      beginning--;
    }
    return `${beginning},${length}`;
  };

  unifiedDiff = function(a, b, {fromfile, tofile, fromfiledate, tofiledate, n, lineterm} = {}) {
    var file1Range, file2Range, first, fromdate, group, i1, i2, j1, j2, l, last, len, len1, len2, len3, len4, line, lines, m, o, p, q, ref, ref1, ref2, ref3, started, tag, todate;
    /*
    Compare two sequences of lines; generate the delta as a unified diff.

    Unified diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with ---, +++, or @@) are
    created with a trailing newline.  

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The unidiff format normally has a header for filenames and modification
    times.  Any or all of these may be specified using strings for
    'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.

    Example:

    >>> unifiedDiff('one two three four'.split(' '),
    ...             'zero one tree four'.split(' '), {
    ...               fromfile: 'Original'
    ...               tofile: 'Current',
    ...               fromfiledate: '2005-01-26 23:30:50',
    ...               tofiledate: '2010-04-02 10:20:52',
    ...               lineterm: ''
    ...             })
    [ '--- Original\t2005-01-26 23:30:50',
      '+++ Current\t2010-04-02 10:20:52',
      '@@ -1,4 +1,4 @@',
      '+zero',
      ' one',
      '-two',
      '-three',
      '+tree',
      ' four' ]

    */
    if (fromfile == null) {
      fromfile = '';
    }
    if (tofile == null) {
      tofile = '';
    }
    if (fromfiledate == null) {
      fromfiledate = '';
    }
    if (tofiledate == null) {
      tofiledate = '';
    }
    if (n == null) {
      n = 3;
    }
    if (lineterm == null) {
      lineterm = '\n';
    }
    lines = [];
    started = false;
    ref = (new SequenceMatcher(null, a, b)).getGroupedOpcodes();
    for (l = 0, len = ref.length; l < len; l++) {
      group = ref[l];
      if (!started) {
        started = true;
        fromdate = fromfiledate ? `\t${fromfiledate}` : '';
        todate = tofiledate ? `\t${tofiledate}` : '';
        lines.push(`--- ${fromfile}${fromdate}${lineterm}`);
        lines.push(`+++ ${tofile}${todate}${lineterm}`);
      }
      [first, last] = [group[0], group[group.length - 1]];
      file1Range = _formatRangeUnified(first[1], last[2]);
      file2Range = _formatRangeUnified(first[3], last[4]);
      lines.push(`@@ -${file1Range} +${file2Range} @@${lineterm}`);
      for (m = 0, len1 = group.length; m < len1; m++) {
        [tag, i1, i2, j1, j2] = group[m];
        if (tag === 'equal') {
          ref1 = a.slice(i1, i2);
          for (o = 0, len2 = ref1.length; o < len2; o++) {
            line = ref1[o];
            lines.push(' ' + line);
          }
          continue;
        }
        if (tag === 'replace' || tag === 'delete') {
          ref2 = a.slice(i1, i2);
          for (p = 0, len3 = ref2.length; p < len3; p++) {
            line = ref2[p];
            lines.push('-' + line);
          }
        }
        if (tag === 'replace' || tag === 'insert') {
          ref3 = b.slice(j1, j2);
          for (q = 0, len4 = ref3.length; q < len4; q++) {
            line = ref3[q];
            lines.push('+' + line);
          }
        }
      }
    }
    return lines;
  };

  _formatRangeContext = function(start, stop) {
    var beginning, length;
    /*
    Convert range to the "ed" format'
    */
    // Per the diff spec at http://www.unix.org/single_unix_specification/
    beginning = start + 1; // lines start numbering with one
    length = stop - start;
    if (!length) { // empty ranges begin at line just before the range
      beginning--;
    }
    if (length <= 1) {
      return `${beginning}`;
    }
    return `${beginning},${beginning + length - 1}`;
  };

  // See http://www.unix.org/single_unix_specification/
  contextDiff = function(a, b, {fromfile, tofile, fromfiledate, tofiledate, n, lineterm} = {}) {
    var _, file1Range, file2Range, first, fromdate, group, i1, i2, j1, j2, l, last, len, len1, len2, len3, len4, line, lines, m, o, p, prefix, q, ref, ref1, ref2, started, tag, todate;
    /*
    Compare two sequences of lines; generate the delta as a context diff.

    Context diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with *** or ---) are
    created with a trailing newline.  This is helpful so that inputs
    created from file.readlines() result in diffs that are suitable for
    file.writelines() since both the inputs and outputs have trailing
    newlines.

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The context diff format normally has a header for filenames and
    modification times.  Any or all of these may be specified using
    strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.
    If not specified, the strings default to blanks.

    Example:
    >>> a = ['one\n', 'two\n', 'three\n', 'four\n']
    >>> b = ['zero\n', 'one\n', 'tree\n', 'four\n']
    >>> contextDiff(a, b, {fromfile: 'Original', tofile: 'Current'})
    [ '*** Original\n',
      '--- Current\n',
      '***************\n',
      '*** 1,4 ****\n',
      '  one\n',
      '! two\n',
      '! three\n',
      '  four\n',
      '--- 1,4 ----\n',
      '+ zero\n',
      '  one\n',
      '! tree\n',
      '  four\n' ]
    */
    if (fromfile == null) {
      fromfile = '';
    }
    if (tofile == null) {
      tofile = '';
    }
    if (fromfiledate == null) {
      fromfiledate = '';
    }
    if (tofiledate == null) {
      tofiledate = '';
    }
    if (n == null) {
      n = 3;
    }
    if (lineterm == null) {
      lineterm = '\n';
    }
    prefix = {
      insert: '+ ',
      delete: '- ',
      replace: '! ',
      equal: '  '
    };
    started = false;
    lines = [];
    ref = (new SequenceMatcher(null, a, b)).getGroupedOpcodes();
    for (l = 0, len = ref.length; l < len; l++) {
      group = ref[l];
      if (!started) {
        started = true;
        fromdate = fromfiledate ? `\t${fromfiledate}` : '';
        todate = tofiledate ? `\t${tofiledate}` : '';
        lines.push(`*** ${fromfile}${fromdate}${lineterm}`);
        lines.push(`--- ${tofile}${todate}${lineterm}`);
        [first, last] = [group[0], group[group.length - 1]];
        lines.push('***************' + lineterm);
        file1Range = _formatRangeContext(first[1], last[2]);
        lines.push(`*** ${file1Range} ****${lineterm}`);
        if (_any((function() {
          var len1, m, results;
          results = [];
          for (m = 0, len1 = group.length; m < len1; m++) {
            [tag, _, _, _, _] = group[m];
            results.push(tag === 'replace' || tag === 'delete');
          }
          return results;
        })())) {
          for (m = 0, len1 = group.length; m < len1; m++) {
            [tag, i1, i2, _, _] = group[m];
            if (tag !== 'insert') {
              ref1 = a.slice(i1, i2);
              for (o = 0, len2 = ref1.length; o < len2; o++) {
                line = ref1[o];
                lines.push(prefix[tag] + line);
              }
            }
          }
        }
        file2Range = _formatRangeContext(first[3], last[4]);
        lines.push(`--- ${file2Range} ----${lineterm}`);
        if (_any((function() {
          var len3, p, results;
          results = [];
          for (p = 0, len3 = group.length; p < len3; p++) {
            [tag, _, _, _, _] = group[p];
            results.push(tag === 'replace' || tag === 'insert');
          }
          return results;
        })())) {
          for (p = 0, len3 = group.length; p < len3; p++) {
            [tag, _, _, j1, j2] = group[p];
            if (tag !== 'delete') {
              ref2 = b.slice(j1, j2);
              for (q = 0, len4 = ref2.length; q < len4; q++) {
                line = ref2[q];
                lines.push(prefix[tag] + line);
              }
            }
          }
        }
      }
    }
    return lines;
  };

  ndiff = function(a, b, linejunk, charjunk = IS_CHARACTER_JUNK) {
    /*
    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.

    Optional keyword parameters `linejunk` and `charjunk` are for filter
    functions (or None):

    - linejunk: A function that should accept a single string argument, and
      return true iff the string is junk.  The default is null, and is
      recommended; 

    - charjunk: A function that should accept a string of length 1. The
      default is module-level function IS_CHARACTER_JUNK, which filters out
      whitespace characters (a blank or tab; note: bad idea to include newline
      in this!).

    Example:
    >>> a = ['one\n', 'two\n', 'three\n']
    >>> b = ['ore\n', 'tree\n', 'emu\n']
    >>> ndiff(a, b)
    [ '- one\n',
      '?  ^\n',
      '+ ore\n',
      '?  ^\n',
      '- two\n',
      '- three\n',
      '?  -\n',
      '+ tree\n',
      '+ emu\n' ]
    */
    return (new Differ(linejunk, charjunk)).compare(a, b);
  };

  restore = function(delta, which) {
    /*
    Generate one of the two sequences that generated a delta.

    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract
    lines originating from file 1 or 2 (parameter `which`), stripping off line
    prefixes.

    Examples:
    >>> a = ['one\n', 'two\n', 'three\n']
    >>> b = ['ore\n', 'tree\n', 'emu\n']
    >>> diff = ndiff(a, b)
    >>> restore(diff, 1)
    [ 'one\n',
      'two\n',
      'three\n' ]
    >>> restore(diff, 2)
    [ 'ore\n',
      'tree\n',
      'emu\n' ]
    */
    var l, len, line, lines, prefixes, ref, tag;
    tag = {
      1: '- ',
      2: '+ '
    }[which];
    if (!tag) {
      throw new Error(`unknow delta choice (must be 1 or 2): ${which}`);
    }
    prefixes = ['  ', tag];
    lines = [];
    for (l = 0, len = delta.length; l < len; l++) {
      line = delta[l];
      if (ref = line.slice(0, 2), indexOf.call(prefixes, ref) >= 0) {
        lines.push(line.slice(2));
      }
    }
    return lines;
  };

  // exports to global
  exports._arrayCmp = _arrayCmp;

  exports.SequenceMatcher = SequenceMatcher;

  exports.getCloseMatches = getCloseMatches;

  exports._countLeading = _countLeading;

  exports.Differ = Differ;

  exports.IS_LINE_JUNK = IS_LINE_JUNK;

  exports.IS_CHARACTER_JUNK = IS_CHARACTER_JUNK;

  exports._formatRangeUnified = _formatRangeUnified;

  exports.unifiedDiff = unifiedDiff;

  exports._formatRangeContext = _formatRangeContext;

  exports.contextDiff = contextDiff;

  exports.ndiff = ndiff;

  exports.restore = restore;

}).call(this);


/***/ }),

/***/ "./node_modules/assert/build/assert.js":
/*!*********************************************!*\
  !*** ./node_modules/assert/build/assert.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b

// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var _require = __webpack_require__(/*! ./internal/errors */ "./node_modules/assert/build/internal/errors.js"),
  _require$codes = _require.codes,
  ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
  ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
var AssertionError = __webpack_require__(/*! ./internal/assert/assertion_error */ "./node_modules/assert/build/internal/assert/assertion_error.js");
var _require2 = __webpack_require__(/*! util/ */ "./node_modules/util/util.js"),
  inspect = _require2.inspect;
var _require$types = (__webpack_require__(/*! util/ */ "./node_modules/util/util.js").types),
  isPromise = _require$types.isPromise,
  isRegExp = _require$types.isRegExp;
var objectAssign = __webpack_require__(/*! object.assign/polyfill */ "./node_modules/object.assign/polyfill.js")();
var objectIs = __webpack_require__(/*! object-is/polyfill */ "./node_modules/object-is/polyfill.js")();
var RegExpPrototypeTest = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js")('RegExp.prototype.test');
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;
function lazyLoadComparison() {
  var comparison = __webpack_require__(/*! ./internal/util/comparisons */ "./node_modules/assert/build/internal/util/comparisons.js");
  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
}

// Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex
var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = ["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"];
var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};
var warned = false;

// The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {};

// All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}
function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;
  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }
    if (argsLen === 2) operator = '!=';
  }
  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };
  if (message !== undefined) {
    errArgs.message = message;
  }
  var err = new AssertionError(errArgs);
  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }
  throw err;
}
assert.fail = fail;

// The AssertionError is defined in internal/error.
assert.AssertionError = AssertionError;
function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;
    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }
    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
}

// Pure assertion tests whether a value is truthy, as determined
// by !!value.
function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  innerOk.apply(void 0, [ok, args.length].concat(args));
}
assert.ok = ok;

// The equality assertion tests shallow, coercive equality with ==.
/* eslint-disable no-restricted-properties */
assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  // eslint-disable-next-line eqeqeq
  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
};

// The non-equality assertion tests for whether two objects are not
// equal with !=.
assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  // eslint-disable-next-line eqeqeq
  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
};

// The equivalence assertion tests a deep equality relation.
assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
};

// The non-equivalence assertion tests for any deep inequality.
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}
assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};
var Comparison = /*#__PURE__*/_createClass(function Comparison(obj, keys, actual) {
  var _this = this;
  _classCallCheck(this, Comparison);
  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
});
function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}
function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);
    // assert.doesNotThrow does not accept objects.
    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    }

    // Handle primitives properly.
    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }
    var keys = Object.keys(expected);
    // Special handle errors to make sure the name and the message are compared
    // as well.
    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }
    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {
        return;
      }
      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  }
  // Guard instanceof against arrow functions as they don't have a prototype.
  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }
  if (Error.isPrototypeOf(expected)) {
    return false;
  }
  return expected.call({}, actual) === true;
}
function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }
  try {
    fn();
  } catch (e) {
    return e;
  }
  return NO_EXCEPTION_SENTINEL;
}
function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.

  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.

  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}
function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;
    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn();
      // Fail in case no promise is returned.
      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }
    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}
function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }
    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }
    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }
  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';
    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }
    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }
  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}
function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;
  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }
  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }
  throw actual;
}
assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }
  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};
assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};
assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }
  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};
assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }
  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};
assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';
    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }
    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    });

    // Make sure we actually have a stack trace!
    var origStack = err.stack;
    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift();
      // Filter all frames existing in err.stack.
      var tmp1 = newErr.stack.split('\n');
      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);
        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }
      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }
    throw newErr;
  }
};

// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a871df3dfb8ea663ef5e1f8f62701ec51384ecb
function internalMatch(string, regexp, message, fn, fnName) {
  if (!isRegExp(regexp)) {
    throw new ERR_INVALID_ARG_TYPE('regexp', 'RegExp', regexp);
  }
  var match = fnName === 'match';
  if (typeof string !== 'string' || RegExpPrototypeTest(regexp, string) !== match) {
    if (message instanceof Error) {
      throw message;
    }
    var generatedMessage = !message;

    // 'The input was expected to not match the regular expression ' +
    message = message || (typeof string !== 'string' ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string), " (").concat(inspect(string), ")") : (match ? 'The input did not match the regular expression ' : 'The input was expected to not match the regular expression ') + "".concat(inspect(regexp), ". Input:\n\n").concat(inspect(string), "\n"));
    var err = new AssertionError({
      actual: string,
      expected: regexp,
      message: message,
      operator: fnName,
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
}
assert.match = function match(string, regexp, message) {
  internalMatch(string, regexp, message, match, 'match');
};
assert.doesNotMatch = function doesNotMatch(string, regexp, message) {
  internalMatch(string, regexp, message, doesNotMatch, 'doesNotMatch');
};

// Expose a strict only variant of assert
function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }
  innerOk.apply(void 0, [strict, args.length].concat(args));
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ "./node_modules/assert/build/internal/assert/assertion_error.js":
/*!**********************************************************************!*\
  !*** ./node_modules/assert/build/internal/assert/assertion_error.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c



function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _require = __webpack_require__(/*! util/ */ "./node_modules/util/util.js"),
  inspect = _require.inspect;
var _require2 = __webpack_require__(/*! ../errors */ "./node_modules/assert/build/internal/errors.js"),
  ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));
  while (count) {
    str += str;
    count--;
  }
  str += str.substring(0, maxCount - str.length);
  return str;
}
var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
};

// Comparing short primitives should just show === / !== instead of using the
// diff.
var kMaxShortLength = 10;
function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}
function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}
function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = '';

  // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.
  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  }

  // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.
  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length;
    // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.
    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        }
        // Ignore the first characters.
        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  }

  // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).
  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];
  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }
    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }
  var maxLines = Math.max(actualLines.length, expectedLines.length);
  // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n');

    // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.
    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);
      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }
    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }
  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }
  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }
  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;
    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }
        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      }
      // Mark the current line as the last diverging one.
      lastPos = i;
      // Add the expected line to the cache.
      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++;
      // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }
        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      }
      // Mark the current line as the last diverging one.
      lastPos = i;
      // Add the actual line to the result.
      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++;
      // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i];
      // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.
      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine);
      // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //
      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }
      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }
          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        }
        // Mark the current line as the last diverging one.
        lastPos = i;
        // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.
        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2;
        // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = '';
        // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.
        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    }
    // Inspected object to big (Show ~20 rows max)
    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }
  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}
var AssertionError = /*#__PURE__*/function (_Error, _inspect$custom) {
  _inherits(AssertionError, _Error);
  var _super = _createSuper(AssertionError);
  function AssertionError(options) {
    var _this;
    _classCallCheck(this, AssertionError);
    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }
    var message = options.message,
      operator = options.operator,
      stackStartFn = options.stackStartFn;
    var actual = options.actual,
      expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;
    if (message != null) {
      _this = _super.call(this, String(message));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      }
      // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.
      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }
      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _super.call(this, createErrDiff(actual, expected, operator));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n');

        // In case "actual" is an object, it should not be reference equal.
        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        }

        // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.
        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);
          while (res.length > 27) {
            res.pop();
          }
        }

        // Only print a single input.
        if (res.length === 1) {
          _this = _super.call(this, "".concat(base, " ").concat(res[0]));
        } else {
          _this = _super.call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n"));
        }
      } else {
        var _res = inspectValue(actual);
        var other = '';
        var knownOperators = kReadableOperator[operator];
        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));
          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }
          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }
          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }
        _this = _super.call(this, "".concat(_res).concat(other));
      }
    }
    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;
    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    }
    // Create error message including the error code in the name.
    _this.stack;
    // Reset the name.
    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }
  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: _inspect$custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);
  return AssertionError;
}( /*#__PURE__*/_wrapNativeSuper(Error), inspect.custom);
module.exports = AssertionError;

/***/ }),

/***/ "./node_modules/assert/build/internal/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/assert/build/internal/errors.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */
/* eslint node-core/alphabetize-errors: "error" */
/* eslint node-core/prefer-util-format-errors: "error" */



// The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var codes = {};

// Lazy loaded
var assert;
var util;
function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }
  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }
  var NodeError = /*#__PURE__*/function (_Base) {
    _inherits(NodeError, _Base);
    var _super = _createSuper(NodeError);
    function NodeError(arg1, arg2, arg3) {
      var _this;
      _classCallCheck(this, NodeError);
      _this = _super.call(this, getMessage(arg1, arg2, arg3));
      _this.code = code;
      return _this;
    }
    return _createClass(NodeError);
  }(Base);
  codes[code] = NodeError;
}

// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });
    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }
  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}
createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "./node_modules/assert/build/assert.js");
  assert(typeof name === 'string', "'name' must be a string");

  // determiner: 'must be' or 'must not be'
  var determiner;
  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }
  var msg;
  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  // TODO(BridgeAR): Improve the output by showing `null` and similar.
  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(/*! util/ */ "./node_modules/util/util.js");
  var inspected = util.inspect(value);
  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }
  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;
  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }
  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "./node_modules/assert/build/assert.js");
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });
  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;
    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;
    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }
  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ "./node_modules/assert/build/internal/util/comparisons.js":
/*!****************************************************************!*\
  !*** ./node_modules/assert/build/internal/util/comparisons.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var regexFlagsSupported = /a/g.flags !== undefined;
var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};
var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};
var objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ "./node_modules/object-is/index.js");
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(/*! is-nan */ "./node_modules/is-nan/index.js");
function uncurryThis(f) {
  return f.call.bind(f);
}
var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);
var _require$types = (__webpack_require__(/*! util/ */ "./node_modules/util/util.js").types),
  isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
  isArrayBufferView = _require$types.isArrayBufferView,
  isDate = _require$types.isDate,
  isMap = _require$types.isMap,
  isRegExp = _require$types.isRegExp,
  isSet = _require$types.isSet,
  isNativeError = _require$types.isNativeError,
  isBoxedPrimitive = _require$types.isBoxedPrimitive,
  isNumberObject = _require$types.isNumberObject,
  isStringObject = _require$types.isStringObject,
  isBooleanObject = _require$types.isBooleanObject,
  isBigIntObject = _require$types.isBigIntObject,
  isSymbolObject = _require$types.isSymbolObject,
  isFloat32Array = _require$types.isFloat32Array,
  isFloat64Array = _require$types.isFloat64Array;
function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;
  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  }
  // The maximum size for an array is 2 ** 32 -1.
  return key.length === 10 && key >= Math.pow(2, 32);
}
function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
}

// Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3;

// Check if they have the same source and flags
function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}
function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }
  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }
  return true;
}
function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }
  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}
function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}
function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }
  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }
  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }
  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }
  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
}

// Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.

function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  }

  // Check more closely if val1 and val2 are equal.
  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }
    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }
    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }
      return false;
    }
    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }
  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);
  if (val1Tag !== val2Tag) {
    return false;
  }
  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }
    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
    if (keys1.length !== keys2.length) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  }
  // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.
  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }
  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    }
    // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.
    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
    if (_keys.length !== _keys2.length) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }
  return keyCheck(val1, val2, strict, memos, kNoIterator);
}
function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}
function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2);

    // The pair must have the same number of owned properties.
    if (aKeys.length !== bKeys.length) {
      return false;
    }
  }

  // Cheap key test
  var i = 0;
  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }
  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);
    if (symbolKeysA.length !== 0) {
      var count = 0;
      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];
        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }
          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }
      var symbolKeysB = objectGetOwnPropertySymbols(val2);
      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);
      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }
  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  }

  // Use memos to handle cycles.
  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);
    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);
      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }
    memos.position++;
  }
  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}
function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);
  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];
    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }
  return false;
}

// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').
function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;
    case 'object':
      // Only pass in null as object!
      return undefined;
    case 'symbol':
      return false;
    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through
    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }
  }
  return true;
}
function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}
function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) {
    return altValue;
  }
  var curB = b.get(altValue);
  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }
  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}
function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);
  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i];
    // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.
    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      }
      // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.
      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false;

      // Fast path to detect missing string, symbol, undefined and null values.
      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }
      if (set === null) {
        set = new Set();
      }
      set.add(val);
    }
  }
  if (set !== null) {
    var bValues = arrayFromSet(b);
    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i];
      // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.
      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }
    return set.size === 0;
  }
  return true;
}
function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);
  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];
    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }
  return false;
}
function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);
  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
      key = _aEntries$i[0],
      item1 = _aEntries$i[1];
    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }
      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);
      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false;
        // Fast path to detect missing string, symbol, undefined and null
        // keys.
        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
        if (set === null) {
          set = new Set();
        }
        set.add(key);
      }
    }
  }
  if (set !== null) {
    var bEntries = arrayFromMap(b);
    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
        _key = _bEntries$_i[0],
        item = _bEntries$_i[1];
      if (_typeof(_key) === 'object' && _key !== null) {
        if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) {
        return false;
      }
    }
    return set.size === 0;
  }
  return true;
}
function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;
  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);
        for (; i < keysA.length; i++) {
          var key = keysA[i];
          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }
        if (keysA.length !== Object.keys(b).length) {
          return false;
        }
        return true;
      }
    }
  }

  // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:
  for (i = 0; i < keys.length; i++) {
    var _key2 = keys[i];
    if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {
      return false;
    }
  }
  return true;
}
function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}
function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}
module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
const ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ "./node_modules/call-bind/callBound.js":
/*!*********************************************!*\
  !*** ./node_modules/call-bind/callBound.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var callBind = __webpack_require__(/*! ./ */ "./node_modules/call-bind/index.js");

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ "./node_modules/call-bind/index.js":
/*!*****************************************!*\
  !*** ./node_modules/call-bind/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var setFunctionLength = __webpack_require__(/*! set-function-length */ "./node_modules/set-function-length/index.js");

var $TypeError = GetIntrinsic('%TypeError%');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	if (typeof originalFunction !== 'function') {
		throw new $TypeError('a function is required');
	}
	var func = $reflectApply(bind, $call, arguments);
	return setFunctionLength(
		func,
		1 + $max(0, originalFunction.length - (arguments.length - 1)),
		true
	);
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ "./node_modules/colors/lib/colors.js":
/*!*******************************************!*\
  !*** ./node_modules/colors/lib/colors.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/*

The MIT License (MIT)

Original Library
  - Copyright (c) Marak Squires

Additional functionality
 - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var colors = {};
module['exports'] = colors;

colors.themes = {};

var util = __webpack_require__(/*! util */ "./node_modules/util/util.js");
var ansiStyles = colors.styles = __webpack_require__(/*! ./styles */ "./node_modules/colors/lib/styles.js");
var defineProps = Object.defineProperties;
var newLineRegex = new RegExp(/[\r\n]+/g);

colors.supportsColor = (__webpack_require__(/*! ./system/supports-colors */ "./node_modules/colors/lib/system/supports-colors.js").supportsColor);

if (typeof colors.enabled === 'undefined') {
  colors.enabled = colors.supportsColor() !== false;
}

colors.enable = function() {
  colors.enabled = true;
};

colors.disable = function() {
  colors.enabled = false;
};

colors.stripColors = colors.strip = function(str) {
  return ('' + str).replace(/\x1B\[\d+m/g, '');
};

// eslint-disable-next-line no-unused-vars
var stylize = colors.stylize = function stylize(str, style) {
  if (!colors.enabled) {
    return str+'';
  }

  var styleMap = ansiStyles[style];

  // Stylize should work for non-ANSI styles, too
  if(!styleMap && style in colors){
    // Style maps like trap operate as functions on strings;
    // they don't have properties like open or close.
    return colors[style](str);
  }

  return styleMap.open + str + styleMap.close;
};

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
var escapeStringRegexp = function(str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }
  return str.replace(matchOperatorsRe, '\\$&');
};

function build(_styles) {
  var builder = function builder() {
    return applyStyle.apply(builder, arguments);
  };
  builder._styles = _styles;
  // __proto__ is used because we must return a function, but there is
  // no way to create a function with a different prototype.
  builder.__proto__ = proto;
  return builder;
}

var styles = (function() {
  var ret = {};
  ansiStyles.grey = ansiStyles.gray;
  Object.keys(ansiStyles).forEach(function(key) {
    ansiStyles[key].closeRe =
      new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
    ret[key] = {
      get: function() {
        return build(this._styles.concat(key));
      },
    };
  });
  return ret;
})();

var proto = defineProps(function colors() {}, styles);

function applyStyle() {
  var args = Array.prototype.slice.call(arguments);

  var str = args.map(function(arg) {
    // Use weak equality check so we can colorize null/undefined in safe mode
    if (arg != null && arg.constructor === String) {
      return arg;
    } else {
      return util.inspect(arg);
    }
  }).join(' ');

  if (!colors.enabled || !str) {
    return str;
  }

  var newLinesPresent = str.indexOf('\n') != -1;

  var nestedStyles = this._styles;

  var i = nestedStyles.length;
  while (i--) {
    var code = ansiStyles[nestedStyles[i]];
    str = code.open + str.replace(code.closeRe, code.open) + code.close;
    if (newLinesPresent) {
      str = str.replace(newLineRegex, function(match) {
        return code.close + match + code.open;
      });
    }
  }

  return str;
}

colors.setTheme = function(theme) {
  if (typeof theme === 'string') {
    console.log('colors.setTheme now only accepts an object, not a string.  ' +
      'If you are trying to set a theme from a file, it is now your (the ' +
      'caller\'s) responsibility to require the file.  The old syntax ' +
      'looked like colors.setTheme(__dirname + ' +
      '\'/../themes/generic-logging.js\'); The new syntax looks like '+
      'colors.setTheme(require(__dirname + ' +
      '\'/../themes/generic-logging.js\'));');
    return;
  }
  for (var style in theme) {
    (function(style) {
      colors[style] = function(str) {
        if (typeof theme[style] === 'object') {
          var out = str;
          for (var i in theme[style]) {
            out = colors[theme[style][i]](out);
          }
          return out;
        }
        return colors[theme[style]](str);
      };
    })(style);
  }
};

function init() {
  var ret = {};
  Object.keys(styles).forEach(function(name) {
    ret[name] = {
      get: function() {
        return build([name]);
      },
    };
  });
  return ret;
}

var sequencer = function sequencer(map, str) {
  var exploded = str.split('');
  exploded = exploded.map(map);
  return exploded.join('');
};

// custom formatter methods
colors.trap = __webpack_require__(/*! ./custom/trap */ "./node_modules/colors/lib/custom/trap.js");
colors.zalgo = __webpack_require__(/*! ./custom/zalgo */ "./node_modules/colors/lib/custom/zalgo.js");

// maps
colors.maps = {};
colors.maps.america = __webpack_require__(/*! ./maps/america */ "./node_modules/colors/lib/maps/america.js")(colors);
colors.maps.zebra = __webpack_require__(/*! ./maps/zebra */ "./node_modules/colors/lib/maps/zebra.js")(colors);
colors.maps.rainbow = __webpack_require__(/*! ./maps/rainbow */ "./node_modules/colors/lib/maps/rainbow.js")(colors);
colors.maps.random = __webpack_require__(/*! ./maps/random */ "./node_modules/colors/lib/maps/random.js")(colors);

for (var map in colors.maps) {
  (function(map) {
    colors[map] = function(str) {
      return sequencer(colors.maps[map], str);
    };
  })(map);
}

defineProps(colors, init());


/***/ }),

/***/ "./node_modules/colors/lib/custom/trap.js":
/*!************************************************!*\
  !*** ./node_modules/colors/lib/custom/trap.js ***!
  \************************************************/
/***/ ((module) => {

module['exports'] = function runTheTrap(text, options) {
  var result = '';
  text = text || 'Run the trap, drop the bass';
  text = text.split('');
  var trap = {
    a: ['\u0040', '\u0104', '\u023a', '\u0245', '\u0394', '\u039b', '\u0414'],
    b: ['\u00df', '\u0181', '\u0243', '\u026e', '\u03b2', '\u0e3f'],
    c: ['\u00a9', '\u023b', '\u03fe'],
    d: ['\u00d0', '\u018a', '\u0500', '\u0501', '\u0502', '\u0503'],
    e: ['\u00cb', '\u0115', '\u018e', '\u0258', '\u03a3', '\u03be', '\u04bc',
      '\u0a6c'],
    f: ['\u04fa'],
    g: ['\u0262'],
    h: ['\u0126', '\u0195', '\u04a2', '\u04ba', '\u04c7', '\u050a'],
    i: ['\u0f0f'],
    j: ['\u0134'],
    k: ['\u0138', '\u04a0', '\u04c3', '\u051e'],
    l: ['\u0139'],
    m: ['\u028d', '\u04cd', '\u04ce', '\u0520', '\u0521', '\u0d69'],
    n: ['\u00d1', '\u014b', '\u019d', '\u0376', '\u03a0', '\u048a'],
    o: ['\u00d8', '\u00f5', '\u00f8', '\u01fe', '\u0298', '\u047a', '\u05dd',
      '\u06dd', '\u0e4f'],
    p: ['\u01f7', '\u048e'],
    q: ['\u09cd'],
    r: ['\u00ae', '\u01a6', '\u0210', '\u024c', '\u0280', '\u042f'],
    s: ['\u00a7', '\u03de', '\u03df', '\u03e8'],
    t: ['\u0141', '\u0166', '\u0373'],
    u: ['\u01b1', '\u054d'],
    v: ['\u05d8'],
    w: ['\u0428', '\u0460', '\u047c', '\u0d70'],
    x: ['\u04b2', '\u04fe', '\u04fc', '\u04fd'],
    y: ['\u00a5', '\u04b0', '\u04cb'],
    z: ['\u01b5', '\u0240'],
  };
  text.forEach(function(c) {
    c = c.toLowerCase();
    var chars = trap[c] || [' '];
    var rand = Math.floor(Math.random() * chars.length);
    if (typeof trap[c] !== 'undefined') {
      result += trap[c][rand];
    } else {
      result += c;
    }
  });
  return result;
};


/***/ }),

/***/ "./node_modules/colors/lib/custom/zalgo.js":
/*!*************************************************!*\
  !*** ./node_modules/colors/lib/custom/zalgo.js ***!
  \*************************************************/
/***/ ((module) => {

// please no
module['exports'] = function zalgo(text, options) {
  text = text || '   he is here   ';
  var soul = {
    'up': [
      '̍', '̎', '̄', '̅',
      '̿', '̑', '̆', '̐',
      '͒', '͗', '͑', '̇',
      '̈', '̊', '͂', '̓',
      '̈', '͊', '͋', '͌',
      '̃', '̂', '̌', '͐',
      '̀', '́', '̋', '̏',
      '̒', '̓', '̔', '̽',
      '̉', 'ͣ', 'ͤ', 'ͥ',
      'ͦ', 'ͧ', 'ͨ', 'ͩ',
      'ͪ', 'ͫ', 'ͬ', 'ͭ',
      'ͮ', 'ͯ', '̾', '͛',
      '͆', '̚',
    ],
    'down': [
      '̖', '̗', '̘', '̙',
      '̜', '̝', '̞', '̟',
      '̠', '̤', '̥', '̦',
      '̩', '̪', '̫', '̬',
      '̭', '̮', '̯', '̰',
      '̱', '̲', '̳', '̹',
      '̺', '̻', '̼', 'ͅ',
      '͇', '͈', '͉', '͍',
      '͎', '͓', '͔', '͕',
      '͖', '͙', '͚', '̣',
    ],
    'mid': [
      '̕', '̛', '̀', '́',
      '͘', '̡', '̢', '̧',
      '̨', '̴', '̵', '̶',
      '͜', '͝', '͞',
      '͟', '͠', '͢', '̸',
      '̷', '͡', ' ҉',
    ],
  };
  var all = [].concat(soul.up, soul.down, soul.mid);

  function randomNumber(range) {
    var r = Math.floor(Math.random() * range);
    return r;
  }

  function isChar(character) {
    var bool = false;
    all.filter(function(i) {
      bool = (i === character);
    });
    return bool;
  }


  function heComes(text, options) {
    var result = '';
    var counts;
    var l;
    options = options || {};
    options['up'] =
      typeof options['up'] !== 'undefined' ? options['up'] : true;
    options['mid'] =
      typeof options['mid'] !== 'undefined' ? options['mid'] : true;
    options['down'] =
      typeof options['down'] !== 'undefined' ? options['down'] : true;
    options['size'] =
      typeof options['size'] !== 'undefined' ? options['size'] : 'maxi';
    text = text.split('');
    for (l in text) {
      if (isChar(l)) {
        continue;
      }
      result = result + text[l];
      counts = {'up': 0, 'down': 0, 'mid': 0};
      switch (options.size) {
        case 'mini':
          counts.up = randomNumber(8);
          counts.mid = randomNumber(2);
          counts.down = randomNumber(8);
          break;
        case 'maxi':
          counts.up = randomNumber(16) + 3;
          counts.mid = randomNumber(4) + 1;
          counts.down = randomNumber(64) + 3;
          break;
        default:
          counts.up = randomNumber(8) + 1;
          counts.mid = randomNumber(6) / 2;
          counts.down = randomNumber(8) + 1;
          break;
      }

      var arr = ['up', 'mid', 'down'];
      for (var d in arr) {
        var index = arr[d];
        for (var i = 0; i <= counts[index]; i++) {
          if (options[index]) {
            result = result + soul[index][randomNumber(soul[index].length)];
          }
        }
      }
    }
    return result;
  }
  // don't summon him
  return heComes(text, options);
};



/***/ }),

/***/ "./node_modules/colors/lib/maps/america.js":
/*!*************************************************!*\
  !*** ./node_modules/colors/lib/maps/america.js ***!
  \*************************************************/
/***/ ((module) => {

module['exports'] = function(colors) {
  return function(letter, i, exploded) {
    if (letter === ' ') return letter;
    switch (i%3) {
      case 0: return colors.red(letter);
      case 1: return colors.white(letter);
      case 2: return colors.blue(letter);
    }
  };
};


/***/ }),

/***/ "./node_modules/colors/lib/maps/rainbow.js":
/*!*************************************************!*\
  !*** ./node_modules/colors/lib/maps/rainbow.js ***!
  \*************************************************/
/***/ ((module) => {

module['exports'] = function(colors) {
  // RoY G BiV
  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta'];
  return function(letter, i, exploded) {
    if (letter === ' ') {
      return letter;
    } else {
      return colors[rainbowColors[i++ % rainbowColors.length]](letter);
    }
  };
};



/***/ }),

/***/ "./node_modules/colors/lib/maps/random.js":
/*!************************************************!*\
  !*** ./node_modules/colors/lib/maps/random.js ***!
  \************************************************/
/***/ ((module) => {

module['exports'] = function(colors) {
  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green',
    'blue', 'white', 'cyan', 'magenta', 'brightYellow', 'brightRed',
    'brightGreen', 'brightBlue', 'brightWhite', 'brightCyan', 'brightMagenta'];
  return function(letter, i, exploded) {
    return letter === ' ' ? letter :
      colors[
          available[Math.round(Math.random() * (available.length - 2))]
      ](letter);
  };
};


/***/ }),

/***/ "./node_modules/colors/lib/maps/zebra.js":
/*!***********************************************!*\
  !*** ./node_modules/colors/lib/maps/zebra.js ***!
  \***********************************************/
/***/ ((module) => {

module['exports'] = function(colors) {
  return function(letter, i, exploded) {
    return i % 2 === 0 ? letter : colors.inverse(letter);
  };
};


/***/ }),

/***/ "./node_modules/colors/lib/styles.js":
/*!*******************************************!*\
  !*** ./node_modules/colors/lib/styles.js ***!
  \*******************************************/
/***/ ((module) => {

/*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var styles = {};
module['exports'] = styles;

var codes = {
  reset: [0, 0],

  bold: [1, 22],
  dim: [2, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  hidden: [8, 28],
  strikethrough: [9, 29],

  black: [30, 39],
  red: [31, 39],
  green: [32, 39],
  yellow: [33, 39],
  blue: [34, 39],
  magenta: [35, 39],
  cyan: [36, 39],
  white: [37, 39],
  gray: [90, 39],
  grey: [90, 39],

  brightRed: [91, 39],
  brightGreen: [92, 39],
  brightYellow: [93, 39],
  brightBlue: [94, 39],
  brightMagenta: [95, 39],
  brightCyan: [96, 39],
  brightWhite: [97, 39],

  bgBlack: [40, 49],
  bgRed: [41, 49],
  bgGreen: [42, 49],
  bgYellow: [43, 49],
  bgBlue: [44, 49],
  bgMagenta: [45, 49],
  bgCyan: [46, 49],
  bgWhite: [47, 49],
  bgGray: [100, 49],
  bgGrey: [100, 49],

  bgBrightRed: [101, 49],
  bgBrightGreen: [102, 49],
  bgBrightYellow: [103, 49],
  bgBrightBlue: [104, 49],
  bgBrightMagenta: [105, 49],
  bgBrightCyan: [106, 49],
  bgBrightWhite: [107, 49],

  // legacy styles for colors pre v1.0.0
  blackBG: [40, 49],
  redBG: [41, 49],
  greenBG: [42, 49],
  yellowBG: [43, 49],
  blueBG: [44, 49],
  magentaBG: [45, 49],
  cyanBG: [46, 49],
  whiteBG: [47, 49],

};

Object.keys(codes).forEach(function(key) {
  var val = codes[key];
  var style = styles[key] = [];
  style.open = '\u001b[' + val[0] + 'm';
  style.close = '\u001b[' + val[1] + 'm';
});


/***/ }),

/***/ "./node_modules/colors/lib/system/has-flag.js":
/*!****************************************************!*\
  !*** ./node_modules/colors/lib/system/has-flag.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/*
MIT License

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/



module.exports = function(flag, argv) {
  argv = argv || process.argv;

  var terminatorPos = argv.indexOf('--');
  var prefix = /^-{1,2}/.test(flag) ? '' : '--';
  var pos = argv.indexOf(prefix + flag);

  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
};


/***/ }),

/***/ "./node_modules/colors/lib/system/supports-colors.js":
/*!***********************************************************!*\
  !*** ./node_modules/colors/lib/system/supports-colors.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/



var os = __webpack_require__(/*! os */ "./node_modules/os-browserify/browser.js");
var hasFlag = __webpack_require__(/*! ./has-flag.js */ "./node_modules/colors/lib/system/has-flag.js");

var env = process.env;

var forceColor = void 0;
if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
  forceColor = false;
} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true')
           || hasFlag('color=always')) {
  forceColor = true;
}
if ('FORCE_COLOR' in env) {
  forceColor = env.FORCE_COLOR.length === 0
    || parseInt(env.FORCE_COLOR, 10) !== 0;
}

function translateLevel(level) {
  if (level === 0) {
    return false;
  }

  return {
    level: level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3,
  };
}

function supportsColor(stream) {
  if (forceColor === false) {
    return 0;
  }

  if (hasFlag('color=16m') || hasFlag('color=full')
      || hasFlag('color=truecolor')) {
    return 3;
  }

  if (hasFlag('color=256')) {
    return 2;
  }

  if (stream && !stream.isTTY && forceColor !== true) {
    return 0;
  }

  var min = forceColor ? 1 : 0;

  if (process.platform === 'win32') {
    // Node.js 7.5.0 is the first version of Node.js to include a patch to
    // libuv that enables 256 color output on Windows. Anything earlier and it
    // won't work. However, here we target Node.js 8 at minimum as it is an LTS
    // release, and Node.js 7 is not. Windows 10 build 10586 is the first
    // Windows release that supports 256 colors. Windows 10 build 14931 is the
    // first release that supports 16m/TrueColor.
    var osRelease = os.release().split('.');
    if (Number(process.versions.node.split('.')[0]) >= 8
        && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }

    return 1;
  }

  if ('CI' in env) {
    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function(sign) {
      return sign in env;
    }) || env.CI_NAME === 'codeship') {
      return 1;
    }

    return min;
  }

  if ('TEAMCITY_VERSION' in env) {
    return (/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0
    );
  }

  if ('TERM_PROGRAM' in env) {
    var version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

    switch (env.TERM_PROGRAM) {
      case 'iTerm.app':
        return version >= 3 ? 3 : 2;
      case 'Hyper':
        return 3;
      case 'Apple_Terminal':
        return 2;
      // No default
    }
  }

  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }

  if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }

  if ('COLORTERM' in env) {
    return 1;
  }

  if (env.TERM === 'dumb') {
    return min;
  }

  return min;
}

function getSupportLevel(stream) {
  var level = supportsColor(stream);
  return translateLevel(level);
}

module.exports = {
  supportsColor: getSupportLevel,
  stdout: getSupportLevel(process.stdout),
  stderr: getSupportLevel(process.stderr),
};


/***/ }),

/***/ "./node_modules/colors/safe.js":
/*!*************************************!*\
  !*** ./node_modules/colors/safe.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

//
// Remark: Requiring this file will use the "safe" colors API,
// which will not touch String.prototype.
//
//   var colors = require('colors/safe');
//   colors.red("foo")
//
//
var colors = __webpack_require__(/*! ./lib/colors */ "./node_modules/colors/lib/colors.js");
module['exports'] = colors;


/***/ }),

/***/ "./node_modules/compare-versions/lib/esm/compare.js":
/*!**********************************************************!*\
  !*** ./node_modules/compare-versions/lib/esm/compare.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   compare: () => (/* binding */ compare)
/* harmony export */ });
/* harmony import */ var _compareVersions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compareVersions */ "./node_modules/compare-versions/lib/esm/compareVersions.js");

/**
 * Compare [semver](https://semver.org/) version strings using the specified operator.
 *
 * @param v1 First version to compare
 * @param v2 Second version to compare
 * @param operator Allowed arithmetic operator to use
 * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.
 *
 * @example
 * ```
 * compare('10.1.8', '10.0.4', '>'); // return true
 * compare('10.0.1', '10.0.1', '='); // return true
 * compare('10.1.1', '10.2.2', '<'); // return true
 * compare('10.1.1', '10.2.2', '<='); // return true
 * compare('10.1.1', '10.2.2', '>='); // return false
 * ```
 */
const compare = (v1, v2, operator) => {
    // validate input operator
    assertValidOperator(operator);
    // since result of compareVersions can only be -1 or 0 or 1
    // a simple map can be used to replace switch
    const res = (0,_compareVersions__WEBPACK_IMPORTED_MODULE_0__.compareVersions)(v1, v2);
    return operatorResMap[operator].includes(res);
};
const operatorResMap = {
    '>': [1],
    '>=': [0, 1],
    '=': [0],
    '<=': [-1, 0],
    '<': [-1],
    '!=': [-1, 1],
};
const allowedOperators = Object.keys(operatorResMap);
const assertValidOperator = (op) => {
    if (typeof op !== 'string') {
        throw new TypeError(`Invalid operator type, expected string but got ${typeof op}`);
    }
    if (allowedOperators.indexOf(op) === -1) {
        throw new Error(`Invalid operator, expected one of ${allowedOperators.join('|')}`);
    }
};
//# sourceMappingURL=compare.js.map

/***/ }),

/***/ "./node_modules/compare-versions/lib/esm/compareVersions.js":
/*!******************************************************************!*\
  !*** ./node_modules/compare-versions/lib/esm/compareVersions.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   compareVersions: () => (/* binding */ compareVersions)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/compare-versions/lib/esm/utils.js");

/**
 * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.
 * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.
 * @param v1 - First version to compare
 * @param v2 - Second version to compare
 * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).
 */
const compareVersions = (v1, v2) => {
    // validate input and split into segments
    const n1 = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.validateAndParse)(v1);
    const n2 = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.validateAndParse)(v2);
    // pop off the patch
    const p1 = n1.pop();
    const p2 = n2.pop();
    // validate numbers
    const r = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.compareSegments)(n1, n2);
    if (r !== 0)
        return r;
    // validate pre-release
    if (p1 && p2) {
        return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.compareSegments)(p1.split('.'), p2.split('.'));
    }
    else if (p1 || p2) {
        return p1 ? -1 : 1;
    }
    return 0;
};
//# sourceMappingURL=compareVersions.js.map

/***/ }),

/***/ "./node_modules/compare-versions/lib/esm/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/compare-versions/lib/esm/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   compareSegments: () => (/* binding */ compareSegments),
/* harmony export */   semver: () => (/* binding */ semver),
/* harmony export */   validateAndParse: () => (/* binding */ validateAndParse)
/* harmony export */ });
const semver = /^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;
const validateAndParse = (version) => {
    if (typeof version !== 'string') {
        throw new TypeError('Invalid argument expected string');
    }
    const match = version.match(semver);
    if (!match) {
        throw new Error(`Invalid argument not valid semver ('${version}' received)`);
    }
    match.shift();
    return match;
};
const isWildcard = (s) => s === '*' || s === 'x' || s === 'X';
const tryParse = (v) => {
    const n = parseInt(v, 10);
    return isNaN(n) ? v : n;
};
const forceType = (a, b) => typeof a !== typeof b ? [String(a), String(b)] : [a, b];
const compareStrings = (a, b) => {
    if (isWildcard(a) || isWildcard(b))
        return 0;
    const [ap, bp] = forceType(tryParse(a), tryParse(b));
    if (ap > bp)
        return 1;
    if (ap < bp)
        return -1;
    return 0;
};
const compareSegments = (a, b) => {
    for (let i = 0; i < Math.max(a.length, b.length); i++) {
        const r = compareStrings(a[i] || '0', b[i] || '0');
        if (r !== 0)
            return r;
    }
    return 0;
};
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/console-browserify/index.js":
/*!**************************************************!*\
  !*** ./node_modules/console-browserify/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*global window, global*/
var util = __webpack_require__(/*! util */ "./node_modules/util/util.js")
var assert = __webpack_require__(/*! assert */ "./node_modules/assert/build/assert.js")
function now() { return new Date().getTime() }

var slice = Array.prototype.slice
var console
var times = {}

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
    console = __webpack_require__.g.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"],
    [info, "info"],
    [warn, "warn"],
    [error, "error"],
    [time, "time"],
    [timeEnd, "timeEnd"],
    [trace, "trace"],
    [dir, "dir"],
    [consoleAssert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    delete times[label]
    var duration = now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function consoleAssert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}


/***/ }),

/***/ "./node_modules/define-data-property/index.js":
/*!****************************************************!*\
  !*** ./node_modules/define-data-property/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasPropertyDescriptors = __webpack_require__(/*! has-property-descriptors */ "./node_modules/has-property-descriptors/index.js")();

var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $defineProperty = hasPropertyDescriptors && GetIntrinsic('%Object.defineProperty%', true);
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

var $SyntaxError = GetIntrinsic('%SyntaxError%');
var $TypeError = GetIntrinsic('%TypeError%');

var gopd = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");

/** @type {(obj: Record<PropertyKey, unknown>, property: PropertyKey, value: unknown, nonEnumerable?: boolean | null, nonWritable?: boolean | null, nonConfigurable?: boolean | null, loose?: boolean) => void} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};


/***/ }),

/***/ "./node_modules/define-properties/index.js":
/*!*************************************************!*\
  !*** ./node_modules/define-properties/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(/*! object-keys */ "./node_modules/object-keys/index.js");
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = __webpack_require__(/*! define-data-property */ "./node_modules/define-data-property/index.js");

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = __webpack_require__(/*! has-property-descriptors */ "./node_modules/has-property-descriptors/index.js")();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/json2xml.js":
/*!******************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/json2xml.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

//parse Empty Node as self closing node
const buildOptions = (__webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js").buildOptions);

const defaultOptions = {
  attributeNamePrefix: '@_',
  attrNodeName: false,
  textNodeName: '#text',
  ignoreAttributes: true,
  cdataTagName: false,
  cdataPositionChar: '\\c',
  format: false,
  indentBy: '  ',
  supressEmptyNode: false,
  tagValueProcessor: function(a) {
    return a;
  },
  attrValueProcessor: function(a) {
    return a;
  },
};

const props = [
  'attributeNamePrefix',
  'attrNodeName',
  'textNodeName',
  'ignoreAttributes',
  'cdataTagName',
  'cdataPositionChar',
  'format',
  'indentBy',
  'supressEmptyNode',
  'tagValueProcessor',
  'attrValueProcessor',
  'rootNodeName', //when array as root
];

function Parser(options) {
  this.options = buildOptions(options, defaultOptions, props);
  if (this.options.ignoreAttributes || this.options.attrNodeName) {
    this.isAttribute = function(/*a*/) {
      return false;
    };
  } else {
    this.attrPrefixLen = this.options.attributeNamePrefix.length;
    this.isAttribute = isAttribute;
  }
  if (this.options.cdataTagName) {
    this.isCDATA = isCDATA;
  } else {
    this.isCDATA = function(/*a*/) {
      return false;
    };
  }
  this.replaceCDATAstr = replaceCDATAstr;
  this.replaceCDATAarr = replaceCDATAarr;

  this.processTextOrObjNode = processTextOrObjNode

  if (this.options.format) {
    this.indentate = indentate;
    this.tagEndChar = '>\n';
    this.newLine = '\n';
  } else {
    this.indentate = function() {
      return '';
    };
    this.tagEndChar = '>';
    this.newLine = '';
  }

  if (this.options.supressEmptyNode) {
    this.buildTextNode = buildEmptyTextNode;
    this.buildObjNode = buildEmptyObjNode;
  } else {
    this.buildTextNode = buildTextValNode;
    this.buildObjNode = buildObjectNode;
  }

  this.buildTextValNode = buildTextValNode;
  this.buildObjectNode = buildObjectNode;
}

Parser.prototype.parse = function(jObj) {
  if(Array.isArray(jObj) && this.options.rootNodeName && this.options.rootNodeName.length > 1){
    jObj = {
      [this.options.rootNodeName] : jObj
    }
  }
  return this.j2x(jObj, 0).val;
};

Parser.prototype.j2x = function(jObj, level) {
  let attrStr = '';
  let val = '';
  for (let key in jObj) {
    if (typeof jObj[key] === 'undefined') {
      // supress undefined node
    } else if (jObj[key] === null) {
      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
    } else if (jObj[key] instanceof Date) {
      val += this.buildTextNode(jObj[key], key, '', level);
    } else if (typeof jObj[key] !== 'object') {
      //premitive type
      const attr = this.isAttribute(key);
      if (attr) {
        attrStr += ' ' + attr + '="' + this.options.attrValueProcessor('' + jObj[key]) + '"';
      } else if (this.isCDATA(key)) {
        if (jObj[this.options.textNodeName]) {
          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
        } else {
          val += this.replaceCDATAstr('', jObj[key]);
        }
      } else {
        //tag value
        if (key === this.options.textNodeName) {
          if (jObj[this.options.cdataTagName]) {
            //value will added while processing cdata
          } else {
            val += this.options.tagValueProcessor('' + jObj[key]);
          }
        } else {
          val += this.buildTextNode(jObj[key], key, '', level);
        }
      }
    } else if (Array.isArray(jObj[key])) {
      //repeated nodes
      if (this.isCDATA(key)) {
        val += this.indentate(level);
        if (jObj[this.options.textNodeName]) {
          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
        } else {
          val += this.replaceCDATAarr('', jObj[key]);
        }
      } else {
        //nested nodes
        const arrLen = jObj[key].length;
        for (let j = 0; j < arrLen; j++) {
          const item = jObj[key][j];
          if (typeof item === 'undefined') {
            // supress undefined node
          } else if (item === null) {
            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
          } else if (typeof item === 'object') {
            val += this.processTextOrObjNode(item, key, level)
          } else {
            val += this.buildTextNode(item, key, '', level);
          }
        }
      }
    } else {
      //nested node
      if (this.options.attrNodeName && key === this.options.attrNodeName) {
        const Ks = Object.keys(jObj[key]);
        const L = Ks.length;
        for (let j = 0; j < L; j++) {
          attrStr += ' ' + Ks[j] + '="' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '"';
        }
      } else {
        val += this.processTextOrObjNode(jObj[key], key, level)
      }
    }
  }
  return {attrStr: attrStr, val: val};
};

function processTextOrObjNode (object, key, level) {
  const result = this.j2x(object, level + 1);
  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {
    return this.buildTextNode(result.val, key, result.attrStr, level);
  } else {
    return this.buildObjNode(result.val, key, result.attrStr, level);
  }
}

function replaceCDATAstr(str, cdata) {
  str = this.options.tagValueProcessor('' + str);
  if (this.options.cdataPositionChar === '' || str === '') {
    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;
  } else {
    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);
  }
}

function replaceCDATAarr(str, cdata) {
  str = this.options.tagValueProcessor('' + str);
  if (this.options.cdataPositionChar === '' || str === '') {
    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;
  } else {
    for (let v in cdata) {
      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');
    }
    return str + this.newLine;
  }
}

function buildObjectNode(val, key, attrStr, level) {
  if (attrStr && val.indexOf('<') === -1) {
    return (
      this.indentate(level) +
      '<' +
      key +
      attrStr +
      '>' +
      val +
      //+ this.newLine
      // + this.indentate(level)
      '</' +
      key +
      this.tagEndChar
    );
  } else {
    return (
      this.indentate(level) +
      '<' +
      key +
      attrStr +
      this.tagEndChar +
      val +
      //+ this.newLine
      this.indentate(level) +
      '</' +
      key +
      this.tagEndChar
    );
  }
}

function buildEmptyObjNode(val, key, attrStr, level) {
  if (val !== '') {
    return this.buildObjectNode(val, key, attrStr, level);
  } else {
    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
    //+ this.newLine
  }
}

function buildTextValNode(val, key, attrStr, level) {
  return (
    this.indentate(level) +
    '<' +
    key +
    attrStr +
    '>' +
    this.options.tagValueProcessor(val) +
    '</' +
    key +
    this.tagEndChar
  );
}

function buildEmptyTextNode(val, key, attrStr, level) {
  if (val !== '') {
    return this.buildTextValNode(val, key, attrStr, level);
  } else {
    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
  }
}

function indentate(level) {
  return this.options.indentBy.repeat(level);
}

function isAttribute(name /*, options*/) {
  if (name.startsWith(this.options.attributeNamePrefix)) {
    return name.substr(this.attrPrefixLen);
  } else {
    return false;
  }
}

function isCDATA(name) {
  return name === this.options.cdataTagName;
}

//formatting
//indentation
//\n after each closing or self closing tag

module.exports = Parser;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/nimndata.js":
/*!******************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/nimndata.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

const char = function(a) {
  return String.fromCharCode(a);
};

const chars = {
  nilChar: char(176),
  missingChar: char(201),
  nilPremitive: char(175),
  missingPremitive: char(200),

  emptyChar: char(178),
  emptyValue: char(177), //empty Premitive

  boundryChar: char(179),

  objStart: char(198),
  arrStart: char(204),
  arrayEnd: char(185),
};

const charsArr = [
  chars.nilChar,
  chars.nilPremitive,
  chars.missingChar,
  chars.missingPremitive,
  chars.boundryChar,
  chars.emptyChar,
  chars.emptyValue,
  chars.arrayEnd,
  chars.objStart,
  chars.arrStart,
];

const _e = function(node, e_schema, options) {
  if (typeof e_schema === 'string') {
    //premitive
    if (node && node[0] && node[0].val !== undefined) {
      return getValue(node[0].val, e_schema);
    } else {
      return getValue(node, e_schema);
    }
  } else {
    const hasValidData = hasData(node);
    if (hasValidData === true) {
      let str = '';
      if (Array.isArray(e_schema)) {
        //attributes can't be repeated. hence check in children tags only
        str += chars.arrStart;
        const itemSchema = e_schema[0];
        //const itemSchemaType = itemSchema;
        const arr_len = node.length;

        if (typeof itemSchema === 'string') {
          for (let arr_i = 0; arr_i < arr_len; arr_i++) {
            const r = getValue(node[arr_i].val, itemSchema);
            str = processValue(str, r);
          }
        } else {
          for (let arr_i = 0; arr_i < arr_len; arr_i++) {
            const r = _e(node[arr_i], itemSchema, options);
            str = processValue(str, r);
          }
        }
        str += chars.arrayEnd; //indicates that next item is not array item
      } else {
        //object
        str += chars.objStart;
        const keys = Object.keys(e_schema);
        if (Array.isArray(node)) {
          node = node[0];
        }
        for (let i in keys) {
          const key = keys[i];
          //a property defined in schema can be present either in attrsMap or children tags
          //options.textNodeName will not present in both maps, take it's value from val
          //options.attrNodeName will be present in attrsMap
          let r;
          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
            r = _e(node.attrsMap[key], e_schema[key], options);
          } else if (key === options.textNodeName) {
            r = _e(node.val, e_schema[key], options);
          } else {
            r = _e(node.child[key], e_schema[key], options);
          }
          str = processValue(str, r);
        }
      }
      return str;
    } else {
      return hasValidData;
    }
  }
};

const getValue = function(a /*, type*/) {
  switch (a) {
    case undefined:
      return chars.missingPremitive;
    case null:
      return chars.nilPremitive;
    case '':
      return chars.emptyValue;
    default:
      return a;
  }
};

const processValue = function(str, r) {
  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
    str += chars.boundryChar;
  }
  return str + r;
};

const isAppChar = function(ch) {
  return charsArr.indexOf(ch) !== -1;
};

function hasData(jObj) {
  if (jObj === undefined) {
    return chars.missingChar;
  } else if (jObj === null) {
    return chars.nilChar;
  } else if (
    jObj.child &&
    Object.keys(jObj.child).length === 0 &&
    (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)
  ) {
    return chars.emptyChar;
  } else {
    return true;
  }
}

const x2j = __webpack_require__(/*! ./xmlstr2xmlnode */ "./node_modules/fast-xml-parser/src/xmlstr2xmlnode.js");
const buildOptions = (__webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js").buildOptions);

const convert2nimn = function(node, e_schema, options) {
  options = buildOptions(options, x2j.defaultOptions, x2j.props);
  return _e(node, e_schema, options);
};

exports.convert2nimn = convert2nimn;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/node2json.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/node2json.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const util = __webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js");

const convertToJson = function(node, options, parentTagName) {
  const jObj = {};

  // when no child node or attr is present
  if (!options.alwaysCreateTextNode && (!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
    return util.isExist(node.val) ? node.val : '';
  }

  // otherwise create a textnode if node has some text
  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {
    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)
    jObj[options.textNodeName] = asArray ? [node.val] : node.val;
  }

  util.merge(jObj, node.attrsMap, options.arrayMode);

  const keys = Object.keys(node.child);
  for (let index = 0; index < keys.length; index++) {
    const tagName = keys[index];
    if (node.child[tagName] && node.child[tagName].length > 1) {
      jObj[tagName] = [];
      for (let tag in node.child[tagName]) {
        if (node.child[tagName].hasOwnProperty(tag)) {
          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
        }
      }
    } else {
      const result = convertToJson(node.child[tagName][0], options, tagName);
      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
      jObj[tagName] = asArray ? [result] : result;
    }
  }

  //add value
  return jObj;
};

exports.convertToJson = convertToJson;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/node2json_str.js":
/*!***********************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/node2json_str.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const util = __webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js");
const buildOptions = (__webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js").buildOptions);
const x2j = __webpack_require__(/*! ./xmlstr2xmlnode */ "./node_modules/fast-xml-parser/src/xmlstr2xmlnode.js");

//TODO: do it later
const convertToJsonString = function(node, options) {
  options = buildOptions(options, x2j.defaultOptions, x2j.props);

  options.indentBy = options.indentBy || '';
  return _cToJsonStr(node, options, 0);
};

const _cToJsonStr = function(node, options, level) {
  let jObj = '{';

  //traver through all the children
  const keys = Object.keys(node.child);

  for (let index = 0; index < keys.length; index++) {
    const tagname = keys[index];
    if (node.child[tagname] && node.child[tagname].length > 1) {
      jObj += '"' + tagname + '" : [ ';
      for (let tag in node.child[tagname]) {
        jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';
      }
      jObj = jObj.substr(0, jObj.length - 1) + ' ] '; //remove extra comma in last
    } else {
      jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';
    }
  }
  util.merge(jObj, node.attrsMap);
  //add attrsMap as new children
  if (util.isEmptyObject(jObj)) {
    return util.isExist(node.val) ? node.val : '';
  } else {
    if (util.isExist(node.val)) {
      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {
        jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
      }
    }
  }
  //add value
  if (jObj[jObj.length - 1] === ',') {
    jObj = jObj.substr(0, jObj.length - 2);
  }
  return jObj + '}';
};

function stringval(v) {
  if (v === true || v === false || !isNaN(v)) {
    return v;
  } else {
    return '"' + v + '"';
  }
}

function indentate(options, level) {
  return options.indentBy.repeat(level);
}

exports.convertToJsonString = convertToJsonString;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/parser.js":
/*!****************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/parser.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");


const nodeToJson = __webpack_require__(/*! ./node2json */ "./node_modules/fast-xml-parser/src/node2json.js");
const xmlToNodeobj = __webpack_require__(/*! ./xmlstr2xmlnode */ "./node_modules/fast-xml-parser/src/xmlstr2xmlnode.js");
const x2xmlnode = __webpack_require__(/*! ./xmlstr2xmlnode */ "./node_modules/fast-xml-parser/src/xmlstr2xmlnode.js");
const buildOptions = (__webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js").buildOptions);
const validator = __webpack_require__(/*! ./validator */ "./node_modules/fast-xml-parser/src/validator.js");

exports.parse = function(xmlData, givenOptions = {}, validationOption) {
  if( validationOption){
    if(validationOption === true) validationOption = {}
    
    const result = validator.validate(xmlData, validationOption);
    if (result !== true) {
      throw Error( result.err.msg)
    }
  }
  if(givenOptions.parseTrueNumberOnly 
    && givenOptions.parseNodeValue !== false
    && !givenOptions.numParseOptions){
    
      givenOptions.numParseOptions = {
        leadingZeros: false,
      }
  }
  let options = buildOptions(givenOptions, x2xmlnode.defaultOptions, x2xmlnode.props);

  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)
  //print(traversableObj, "  ");
  return nodeToJson.convertToJson(traversableObj, options);
};
exports.convertTonimn = __webpack_require__(/*! ./nimndata */ "./node_modules/fast-xml-parser/src/nimndata.js").convert2nimn;
exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
exports.convertToJson = nodeToJson.convertToJson;
exports.convertToJsonString = __webpack_require__(/*! ./node2json_str */ "./node_modules/fast-xml-parser/src/node2json_str.js").convertToJsonString;
exports.validate = validator.validate;
exports.j2xParser = __webpack_require__(/*! ./json2xml */ "./node_modules/fast-xml-parser/src/json2xml.js");
exports.parseToNimn = function(xmlData, schema, options) {
  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
};


function print(xmlNode, indentation){
  if(xmlNode){
    console.log(indentation + "{")
    console.log(indentation + "  \"tagName\": \"" + xmlNode.tagname + "\", ");
    if(xmlNode.parent){
      console.log(indentation + "  \"parent\": \"" + xmlNode.parent.tagname  + "\", ");
    }
    console.log(indentation + "  \"val\": \"" + xmlNode.val  + "\", ");
    console.log(indentation + "  \"attrs\": " + JSON.stringify(xmlNode.attrsMap,null,4)  + ", ");

    if(xmlNode.child){
      console.log(indentation + "\"child\": {")
      const indentation2 = indentation + indentation;
      Object.keys(xmlNode.child).forEach( function(key) {
        const node = xmlNode.child[key];

        if(Array.isArray(node)){
          console.log(indentation +  "\""+key+"\" :[")
          node.forEach( function(item,index) {
            //console.log(indentation + " \""+index+"\" : [")
            print(item, indentation2);
          })
          console.log(indentation + "],")  
        }else{
          console.log(indentation + " \""+key+"\" : {")
          print(node, indentation2);
          console.log(indentation + "},")  
        }
      });
      console.log(indentation + "},")
    }
    console.log(indentation + "},")
  }
}


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/util.js":
/*!**************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/util.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


const nameStartChar = ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
const nameChar = nameStartChar + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'
const regexName = new RegExp('^' + nameRegexp + '$');

const getAllMatches = function(string, regex) {
  const matches = [];
  let match = regex.exec(string);
  while (match) {
    const allmatches = [];
    allmatches.startIndex = regex.lastIndex - match[0].length;
    const len = match.length;
    for (let index = 0; index < len; index++) {
      allmatches.push(match[index]);
    }
    matches.push(allmatches);
    match = regex.exec(string);
  }
  return matches;
};

const isName = function(string) {
  const match = regexName.exec(string);
  return !(match === null || typeof match === 'undefined');
};

exports.isExist = function(v) {
  return typeof v !== 'undefined';
};

exports.isEmptyObject = function(obj) {
  return Object.keys(obj).length === 0;
};

/**
 * Copy all the properties of a into b.
 * @param {*} target
 * @param {*} a
 */
exports.merge = function(target, a, arrayMode) {
  if (a) {
    const keys = Object.keys(a); // will return an array of own properties
    const len = keys.length; //don't make it inline
    for (let i = 0; i < len; i++) {
      if (arrayMode === 'strict') {
        target[keys[i]] = [ a[keys[i]] ];
      } else {
        target[keys[i]] = a[keys[i]];
      }
    }
  }
};
/* exports.merge =function (b,a){
  return Object.assign(b,a);
} */

exports.getValue = function(v) {
  if (exports.isExist(v)) {
    return v;
  } else {
    return '';
  }
};

// const fakeCall = function(a) {return a;};
// const fakeCallNoReturn = function() {};

exports.buildOptions = function(options, defaultOptions, props) {
  let newOptions = {};
  if (!options) {
    return defaultOptions; //if there are not options
  }

  for (let i = 0; i < props.length; i++) {
    if (options[props[i]] !== undefined) {
      newOptions[props[i]] = options[props[i]];
    } else {
      newOptions[props[i]] = defaultOptions[props[i]];
    }
  }
  return newOptions;
};

/**
 * Check if a tag name should be treated as array
 *
 * @param tagName the node tagname
 * @param arrayMode the array mode option
 * @param parentTagName the parent tag name
 * @returns {boolean} true if node should be parsed as array
 */
exports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {
  if (arrayMode === false) {
    return false;
  } else if (arrayMode instanceof RegExp) {
    return arrayMode.test(tagName);
  } else if (typeof arrayMode === 'function') {
    return !!arrayMode(tagName, parentTagName);
  }

  return arrayMode === "strict";
}

exports.isName = isName;
exports.getAllMatches = getAllMatches;
exports.nameRegexp = nameRegexp;


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/validator.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/validator.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const util = __webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js");

const defaultOptions = {
  allowBooleanAttributes: false, //A tag can have attributes without any value
};

const props = ['allowBooleanAttributes'];

//const tagsPattern = new RegExp("<\\/?([\\w:\\-_\.]+)\\s*\/?>","g");
exports.validate = function (xmlData, options) {
  options = util.buildOptions(options, defaultOptions, props);

  //xmlData = xmlData.replace(/(\r\n|\n|\r)/gm,"");//make it single line
  //xmlData = xmlData.replace(/(^\s*<\?xml.*?\?>)/g,"");//Remove XML starting tag
  //xmlData = xmlData.replace(/(<!DOCTYPE[\s\w\"\.\/\-\:]+(\[.*\])*\s*>)/g,"");//Remove DOCTYPE
  const tags = [];
  let tagFound = false;

  //indicates that the root tag has been closed (aka. depth 0 has been reached)
  let reachedRoot = false;

  if (xmlData[0] === '\ufeff') {
    // check for byte order mark (BOM)
    xmlData = xmlData.substr(1);
  }

  for (let i = 0; i < xmlData.length; i++) {

    if (xmlData[i] === '<' && xmlData[i+1] === '?') {
      i+=2;
      i = readPI(xmlData,i);
      if (i.err) return i;
    }else if (xmlData[i] === '<') {
      //starting of tag
      //read until you reach to '>' avoiding any '>' in attribute value
      let tagStartPos = i;
      i++;
      
      if (xmlData[i] === '!') {
        i = readCommentAndCDATA(xmlData, i);
        continue;
      } else {
        let closingTag = false;
        if (xmlData[i] === '/') {
          //closing tag
          closingTag = true;
          i++;
        }
        //read tagname
        let tagName = '';
        for (; i < xmlData.length &&
          xmlData[i] !== '>' &&
          xmlData[i] !== ' ' &&
          xmlData[i] !== '\t' &&
          xmlData[i] !== '\n' &&
          xmlData[i] !== '\r'; i++
        ) {
          tagName += xmlData[i];
        }
        tagName = tagName.trim();
        //console.log(tagName);

        if (tagName[tagName.length - 1] === '/') {
          //self closing tag without attributes
          tagName = tagName.substring(0, tagName.length - 1);
          //continue;
          i--;
        }
        if (!validateTagName(tagName)) {
          let msg;
          if (tagName.trim().length === 0) {
            msg = "Invalid space after '<'.";
          } else {
            msg = "Tag '"+tagName+"' is an invalid name.";
          }
          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));
        }

        const result = readAttributeStr(xmlData, i);
        if (result === false) {
          return getErrorObject('InvalidAttr', "Attributes for '"+tagName+"' have open quote.", getLineNumberForPosition(xmlData, i));
        }
        let attrStr = result.value;
        i = result.index;

        if (attrStr[attrStr.length - 1] === '/') {
          //self closing tag
          const attrStrStart = i - attrStr.length;
          attrStr = attrStr.substring(0, attrStr.length - 1);
          const isValid = validateAttributeString(attrStr, options);
          if (isValid === true) {
            tagFound = true;
            //continue; //text may presents after self closing tag
          } else {
            //the result from the nested function returns the position of the error within the attribute
            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
            //this gives us the absolute index in the entire xml, which we can use to find the line at last
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
          }
        } else if (closingTag) {
          if (!result.tagClosed) {
            return getErrorObject('InvalidTag', "Closing tag '"+tagName+"' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
          } else if (attrStr.trim().length > 0) {
            return getErrorObject('InvalidTag', "Closing tag '"+tagName+"' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
          } else {
            const otg = tags.pop();
            if (tagName !== otg.tagName) {
              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
              return getErrorObject('InvalidTag',
                "Expected closing tag '"+otg.tagName+"' (opened in line "+openPos.line+", col "+openPos.col+") instead of closing tag '"+tagName+"'.",
                getLineNumberForPosition(xmlData, tagStartPos));
            }

            //when there are no more tags, we reached the root level.
            if (tags.length == 0) {
              reachedRoot = true;
            }
          }
        } else {
          const isValid = validateAttributeString(attrStr, options);
          if (isValid !== true) {
            //the result from the nested function returns the position of the error within the attribute
            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
            //this gives us the absolute index in the entire xml, which we can use to find the line at last
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
          }

          //if the root level has been reached before ...
          if (reachedRoot === true) {
            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));
          } else {
            tags.push({tagName, tagStartPos});
          }
          tagFound = true;
        }

        //skip tag text value
        //It may include comments and CDATA value
        for (i++; i < xmlData.length; i++) {
          if (xmlData[i] === '<') {
            if (xmlData[i + 1] === '!') {
              //comment or CADATA
              i++;
              i = readCommentAndCDATA(xmlData, i);
              continue;
            } else if (xmlData[i+1] === '?') {
              i = readPI(xmlData, ++i);
              if (i.err) return i;
            } else{
              break;
            }
          } else if (xmlData[i] === '&') {
            const afterAmp = validateAmpersand(xmlData, i);
            if (afterAmp == -1)
              return getErrorObject('InvalidChar', "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
            i = afterAmp;
          }
        } //end of reading tag text value
        if (xmlData[i] === '<') {
          i--;
        }
      }
    } else {
      if (xmlData[i] === ' ' || xmlData[i] === '\t' || xmlData[i] === '\n' || xmlData[i] === '\r') {
        continue;
      }
      return getErrorObject('InvalidChar', "char '"+xmlData[i]+"' is not expected.", getLineNumberForPosition(xmlData, i));
    }
  }

  if (!tagFound) {
    return getErrorObject('InvalidXml', 'Start tag expected.', 1);
  }else if (tags.length == 1) {
      return getErrorObject('InvalidTag', "Unclosed tag '"+tags[0].tagName+"'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
  }else if (tags.length > 0) {
      return getErrorObject('InvalidXml', "Invalid '"+
          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\r?\n/g, '')+
          "' found.", {line: 1, col: 1});
  }

  return true;
};

/**
 * Read Processing insstructions and skip
 * @param {*} xmlData
 * @param {*} i
 */
function readPI(xmlData, i) {
  const start = i;
  for (; i < xmlData.length; i++) {
    if (xmlData[i] == '?' || xmlData[i] == ' ') {
      //tagname
      const tagname = xmlData.substr(start, i - start);
      if (i > 5 && tagname === 'xml') {
        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));
      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {
        //check if valid attribut string
        i++;
        break;
      } else {
        continue;
      }
    }
  }
  return i;
}

function readCommentAndCDATA(xmlData, i) {
  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {
    //comment
    for (i += 3; i < xmlData.length; i++) {
      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {
        i += 2;
        break;
      }
    }
  } else if (
    xmlData.length > i + 8 &&
    xmlData[i + 1] === 'D' &&
    xmlData[i + 2] === 'O' &&
    xmlData[i + 3] === 'C' &&
    xmlData[i + 4] === 'T' &&
    xmlData[i + 5] === 'Y' &&
    xmlData[i + 6] === 'P' &&
    xmlData[i + 7] === 'E'
  ) {
    let angleBracketsCount = 1;
    for (i += 8; i < xmlData.length; i++) {
      if (xmlData[i] === '<') {
        angleBracketsCount++;
      } else if (xmlData[i] === '>') {
        angleBracketsCount--;
        if (angleBracketsCount === 0) {
          break;
        }
      }
    }
  } else if (
    xmlData.length > i + 9 &&
    xmlData[i + 1] === '[' &&
    xmlData[i + 2] === 'C' &&
    xmlData[i + 3] === 'D' &&
    xmlData[i + 4] === 'A' &&
    xmlData[i + 5] === 'T' &&
    xmlData[i + 6] === 'A' &&
    xmlData[i + 7] === '['
  ) {
    for (i += 8; i < xmlData.length; i++) {
      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {
        i += 2;
        break;
      }
    }
  }

  return i;
}

const doubleQuote = '"';
const singleQuote = "'";

/**
 * Keep reading xmlData until '<' is found outside the attribute value.
 * @param {string} xmlData
 * @param {number} i
 */
function readAttributeStr(xmlData, i) {
  let attrStr = '';
  let startChar = '';
  let tagClosed = false;
  for (; i < xmlData.length; i++) {
    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
      if (startChar === '') {
        startChar = xmlData[i];
      } else if (startChar !== xmlData[i]) {
        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa
      } else {
        startChar = '';
      }
    } else if (xmlData[i] === '>') {
      if (startChar === '') {
        tagClosed = true;
        break;
      }
    }
    attrStr += xmlData[i];
  }
  if (startChar !== '') {
    return false;
  }

  return {
    value: attrStr,
    index: i,
    tagClosed: tagClosed
  };
}

/**
 * Select all the attributes whether valid or invalid.
 */
const validAttrStrRegxp = new RegExp('(\\s*)([^\\s=]+)(\\s*=)?(\\s*([\'"])(([\\s\\S])*?)\\5)?', 'g');

//attr, ="sd", a="amit's", a="sd"b="saf", ab  cd=""

function validateAttributeString(attrStr, options) {
  //console.log("start:"+attrStr+":end");

  //if(attrStr.trim().length === 0) return true; //empty string

  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
  const attrNames = {};

  for (let i = 0; i < matches.length; i++) {
    if (matches[i][1].length === 0) {
      //nospace before attribute name: a="sd"b="saf"
      return getErrorObject('InvalidAttr', "Attribute '"+matches[i][2]+"' has no space in starting.", getPositionFromMatch(matches[i]))
    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {
      //independent attribute: ab
      return getErrorObject('InvalidAttr', "boolean attribute '"+matches[i][2]+"' is not allowed.", getPositionFromMatch(matches[i]));
    }
    /* else if(matches[i][6] === undefined){//attribute without value: ab=
                    return { err: { code:"InvalidAttr",msg:"attribute " + matches[i][2] + " has no value assigned."}};
                } */
    const attrName = matches[i][2];
    if (!validateAttrName(attrName)) {
      return getErrorObject('InvalidAttr', "Attribute '"+attrName+"' is an invalid name.", getPositionFromMatch(matches[i]));
    }
    if (!attrNames.hasOwnProperty(attrName)) {
      //check for duplicate attribute.
      attrNames[attrName] = 1;
    } else {
      return getErrorObject('InvalidAttr', "Attribute '"+attrName+"' is repeated.", getPositionFromMatch(matches[i]));
    }
  }

  return true;
}

function validateNumberAmpersand(xmlData, i) {
  let re = /\d/;
  if (xmlData[i] === 'x') {
    i++;
    re = /[\da-fA-F]/;
  }
  for (; i < xmlData.length; i++) {
    if (xmlData[i] === ';')
      return i;
    if (!xmlData[i].match(re))
      break;
  }
  return -1;
}

function validateAmpersand(xmlData, i) {
  // https://www.w3.org/TR/xml/#dt-charref
  i++;
  if (xmlData[i] === ';')
    return -1;
  if (xmlData[i] === '#') {
    i++;
    return validateNumberAmpersand(xmlData, i);
  }
  let count = 0;
  for (; i < xmlData.length; i++, count++) {
    if (xmlData[i].match(/\w/) && count < 20)
      continue;
    if (xmlData[i] === ';')
      break;
    return -1;
  }
  return i;
}

function getErrorObject(code, message, lineNumber) {
  return {
    err: {
      code: code,
      msg: message,
      line: lineNumber.line || lineNumber,
      col: lineNumber.col,
    },
  };
}

function validateAttrName(attrName) {
  return util.isName(attrName);
}

// const startsWithXML = /^xml/i;

function validateTagName(tagname) {
  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;
}

//this function returns the line number for the character at the given index
function getLineNumberForPosition(xmlData, index) {
  const lines = xmlData.substring(0, index).split(/\r?\n/);
  return {
    line: lines.length,

    // column number is last line's length + 1, because column numbering starts at 1:
    col: lines[lines.length - 1].length + 1
  };
}

//this function returns the position of the first character of match within attrStr
function getPositionFromMatch(match) {
  return match.startIndex + match[1].length;
}


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlNode.js":
/*!*****************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlNode.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


module.exports = function(tagname, parent, val) {
  this.tagname = tagname;
  this.parent = parent;
  this.child = {}; //child tags
  this.attrsMap = {}; //attributes map
  this.val = val; //text only
  this.addChild = function(child) {
    if (Array.isArray(this.child[child.tagname])) {
      //already presents
      this.child[child.tagname].push(child);
    } else {
      this.child[child.tagname] = [child];
    }
  };
};


/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlstr2xmlnode.js":
/*!************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlstr2xmlnode.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const util = __webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js");
const buildOptions = (__webpack_require__(/*! ./util */ "./node_modules/fast-xml-parser/src/util.js").buildOptions);
const xmlNode = __webpack_require__(/*! ./xmlNode */ "./node_modules/fast-xml-parser/src/xmlNode.js");
const toNumber = __webpack_require__(/*! strnum */ "./node_modules/strnum/strnum.js");

const regx =
  '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'
  .replace(/NAME/g, util.nameRegexp);

//const tagsRegx = new RegExp("<(\\/?[\\w:\\-\._]+)([^>]*)>(\\s*"+cdataRegx+")*([^<]+)?","g");
//const tagsRegx = new RegExp("<(\\/?)((\\w*:)?([\\w:\\-\._]+))([^>]*)>([^<]*)("+cdataRegx+"([^<]*))*([^<]+)?","g");

//polyfill
if (!Number.parseInt && window.parseInt) {
  Number.parseInt = window.parseInt;
}
if (!Number.parseFloat && window.parseFloat) {
  Number.parseFloat = window.parseFloat;
}

const defaultOptions = {
  attributeNamePrefix: '@_',
  attrNodeName: false,
  textNodeName: '#text',
  ignoreAttributes: true,
  ignoreNameSpace: false,
  allowBooleanAttributes: false, //a tag can have attributes without any value
  //ignoreRootElement : false,
  parseNodeValue: true,
  parseAttributeValue: false,
  arrayMode: false,
  trimValues: true, //Trim string values of tag and attributes
  cdataTagName: false,
  cdataPositionChar: '\\c',
  numParseOptions: {
    hex: true,
    leadingZeros: true
  },
  tagValueProcessor: function(a, tagName) {
    return a;
  },
  attrValueProcessor: function(a, attrName) {
    return a;
  },
  stopNodes: [],
  alwaysCreateTextNode: false
  //decodeStrict: false,
};

exports.defaultOptions = defaultOptions;

const props = [
  'attributeNamePrefix',
  'attrNodeName',
  'textNodeName',
  'ignoreAttributes',
  'ignoreNameSpace',
  'allowBooleanAttributes',
  'parseNodeValue',
  'parseAttributeValue',
  'arrayMode',
  'trimValues',
  'cdataTagName',
  'cdataPositionChar',
  'tagValueProcessor',
  'attrValueProcessor',
  'parseTrueNumberOnly',
  'numParseOptions',
  'stopNodes',
  'alwaysCreateTextNode'
];
exports.props = props;

/**
 * Trim -> valueProcessor -> parse value
 * @param {string} tagName
 * @param {string} val
 * @param {object} options
 */
function processTagValue(tagName, val, options) {
  if (val) {
    if (options.trimValues) {
      val = val.trim();
    }
    val = options.tagValueProcessor(val, tagName);
    val = parseValue(val, options.parseNodeValue, options.numParseOptions);
  }

  return val;
}

function resolveNameSpace(tagname, options) {
  if (options.ignoreNameSpace) {
    const tags = tagname.split(':');
    const prefix = tagname.charAt(0) === '/' ? '/' : '';
    if (tags[0] === 'xmlns') {
      return '';
    }
    if (tags.length === 2) {
      tagname = prefix + tags[1];
    }
  }
  return tagname;
}

function parseValue(val, shouldParse, options) {
  if (shouldParse && typeof val === 'string') {
    //console.log(options)
    const newval = val.trim();
    if(newval === 'true' ) return true;
    else if(newval === 'false' ) return false;
    else return toNumber(val, options);
  } else {
    if (util.isExist(val)) {
      return val;
    } else {
      return '';
    }
  }
}

//TODO: change regex to capture NS
//const attrsRegx = new RegExp("([\\w\\-\\.\\:]+)\\s*=\\s*(['\"])((.|\n)*?)\\2","gm");
const attrsRegx = new RegExp('([^\\s=]+)\\s*(=\\s*([\'"])(.*?)\\3)?', 'g');

function buildAttributesMap(attrStr, options) {
  if (!options.ignoreAttributes && typeof attrStr === 'string') {
    attrStr = attrStr.replace(/\r?\n/g, ' ');
    //attrStr = attrStr || attrStr.trim();

    const matches = util.getAllMatches(attrStr, attrsRegx);
    const len = matches.length; //don't make it inline
    const attrs = {};
    for (let i = 0; i < len; i++) {
      const attrName = resolveNameSpace(matches[i][1], options);
      if (attrName.length) {
        if (matches[i][4] !== undefined) {
          if (options.trimValues) {
            matches[i][4] = matches[i][4].trim();
          }
          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
          attrs[options.attributeNamePrefix + attrName] = parseValue(
            matches[i][4],
            options.parseAttributeValue,
            options.numParseOptions
          );
        } else if (options.allowBooleanAttributes) {
          attrs[options.attributeNamePrefix + attrName] = true;
        }
      }
    }
    if (!Object.keys(attrs).length) {
      return;
    }
    if (options.attrNodeName) {
      const attrCollection = {};
      attrCollection[options.attrNodeName] = attrs;
      return attrCollection;
    }
    return attrs;
  }
}

const getTraversalObj = function(xmlData, options) {
  xmlData = xmlData.replace(/\r\n?/g, "\n");
  options = buildOptions(options, defaultOptions, props);
  const xmlObj = new xmlNode('!xml');
  let currentNode = xmlObj;
  let textData = "";

//function match(xmlData){
  for(let i=0; i< xmlData.length; i++){
    const ch = xmlData[i];
    if(ch === '<'){
      if( xmlData[i+1] === '/') {//Closing Tag
        const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.")
        let tagName = xmlData.substring(i+2,closeIndex).trim();

        if(options.ignoreNameSpace){
          const colonIndex = tagName.indexOf(":");
          if(colonIndex !== -1){
            tagName = tagName.substr(colonIndex+1);
          }
        }

        /* if (currentNode.parent) {
          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);
        } */
        if(currentNode){
          if(currentNode.val){
            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);
          }else{
            currentNode.val = processTagValue(tagName, textData , options);
          }
        }

        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
          currentNode.child = []
          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}
          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)
        }
        currentNode = currentNode.parent;
        textData = "";
        i = closeIndex;
      } else if( xmlData[i+1] === '?') {
        i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.")
      } else if(xmlData.substr(i + 1, 3) === '!--') {
        i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.")
      } else if( xmlData.substr(i + 1, 2) === '!D') {
        const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.")
        const tagExp = xmlData.substring(i, closeIndex);
        if(tagExp.indexOf("[") >= 0){
          i = xmlData.indexOf("]>", i) + 1;
        }else{
          i = closeIndex;
        }
      }else if(xmlData.substr(i + 1, 2) === '![') {
        const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2
        const tagExp = xmlData.substring(i + 9,closeIndex);

        //considerations
        //1. CDATA will always have parent node
        //2. A tag with CDATA is not a leaf node so it's value would be string type.
        if(textData){
          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);
          textData = "";
        }

        if (options.cdataTagName) {
          //add cdata node
          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
          currentNode.addChild(childNode);
          //for backtracking
          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
          //add rest value to parent node
          if (tagExp) {
            childNode.val = tagExp;
          }
        } else {
          currentNode.val = (currentNode.val || '') + (tagExp || '');
        }

        i = closeIndex + 2;
      }else {//Opening tag
        const result = closingIndexForOpeningTag(xmlData, i+1)
        let tagExp = result.data;
        const closeIndex = result.index;
        const separatorIndex = tagExp.indexOf(" ");
        let tagName = tagExp;
        let shouldBuildAttributesMap = true;
        if(separatorIndex !== -1){
          tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, '');
          tagExp = tagExp.substr(separatorIndex + 1);
        }

        if(options.ignoreNameSpace){
          const colonIndex = tagName.indexOf(":");
          if(colonIndex !== -1){
            tagName = tagName.substr(colonIndex+1);
            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
          }
        }

        //save text to parent node
        if (currentNode && textData) {
          if(currentNode.tagname !== '!xml'){
            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);
          }
        }

        if(tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1){//selfClosing tag

          if(tagName[tagName.length - 1] === "/"){ //remove trailing '/'
            tagName = tagName.substr(0, tagName.length - 1);
            tagExp = tagName;
          }else{
            tagExp = tagExp.substr(0, tagExp.length - 1);
          }

          const childNode = new xmlNode(tagName, currentNode, '');
          if(tagName !== tagExp){
            childNode.attrsMap = buildAttributesMap(tagExp, options);
          }
          currentNode.addChild(childNode);
        }else{//opening tag

          const childNode = new xmlNode( tagName, currentNode );
          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
            childNode.startIndex=closeIndex;
          }
          if(tagName !== tagExp && shouldBuildAttributesMap){
            childNode.attrsMap = buildAttributesMap(tagExp, options);
          }
          currentNode.addChild(childNode);
          currentNode = childNode;
        }
        textData = "";
        i = closeIndex;
      }
    }else{
      textData += xmlData[i];
    }
  }
  return xmlObj;
}

function closingIndexForOpeningTag(data, i){
  let attrBoundary;
  let tagExp = "";
  for (let index = i; index < data.length; index++) {
    let ch = data[index];
    if (attrBoundary) {
        if (ch === attrBoundary) attrBoundary = "";//reset
    } else if (ch === '"' || ch === "'") {
        attrBoundary = ch;
    } else if (ch === '>') {
        return {
          data: tagExp,
          index: index
        }
    } else if (ch === '\t') {
      ch = " "
    }
    tagExp += ch;
  }
}

function findClosingIndex(xmlData, str, i, errMsg){
  const closingIndex = xmlData.indexOf(str, i);
  if(closingIndex === -1){
    throw new Error(errMsg)
  }else{
    return closingIndex + str.length - 1;
  }
}

exports.getTraversalObj = getTraversalObj;


/***/ }),

/***/ "./node_modules/for-each/index.js":
/*!****************************************!*\
  !*** ./node_modules/for-each/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isCallable = __webpack_require__(/*! is-callable */ "./node_modules/is-callable/index.js");

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

module.exports = forEach;


/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ "./node_modules/get-intrinsic/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-intrinsic/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(/*! has-symbols */ "./node_modules/has-symbols/index.js")();
var hasProto = __webpack_require__(/*! has-proto */ "./node_modules/has-proto/index.js")();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var hasOwn = __webpack_require__(/*! hasown */ "./node_modules/hasown/index.js");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ "./node_modules/gopd/index.js":
/*!************************************!*\
  !*** ./node_modules/gopd/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ "./node_modules/has-property-descriptors/index.js":
/*!********************************************************!*\
  !*** ./node_modules/has-property-descriptors/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ "./node_modules/has-proto/index.js":
/*!*****************************************!*\
  !*** ./node_modules/has-proto/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


var test = {
	foo: {}
};

var $Object = Object;

module.exports = function hasProto() {
	return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
};


/***/ }),

/***/ "./node_modules/has-symbols/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(/*! ./shams */ "./node_modules/has-symbols/shams.js");

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ "./node_modules/has-symbols/shams.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/shams.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ "./node_modules/has-tostringtag/shams.js":
/*!***********************************************!*\
  !*** ./node_modules/has-tostringtag/shams.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(/*! has-symbols/shams */ "./node_modules/has-symbols/shams.js");

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ "./node_modules/hasown/index.js":
/*!**************************************!*\
  !*** ./node_modules/hasown/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

/** @type {(o: {}, p: PropertyKey) => p is keyof o} */
module.exports = bind.call(call, $hasOwn);


/***/ }),

/***/ "./node_modules/heap/index.js":
/*!************************************!*\
  !*** ./node_modules/heap/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/heap */ "./node_modules/heap/lib/heap.js");


/***/ }),

/***/ "./node_modules/heap/lib/heap.js":
/*!***************************************!*\
  !*** ./node_modules/heap/lib/heap.js ***!
  \***************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Generated by CoffeeScript 1.8.0
(function() {
  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

  floor = Math.floor, min = Math.min;


  /*
  Default comparison function to be used
   */

  defaultCmp = function(x, y) {
    if (x < y) {
      return -1;
    }
    if (x > y) {
      return 1;
    }
    return 0;
  };


  /*
  Insert item x in list a, and keep it sorted assuming a is sorted.
  
  If x is already in a, insert it to the right of the rightmost x.
  
  Optional args lo (default 0) and hi (default a.length) bound the slice
  of a to be searched.
   */

  insort = function(a, x, lo, hi, cmp) {
    var mid;
    if (lo == null) {
      lo = 0;
    }
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (lo < 0) {
      throw new Error('lo must be non-negative');
    }
    if (hi == null) {
      hi = a.length;
    }
    while (lo < hi) {
      mid = floor((lo + hi) / 2);
      if (cmp(x, a[mid]) < 0) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
  };


  /*
  Push item onto heap, maintaining the heap invariant.
   */

  heappush = function(array, item, cmp) {
    if (cmp == null) {
      cmp = defaultCmp;
    }
    array.push(item);
    return _siftdown(array, 0, array.length - 1, cmp);
  };


  /*
  Pop the smallest item off the heap, maintaining the heap invariant.
   */

  heappop = function(array, cmp) {
    var lastelt, returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    lastelt = array.pop();
    if (array.length) {
      returnitem = array[0];
      array[0] = lastelt;
      _siftup(array, 0, cmp);
    } else {
      returnitem = lastelt;
    }
    return returnitem;
  };


  /*
  Pop and return the current smallest value, and add the new item.
  
  This is more efficient than heappop() followed by heappush(), and can be
  more appropriate when using a fixed size heap. Note that the value
  returned may be larger than item! That constrains reasonable use of
  this routine unless written as part of a conditional replacement:
      if item > array[0]
        item = heapreplace(array, item)
   */

  heapreplace = function(array, item, cmp) {
    var returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    returnitem = array[0];
    array[0] = item;
    _siftup(array, 0, cmp);
    return returnitem;
  };


  /*
  Fast version of a heappush followed by a heappop.
   */

  heappushpop = function(array, item, cmp) {
    var _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (array.length && cmp(array[0], item) < 0) {
      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
      _siftup(array, 0, cmp);
    }
    return item;
  };


  /*
  Transform list into a heap, in-place, in O(array.length) time.
   */

  heapify = function(array, cmp) {
    var i, _i, _j, _len, _ref, _ref1, _results, _results1;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    _ref1 = (function() {
      _results1 = [];
      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this).reverse();
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      i = _ref1[_i];
      _results.push(_siftup(array, i, cmp));
    }
    return _results;
  };


  /*
  Update the position of the given item in the heap.
  This function should be called every time the item is being modified.
   */

  updateItem = function(array, item, cmp) {
    var pos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    pos = array.indexOf(item);
    if (pos === -1) {
      return;
    }
    _siftdown(array, 0, pos, cmp);
    return _siftup(array, pos, cmp);
  };


  /*
  Find the n largest elements in a dataset.
   */

  nlargest = function(array, n, cmp) {
    var elem, result, _i, _len, _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    result = array.slice(0, n);
    if (!result.length) {
      return result;
    }
    heapify(result, cmp);
    _ref = array.slice(n);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      heappushpop(result, elem, cmp);
    }
    return result.sort(cmp).reverse();
  };


  /*
  Find the n smallest elements in a dataset.
   */

  nsmallest = function(array, n, cmp) {
    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (n * 10 <= array.length) {
      result = array.slice(0, n).sort(cmp);
      if (!result.length) {
        return result;
      }
      los = result[result.length - 1];
      _ref = array.slice(n);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        if (cmp(elem, los) < 0) {
          insort(result, elem, 0, null, cmp);
          result.pop();
          los = result[result.length - 1];
        }
      }
      return result;
    }
    heapify(array, cmp);
    _results = [];
    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      _results.push(heappop(array, cmp));
    }
    return _results;
  };

  _siftdown = function(array, startpos, pos, cmp) {
    var newitem, parent, parentpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    newitem = array[pos];
    while (pos > startpos) {
      parentpos = (pos - 1) >> 1;
      parent = array[parentpos];
      if (cmp(newitem, parent) < 0) {
        array[pos] = parent;
        pos = parentpos;
        continue;
      }
      break;
    }
    return array[pos] = newitem;
  };

  _siftup = function(array, pos, cmp) {
    var childpos, endpos, newitem, rightpos, startpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    endpos = array.length;
    startpos = pos;
    newitem = array[pos];
    childpos = 2 * pos + 1;
    while (childpos < endpos) {
      rightpos = childpos + 1;
      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
        childpos = rightpos;
      }
      array[pos] = array[childpos];
      pos = childpos;
      childpos = 2 * pos + 1;
    }
    array[pos] = newitem;
    return _siftdown(array, startpos, pos, cmp);
  };

  Heap = (function() {
    Heap.push = heappush;

    Heap.pop = heappop;

    Heap.replace = heapreplace;

    Heap.pushpop = heappushpop;

    Heap.heapify = heapify;

    Heap.updateItem = updateItem;

    Heap.nlargest = nlargest;

    Heap.nsmallest = nsmallest;

    function Heap(cmp) {
      this.cmp = cmp != null ? cmp : defaultCmp;
      this.nodes = [];
    }

    Heap.prototype.push = function(x) {
      return heappush(this.nodes, x, this.cmp);
    };

    Heap.prototype.pop = function() {
      return heappop(this.nodes, this.cmp);
    };

    Heap.prototype.peek = function() {
      return this.nodes[0];
    };

    Heap.prototype.contains = function(x) {
      return this.nodes.indexOf(x) !== -1;
    };

    Heap.prototype.replace = function(x) {
      return heapreplace(this.nodes, x, this.cmp);
    };

    Heap.prototype.pushpop = function(x) {
      return heappushpop(this.nodes, x, this.cmp);
    };

    Heap.prototype.heapify = function() {
      return heapify(this.nodes, this.cmp);
    };

    Heap.prototype.updateItem = function(x) {
      return updateItem(this.nodes, x, this.cmp);
    };

    Heap.prototype.clear = function() {
      return this.nodes = [];
    };

    Heap.prototype.empty = function() {
      return this.nodes.length === 0;
    };

    Heap.prototype.size = function() {
      return this.nodes.length;
    };

    Heap.prototype.clone = function() {
      var heap;
      heap = new Heap();
      heap.nodes = this.nodes.slice(0);
      return heap;
    };

    Heap.prototype.toArray = function() {
      return this.nodes.slice(0);
    };

    Heap.prototype.insert = Heap.prototype.push;

    Heap.prototype.top = Heap.prototype.peek;

    Heap.prototype.front = Heap.prototype.peek;

    Heap.prototype.has = Heap.prototype.contains;

    Heap.prototype.copy = Heap.prototype.clone;

    return Heap;

  })();

  (function(root, factory) {
    if (true) {
      return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
  })(this, function() {
    return Heap;
  });

}).call(this);


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "./node_modules/is-arguments/index.js":
/*!********************************************!*\
  !*** ./node_modules/is-arguments/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),

/***/ "./node_modules/is-callable/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-callable/index.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};


/***/ }),

/***/ "./node_modules/is-generator-function/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/is-generator-function/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};


/***/ }),

/***/ "./node_modules/is-nan/implementation.js":
/*!***********************************************!*\
  !*** ./node_modules/is-nan/implementation.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


/***/ }),

/***/ "./node_modules/is-nan/index.js":
/*!**************************************!*\
  !*** ./node_modules/is-nan/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(/*! call-bind */ "./node_modules/call-bind/index.js");
var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/is-nan/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/is-nan/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "./node_modules/is-nan/shim.js");

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "./node_modules/is-nan/polyfill.js":
/*!*****************************************!*\
  !*** ./node_modules/is-nan/polyfill.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/is-nan/implementation.js");

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


/***/ }),

/***/ "./node_modules/is-nan/shim.js":
/*!*************************************!*\
  !*** ./node_modules/is-nan/shim.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/is-nan/polyfill.js");

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "./node_modules/is-typed-array/index.js":
/*!**********************************************!*\
  !*** ./node_modules/is-typed-array/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var whichTypedArray = __webpack_require__(/*! which-typed-array */ "./node_modules/which-typed-array/index.js");

module.exports = function isTypedArray(value) {
	return !!whichTypedArray(value);
};


/***/ }),

/***/ "./node_modules/json-diff/lib/colorize.js":
/*!************************************************!*\
  !*** ./node_modules/json-diff/lib/colorize.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const color = __webpack_require__(/*! colors/safe */ "./node_modules/colors/safe.js")

const { extendedTypeOf } = __webpack_require__(/*! ./util */ "./node_modules/json-diff/lib/util.js")

const Theme = {
  ' ' (s) { return s },
  '+': color.green,
  '-': color.red
}

const subcolorizeToCallback = function (options, key, diff, output, color, indent) {
  let subvalue
  const prefix = key ? `${key}: ` : ''
  const subindent = indent + '  '

  const outputElisions = (n) => {
    const maxElisions = options.maxElisions === undefined ? Infinity : options.maxElisions
    if (n < maxElisions) {
      for (let i = 0; i < n; i++) {
        output(' ', subindent + '...')
      }
    } else {
      output(' ', subindent + `... (${n} entries)`)
    }
  }

  switch (extendedTypeOf(diff)) {
    case 'object':
      if (('__old' in diff) && ('__new' in diff) && (Object.keys(diff).length === 2)) {
        subcolorizeToCallback(options, key, diff.__old, output, '-', indent)
        return subcolorizeToCallback(options, key, diff.__new, output, '+', indent)
      } else {
        output(color, `${indent}${prefix}{`)
        for (const subkey of Object.keys(diff)) {
          let m
          subvalue = diff[subkey]
          if ((m = subkey.match(/^(.*)__deleted$/))) {
            subcolorizeToCallback(options, m[1], subvalue, output, '-', subindent)
          } else if ((m = subkey.match(/^(.*)__added$/))) {
            subcolorizeToCallback(options, m[1], subvalue, output, '+', subindent)
          } else {
            subcolorizeToCallback(options, subkey, subvalue, output, color, subindent)
          }
        }
        return output(color, `${indent}}`)
      }

    case 'array': {
      output(color, `${indent}${prefix}[`)

      let looksLikeDiff = true
      for (const item of diff) {
        if ((extendedTypeOf(item) !== 'array') || !((item.length === 2) || ((item.length === 1) && (item[0] === ' '))) || !(typeof (item[0]) === 'string') || (item[0].length !== 1) || !([' ', '-', '+', '~'].includes(item[0]))) {
          looksLikeDiff = false
        }
      }

      if (looksLikeDiff) {
        let op
        let elisionCount = 0
        for ([op, subvalue] of diff) {
          if (op === ' ' && subvalue == null) {
            elisionCount++
          } else {
            if (elisionCount > 0) {
              outputElisions(elisionCount)
            }
            elisionCount = 0

            if (![' ', '~', '+', '-'].includes(op)) {
              throw new Error(`Unexpected op '${op}' in ${JSON.stringify(diff, null, 2)}`)
            }
            if (op === '~') { op = ' ' }
            subcolorizeToCallback(options, '', subvalue, output, op, subindent)
          }
        }
        if (elisionCount > 0) {
          outputElisions(elisionCount)
        }
      } else {
        for (subvalue of diff) {
          subcolorizeToCallback(options, '', subvalue, output, color, subindent)
        }
      }

      return output(color, `${indent}]`)
    }

    default:
      if (diff === 0 || diff === null || diff === false || diff === '' || diff) {
        return output(color, indent + prefix + JSON.stringify(diff))
      }
  }
}

const colorizeToCallback = (diff, options, output) =>
  subcolorizeToCallback(options, '', diff, output, ' ', '')

const colorizeToArray = function (diff, options = {}) {
  const output = []
  colorizeToCallback(diff, options, (color, line) => output.push(`${color}${line}`))
  return output
}

const colorize = function (diff, options = {}) {
  const output = []
  colorizeToCallback(diff, options, function (color, line) {
    if (options.color != null ? options.color : true) {
      return output.push(((options.theme != null ? options.theme[color] : undefined) != null ? (options.theme != null ? options.theme[color] : undefined) : Theme[color])(`${color}${line}`) + '\n')
    } else {
      return output.push(`${color}${line}\n`)
    }
  })
  return output.join('')
}

module.exports = { colorize, colorizeToArray, colorizeToCallback }


/***/ }),

/***/ "./node_modules/json-diff/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/json-diff/lib/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { SequenceMatcher } = __webpack_require__(/*! @ewoudenberg/difflib */ "./node_modules/@ewoudenberg/difflib/index.js")
const { extendedTypeOf, roundObj } = __webpack_require__(/*! ./util */ "./node_modules/json-diff/lib/util.js")
const { colorize, colorizeToCallback } = __webpack_require__(/*! ./colorize */ "./node_modules/json-diff/lib/colorize.js")

class JsonDiff {
  constructor (options) {
    options.outputKeys = options.outputKeys || []
    options.excludeKeys = options.excludeKeys || []
    this.options = options
  }

  isScalar (obj) {
    return typeof obj !== 'object' || obj === null
  }

  objectDiff (obj1, obj2) {
    let result = {}
    let score = 0
    let equal = true

    for (const [key, value] of Object.entries(obj1)) {
      if (!this.options.outputNewOnly) {
        const postfix = '__deleted'

        if (!(key in obj2) && !(this.options.excludeKeys.includes(key))) {
          result[`${key}${postfix}`] = value
          score -= 30
          equal = false
        }
      }
    }

    for (const [key, value] of Object.entries(obj2)) {
      const postfix = !this.options.outputNewOnly ? '__added' : ''

      if (!(key in obj1) && !(this.options.excludeKeys.includes(key))) {
        result[`${key}${postfix}`] = value
        score -= 30
        equal = false
      }
    }

    for (const [key, value1] of Object.entries(obj1)) {
      if (key in obj2) {
        if (this.options.excludeKeys.includes(key)) {
          continue
        }
        score += 20
        const value2 = obj2[key]
        const change = this.diff(value1, value2)
        if (!change.equal) {
          result[key] = change.result
          equal = false
        } else if (this.options.full || this.options.outputKeys.includes(key)) {
          result[key] = value1
        }
        // console.log(`key ${key} change.score=${change.score} ${change.result}`)
        score += Math.min(20, Math.max(-10, change.score / 5)) // BATMAN!
      }
    }

    if (equal) {
      score = 100 * Math.max(Object.keys(obj1).length, 0.5)
      if (!this.options.full) {
        result = undefined
      }
    } else {
      score = Math.max(0, score)
    }

    // console.log(`objectDiff(${JSON.stringify(obj1, null, 2)} <=> ${JSON.stringify(obj2, null, 2)}) == ${JSON.stringify({score, result, equal})}`)
    return { score, result, equal }
  }

  findMatchingObject (item, index, fuzzyOriginals) {
    // console.log('findMatchingObject: ' + JSON.stringify({item, fuzzyOriginals}, null, 2))
    let bestMatch = null

    for (const [key, { item: candidate, index: matchIndex }] of Object.entries(fuzzyOriginals)) {
      if (key !== '__next') {
        const indexDistance = Math.abs(matchIndex - index)
        if (extendedTypeOf(item) === extendedTypeOf(candidate)) {
          const { score } = this.diff(item, candidate)
          if (
            !bestMatch ||
            score > bestMatch.score ||
            (score === bestMatch.score &&
              indexDistance < bestMatch.indexDistance)
          ) {
            bestMatch = { score, key, indexDistance }
          }
        }
      }
    }

    // console.log('findMatchingObject result = ' + JSON.stringify(bestMatch, null, 2));
    return bestMatch
  }

  scalarize (array, originals, fuzzyOriginals) {
    // console.log('scalarize', array, originals, fuzzyOriginals);
    const fuzzyMatches = []
    if (fuzzyOriginals) {
      // Find best fuzzy match for each object in the array
      const keyScores = {}
      for (let index = 0; index < array.length; index++) {
        const item = array[index]
        if (this.isScalar(item)) {
          continue
        }
        const bestMatch = this.findMatchingObject(item, index, fuzzyOriginals)
        if (bestMatch && (!keyScores[bestMatch.key] || bestMatch.score > keyScores[bestMatch.key].score)) {
          keyScores[bestMatch.key] = { score: bestMatch.score, index }
        }
      }
      for (const [key, match] of Object.entries(keyScores)) {
        fuzzyMatches[match.index] = key
      }
    }

    const result = []
    for (let index = 0; index < array.length; index++) {
      const item = array[index]
      if (this.isScalar(item)) {
        result.push(item)
      } else {
        const key = fuzzyMatches[index] || '__$!SCALAR' + originals.__next++
        originals[key] = { item, index }
        result.push(key)
      }
    }
    // console.log('Scalarize result', result);
    return result
  }

  isScalarized (item, originals) {
    return typeof item === 'string' && item in originals
  }

  descalarize (item, originals) {
    if (this.isScalarized(item, originals)) {
      return originals[item].item
    } else {
      return item
    }
  }

  arrayDiff (obj1, obj2) {
    const originals1 = { __next: 1 }
    const seq1 = this.scalarize(obj1, originals1)
    const originals2 = { __next: originals1.__next }
    const seq2 = this.scalarize(obj2, originals2, originals1)

    if (this.options.sort) {
      seq1.sort()
      seq2.sort()
    }
    const opcodes = new SequenceMatcher(null, seq1, seq2).getOpcodes()

    // console.log(`arrayDiff:\nobj1 = ${JSON.stringify(obj1, null, 2)}\nobj2 = ${JSON.stringify(obj2, null, 2)}\nseq1 = ${JSON.stringify(seq1, null, 2)}\nseq2 = ${JSON.stringify(seq2, null, 2)}\nopcodes = ${JSON.stringify(opcodes, null, 2)}`)

    let result = []
    let score = 0
    let equal = true

    for (const [op, i1, i2, j1, j2] of opcodes) {
      let i, j
      let asc, end
      let asc1, end1
      let asc2, end2
      if (!(op === 'equal' || (this.options.keysOnly && op === 'replace'))) {
        equal = false
      }

      switch (op) {
        case 'equal':
          for (
            i = i1, end = i2, asc = i1 <= end;
            asc ? i < end : i > end;
            asc ? i++ : i--
          ) {
            const item = seq1[i]
            if (this.isScalarized(item, originals1)) {
              if (!this.isScalarized(item, originals2)) {
                throw new Error(
                  `internal bug: isScalarized(item, originals1) != isScalarized(item, originals2) for item ${JSON.stringify(
                    item
                  )}`
                )
              }
              const item1 = this.descalarize(item, originals1)
              const item2 = this.descalarize(item, originals2)
              const change = this.diff(item1, item2)
              if (!change.equal) {
                result.push(['~', change.result])
                equal = false
              } else {
                if (this.options.full || this.options.keepUnchangedValues) {
                  result.push([' ', item1])
                } else {
                  result.push([' '])
                }
              }
            } else {
              if (this.options.full || this.options.keepUnchangedValues) {
                result.push([' ', item])
              } else {
                result.push([' '])
              }
            }
            score += 10
          }
          break
        case 'delete':
          for (
            i = i1, end1 = i2, asc1 = i1 <= end1;
            asc1 ? i < end1 : i > end1;
            asc1 ? i++ : i--
          ) {
            result.push(['-', this.descalarize(seq1[i], originals1)])
            score -= 5
          }
          break
        case 'insert':
          for (
            j = j1, end2 = j2, asc2 = j1 <= end2;
            asc2 ? j < end2 : j > end2;
            asc2 ? j++ : j--
          ) {
            result.push(['+', this.descalarize(seq2[j], originals2)])
            score -= 5
          }
          break
        case 'replace':
          if (!this.options.keysOnly) {
            let asc3, end3
            let asc4, end4
            for (
              i = i1, end3 = i2, asc3 = i1 <= end3;
              asc3 ? i < end3 : i > end3;
              asc3 ? i++ : i--
            ) {
              result.push(['-', this.descalarize(seq1[i], originals1)])
              score -= 5
            }
            for (
              j = j1, end4 = j2, asc4 = j1 <= end4;
              asc4 ? j < end4 : j > end4;
              asc4 ? j++ : j--
            ) {
              result.push(['+', this.descalarize(seq2[j], originals2)])
              score -= 5
            }
          } else {
            let asc5, end5
            for (
              i = i1, end5 = i2, asc5 = i1 <= end5;
              asc5 ? i < end5 : i > end5;
              asc5 ? i++ : i--
            ) {
              const change = this.diff(
                this.descalarize(seq1[i], originals1),
                this.descalarize(seq2[i - i1 + j1], originals2)
              )
              if (!change.equal) {
                result.push(['~', change.result])
                equal = false
              } else {
                result.push([' '])
              }
            }
          }
          break
      }
    }

    if (equal || opcodes.length === 0) {
      if (!this.options.full) {
        result = undefined
      } else {
        result = obj1
      }
      score = 100
    } else {
      score = Math.max(0, score)
    }

    return { score, result, equal }
  }

  diff (obj1, obj2) {
    const type1 = extendedTypeOf(obj1)
    const type2 = extendedTypeOf(obj2)

    if (type1 === type2) {
      switch (type1) {
        case 'object':
          return this.objectDiff(obj1, obj2)

        case 'array':
          return this.arrayDiff(obj1, obj2)
      }
    }

    // Compare primitives or complex objects of different types
    let score = 100
    let result = obj1
    let equal
    if (!this.options.keysOnly) {
      if (type1 === 'date' && type2 === 'date') {
        equal = obj1.getTime() === obj2.getTime()
      } else {
        equal = obj1 === obj2
      }
      if (!equal) {
        score = 0

        if (this.options.outputNewOnly) {
          result = obj2
        } else {
          result = { __old: obj1, __new: obj2 }
        }
      } else if (!this.options.full) {
        result = undefined
      }
    } else {
      equal = true
      result = undefined
    }

    // console.log(`diff: equal ${equal} obj1 ${obj1} obj2 ${obj2} score ${score} ${result || ''}`)

    return { score, result, equal }
  }
}

function diff (obj1, obj2, options = {}) {
  if (options.precision !== undefined) {
    obj1 = roundObj(obj1, options.precision)
    obj2 = roundObj(obj2, options.precision)
  }
  return new JsonDiff(options).diff(obj1, obj2).result
}

function diffString (obj1, obj2, options = {}) {
  return colorize(diff(obj1, obj2, options), options)
}

module.exports = { diff, diffString, colorize, colorizeToCallback }


/***/ }),

/***/ "./node_modules/json-diff/lib/util.js":
/*!********************************************!*\
  !*** ./node_modules/json-diff/lib/util.js ***!
  \********************************************/
/***/ ((module) => {

const extendedTypeOf = function (obj) {
  const result = typeof obj
  if (obj == null) {
    return 'null'
  } else if (result === 'object' && obj.constructor === Array) {
    return 'array'
  } else if (result === 'object' && obj instanceof Date) {
    return 'date'
  } else {
    return result
  }
}

const roundObj = function (data, precision) {
  const type = typeof data
  if (type === 'array') {
    return data.map((x) => roundObj(x, precision))
  } else if (type === 'object') {
    for (const key in data) {
      data[key] = roundObj(data[key], precision)
    }
    return data
  } else if (
    type === 'number' &&
    Number.isFinite(data) &&
    !Number.isInteger(data)
  ) {
    return +data.toFixed(precision)
  } else {
    return data
  }
}

module.exports = { extendedTypeOf, roundObj }


/***/ }),

/***/ "./node_modules/object-is/implementation.js":
/*!**************************************************!*\
  !*** ./node_modules/object-is/implementation.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



/***/ }),

/***/ "./node_modules/object-is/index.js":
/*!*****************************************!*\
  !*** ./node_modules/object-is/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");
var callBind = __webpack_require__(/*! call-bind */ "./node_modules/call-bind/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/object-is/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/object-is/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "./node_modules/object-is/shim.js");

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "./node_modules/object-is/polyfill.js":
/*!********************************************!*\
  !*** ./node_modules/object-is/polyfill.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/object-is/implementation.js");

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


/***/ }),

/***/ "./node_modules/object-is/shim.js":
/*!****************************************!*\
  !*** ./node_modules/object-is/shim.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/object-is/polyfill.js");
var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "./node_modules/object-keys/implementation.js":
/*!****************************************************!*\
  !*** ./node_modules/object-keys/implementation.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/object-keys/isArguments.js"); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ "./node_modules/object-keys/index.js":
/*!*******************************************!*\
  !*** ./node_modules/object-keys/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/object-keys/isArguments.js");

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(/*! ./implementation */ "./node_modules/object-keys/implementation.js");

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ "./node_modules/object-keys/isArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/object-keys/isArguments.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ "./node_modules/object.assign/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/object.assign/implementation.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// modified from https://github.com/es-shims/es6-shim
var objectKeys = __webpack_require__(/*! object-keys */ "./node_modules/object-keys/index.js");
var hasSymbols = __webpack_require__(/*! has-symbols/shams */ "./node_modules/has-symbols/shams.js")();
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");
var toObject = Object;
var $push = callBound('Array.prototype.push');
var $propIsEnumerable = callBound('Object.prototype.propertyIsEnumerable');
var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;

// eslint-disable-next-line no-unused-vars
module.exports = function assign(target, source1) {
	if (target == null) { throw new TypeError('target must be an object'); }
	var to = toObject(target); // step 1
	if (arguments.length === 1) {
		return to; // step 2
	}
	for (var s = 1; s < arguments.length; ++s) {
		var from = toObject(arguments[s]); // step 3.a.i

		// step 3.a.ii:
		var keys = objectKeys(from);
		var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
		if (getSymbols) {
			var syms = getSymbols(from);
			for (var j = 0; j < syms.length; ++j) {
				var key = syms[j];
				if ($propIsEnumerable(from, key)) {
					$push(keys, key);
				}
			}
		}

		// step 3.a.iii:
		for (var i = 0; i < keys.length; ++i) {
			var nextKey = keys[i];
			if ($propIsEnumerable(from, nextKey)) { // step 3.a.iii.2
				var propValue = from[nextKey]; // step 3.a.iii.2.a
				to[nextKey] = propValue; // step 3.a.iii.2.b
			}
		}
	}

	return to; // step 4
};


/***/ }),

/***/ "./node_modules/object.assign/polyfill.js":
/*!************************************************!*\
  !*** ./node_modules/object.assign/polyfill.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/object.assign/implementation.js");

var lacksProperEnumerationOrder = function () {
	if (!Object.assign) {
		return false;
	}
	/*
	 * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
	 * note: this does not detect the bug unless there's 20 characters
	 */
	var str = 'abcdefghijklmnopqrst';
	var letters = str.split('');
	var map = {};
	for (var i = 0; i < letters.length; ++i) {
		map[letters[i]] = letters[i];
	}
	var obj = Object.assign({}, map);
	var actual = '';
	for (var k in obj) {
		actual += k;
	}
	return str !== actual;
};

var assignHasPendingExceptions = function () {
	if (!Object.assign || !Object.preventExtensions) {
		return false;
	}
	/*
	 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
	 * which is 72% slower than our shim, and Firefox 40's native implementation.
	 */
	var thrower = Object.preventExtensions({ 1: 2 });
	try {
		Object.assign(thrower, 'xy');
	} catch (e) {
		return thrower[1] === 'y';
	}
	return false;
};

module.exports = function getPolyfill() {
	if (!Object.assign) {
		return implementation;
	}
	if (lacksProperEnumerationOrder()) {
		return implementation;
	}
	if (assignHasPendingExceptions()) {
		return implementation;
	}
	return Object.assign;
};


/***/ }),

/***/ "./node_modules/os-browserify/browser.js":
/*!***********************************************!*\
  !*** ./node_modules/os-browserify/browser.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};


/***/ }),

/***/ "./node_modules/pako/index.js":
/*!************************************!*\
  !*** ./node_modules/pako/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Top level file is just a mixin of submodules & constants


var assign    = (__webpack_require__(/*! ./lib/utils/common */ "./node_modules/pako/lib/utils/common.js").assign);

var deflate   = __webpack_require__(/*! ./lib/deflate */ "./node_modules/pako/lib/deflate.js");
var inflate   = __webpack_require__(/*! ./lib/inflate */ "./node_modules/pako/lib/inflate.js");
var constants = __webpack_require__(/*! ./lib/zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;


/***/ }),

/***/ "./node_modules/pako/lib/deflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/deflate.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";



var zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ "./node_modules/pako/lib/zlib/deflate.js");
var utils        = __webpack_require__(/*! ./utils/common */ "./node_modules/pako/lib/utils/common.js");
var strings      = __webpack_require__(/*! ./utils/strings */ "./node_modules/pako/lib/utils/strings.js");
var msg          = __webpack_require__(/*! ./zlib/messages */ "./node_modules/pako/lib/zlib/messages.js");
var ZStream      = __webpack_require__(/*! ./zlib/zstream */ "./node_modules/pako/lib/zlib/zstream.js");

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;


/***/ }),

/***/ "./node_modules/pako/lib/inflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/inflate.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";



var zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ "./node_modules/pako/lib/zlib/inflate.js");
var utils        = __webpack_require__(/*! ./utils/common */ "./node_modules/pako/lib/utils/common.js");
var strings      = __webpack_require__(/*! ./utils/strings */ "./node_modules/pako/lib/utils/strings.js");
var c            = __webpack_require__(/*! ./zlib/constants */ "./node_modules/pako/lib/zlib/constants.js");
var msg          = __webpack_require__(/*! ./zlib/messages */ "./node_modules/pako/lib/zlib/messages.js");
var ZStream      = __webpack_require__(/*! ./zlib/zstream */ "./node_modules/pako/lib/zlib/zstream.js");
var GZheader     = __webpack_require__(/*! ./zlib/gzheader */ "./node_modules/pako/lib/zlib/gzheader.js");

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== c.Z_OK) {
        throw new Error(msg[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);
    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 aligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;


/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";



var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);


/***/ }),

/***/ "./node_modules/pako/lib/utils/strings.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/utils/strings.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// String encode/decode helpers



var utils = __webpack_require__(/*! ./common */ "./node_modules/pako/lib/utils/common.js");


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/deflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");
var trees   = __webpack_require__(/*! ./trees */ "./node_modules/pako/lib/zlib/trees.js");
var adler32 = __webpack_require__(/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js");
var crc32   = __webpack_require__(/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js");
var msg     = __webpack_require__(/*! ./messages */ "./node_modules/pako/lib/zlib/messages.js");

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/


/***/ }),

/***/ "./node_modules/pako/lib/zlib/gzheader.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/gzheader.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");
var adler32       = __webpack_require__(/*! ./adler32 */ "./node_modules/pako/lib/zlib/adler32.js");
var crc32         = __webpack_require__(/*! ./crc32 */ "./node_modules/pako/lib/zlib/crc32.js");
var inflate_fast  = __webpack_require__(/*! ./inffast */ "./node_modules/pako/lib/zlib/inffast.js");
var inflate_table = __webpack_require__(/*! ./inftrees */ "./node_modules/pako/lib/zlib/inftrees.js");

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/


/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};


/***/ }),

/***/ "./node_modules/pako/lib/zlib/trees.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = __webpack_require__(/*! ../utils/common */ "./node_modules/pako/lib/utils/common.js");

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;


/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./test/unit/tiled/parser-spec/collection.tsj":
/*!****************************************************!*\
  !*** ./test/unit/tiled/parser-spec/collection.tsj ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{ \"columns\":0,\r\n \"grid\":\r\n    {\r\n     \"height\":1,\r\n     \"orientation\":\"orthogonal\",\r\n     \"width\":1\r\n    },\r\n \"margin\":0,\r\n \"name\":\"collection\",\r\n \"spacing\":0,\r\n \"tilecount\":8,\r\n \"tiledversion\":\"1.10.2\",\r\n \"tileheight\":128,\r\n \"tiles\":[\r\n        {\r\n         \"id\":0,\r\n         \"image\":\"tile-images\\/abstractTile_12.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":1,\r\n         \"image\":\"tile-images\\/abstractTile_13.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":2,\r\n         \"image\":\"tile-images\\/abstractTile_14.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":3,\r\n         \"image\":\"tile-images\\/abstractTile_15.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":4,\r\n         \"image\":\"tile-images\\/abstractTile_27.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":5,\r\n         \"image\":\"tile-images\\/abstractTile_28.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":6,\r\n         \"image\":\"tile-images\\/abstractTile_29.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":7,\r\n         \"image\":\"tile-images\\/abstractTile_30.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }],\r\n \"tilewidth\":111,\r\n \"type\":\"tileset\",\r\n \"version\":\"1.10\"\r\n}");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/collection.tsx":
/*!****************************************************!*\
  !*** ./test/unit/tiled/parser-spec/collection.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<tileset version=\"1.10\" tiledversion=\"1.10.2\" name=\"collection\" tilewidth=\"111\" tileheight=\"128\" tilecount=\"8\" columns=\"0\">\r\n <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\r\n <tile id=\"0\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_12.png\"/>\r\n </tile>\r\n <tile id=\"1\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_13.png\"/>\r\n </tile>\r\n <tile id=\"2\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_14.png\"/>\r\n </tile>\r\n <tile id=\"3\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_15.png\"/>\r\n </tile>\r\n <tile id=\"4\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_27.png\"/>\r\n </tile>\r\n <tile id=\"5\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_28.png\"/>\r\n </tile>\r\n <tile id=\"6\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_29.png\"/>\r\n </tile>\r\n <tile id=\"7\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_30.png\"/>\r\n </tile>\r\n</tileset>\r\n");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/external.tsj":
/*!**************************************************!*\
  !*** ./test/unit/tiled/parser-spec/external.tsj ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{ \"class\":\"SomeClass\",\r\n \"columns\":12,\r\n \"image\":\"tilemap_packed.png\",\r\n \"imageheight\":176,\r\n \"imagewidth\":192,\r\n \"margin\":0,\r\n \"name\":\"External\",\r\n \"properties\":[\r\n        {\r\n         \"name\":\"someprop\",\r\n         \"type\":\"string\",\r\n         \"value\":\"prop\"\r\n        }],\r\n \"spacing\":0,\r\n \"tilecount\":132,\r\n \"tiledversion\":\"1.10.2\",\r\n \"tileheight\":16,\r\n \"tiles\":[\r\n        {\r\n         \"id\":29,\r\n         \"objectgroup\":\r\n            {\r\n             \"draworder\":\"index\",\r\n             \"id\":2,\r\n             \"name\":\"\",\r\n             \"objects\":[\r\n                    {\r\n                     \"ellipse\":true,\r\n                     \"height\":7.5,\r\n                     \"id\":1,\r\n                     \"name\":\"\",\r\n                     \"rotation\":0,\r\n                     \"type\":\"\",\r\n                     \"visible\":true,\r\n                     \"width\":7.5,\r\n                     \"x\":1.75,\r\n                     \"y\":3.5\r\n                    }, \r\n                    {\r\n                     \"ellipse\":true,\r\n                     \"height\":4.75,\r\n                     \"id\":2,\r\n                     \"name\":\"\",\r\n                     \"rotation\":0,\r\n                     \"type\":\"\",\r\n                     \"visible\":true,\r\n                     \"width\":5.25,\r\n                     \"x\":9.5,\r\n                     \"y\":8\r\n                    }],\r\n             \"opacity\":1,\r\n             \"type\":\"objectgroup\",\r\n             \"visible\":true,\r\n             \"x\":0,\r\n             \"y\":0\r\n            }\r\n        }, \r\n        {\r\n         \"id\":54,\r\n         \"probability\":0.5,\r\n         \"type\":\"some class\"\r\n        }, \r\n        {\r\n         \"id\":93,\r\n         \"objectgroup\":\r\n            {\r\n             \"draworder\":\"index\",\r\n             \"id\":2,\r\n             \"name\":\"\",\r\n             \"objects\":[\r\n                    {\r\n                     \"height\":12,\r\n                     \"id\":1,\r\n                     \"name\":\"\",\r\n                     \"rotation\":0,\r\n                     \"type\":\"\",\r\n                     \"visible\":true,\r\n                     \"width\":10,\r\n                     \"x\":3,\r\n                     \"y\":2\r\n                    }],\r\n             \"opacity\":1,\r\n             \"type\":\"objectgroup\",\r\n             \"visible\":true,\r\n             \"x\":0,\r\n             \"y\":0\r\n            }\r\n        }, \r\n        {\r\n         \"id\":110,\r\n         \"objectgroup\":\r\n            {\r\n             \"draworder\":\"index\",\r\n             \"id\":2,\r\n             \"name\":\"\",\r\n             \"objects\":[\r\n                    {\r\n                     \"height\":0,\r\n                     \"id\":1,\r\n                     \"name\":\"\",\r\n                     \"polygon\":[\r\n                            {\r\n                             \"x\":0,\r\n                             \"y\":0\r\n                            }, \r\n                            {\r\n                             \"x\":5.75,\r\n                             \"y\":-6\r\n                            }, \r\n                            {\r\n                             \"x\":8.75,\r\n                             \"y\":-1\r\n                            }, \r\n                            {\r\n                             \"x\":4.25,\r\n                             \"y\":2.25\r\n                            }],\r\n                     \"rotation\":0,\r\n                     \"type\":\"\",\r\n                     \"visible\":true,\r\n                     \"width\":0,\r\n                     \"x\":3.25,\r\n                     \"y\":11\r\n                    }],\r\n             \"opacity\":1,\r\n             \"type\":\"objectgroup\",\r\n             \"visible\":true,\r\n             \"x\":0,\r\n             \"y\":0\r\n            }\r\n        }, \r\n        {\r\n         \"animation\":[\r\n                {\r\n                 \"duration\":500,\r\n                 \"tileid\":130\r\n                }, \r\n                {\r\n                 \"duration\":500,\r\n                 \"tileid\":131\r\n                }],\r\n         \"id\":130\r\n        }],\r\n \"tilewidth\":16,\r\n \"type\":\"tileset\",\r\n \"version\":\"1.10\"\r\n}");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/external.tsx":
/*!**************************************************!*\
  !*** ./test/unit/tiled/parser-spec/external.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<tileset version=\"1.10\" tiledversion=\"1.10.2\" name=\"External\" class=\"SomeClass\" tilewidth=\"16\" tileheight=\"16\" tilecount=\"132\" columns=\"12\">\r\n <editorsettings>\r\n  <export target=\"external.tsj\" format=\"json\"/>\r\n </editorsettings>\r\n <properties>\r\n  <property name=\"someprop\" value=\"prop\"/>\r\n </properties>\r\n <image source=\"tilemap_packed.png\" width=\"192\" height=\"176\"/>\r\n <tile id=\"29\">\r\n  <objectgroup draworder=\"index\" id=\"2\">\r\n   <object id=\"1\" x=\"1.75\" y=\"3.5\" width=\"7.5\" height=\"7.5\">\r\n    <ellipse/>\r\n   </object>\r\n   <object id=\"2\" x=\"9.5\" y=\"8\" width=\"5.25\" height=\"4.75\">\r\n    <ellipse/>\r\n   </object>\r\n  </objectgroup>\r\n </tile>\r\n <tile id=\"54\" type=\"some class\" probability=\"0.5\"/>\r\n <tile id=\"93\">\r\n  <objectgroup draworder=\"index\" id=\"2\">\r\n   <object id=\"1\" x=\"3\" y=\"2\" width=\"10\" height=\"12\"/>\r\n  </objectgroup>\r\n </tile>\r\n <tile id=\"110\">\r\n  <objectgroup draworder=\"index\" id=\"2\">\r\n   <object id=\"1\" x=\"3.25\" y=\"11\">\r\n    <polygon points=\"0,0 5.75,-6 8.75,-1 4.25,2.25\"/>\r\n   </object>\r\n  </objectgroup>\r\n </tile>\r\n <tile id=\"130\">\r\n  <animation>\r\n   <frame tileid=\"130\" duration=\"500\"/>\r\n   <frame tileid=\"131\" duration=\"500\"/>\r\n  </animation>\r\n </tile>\r\n</tileset>\r\n");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/iso-collection.tsj":
/*!********************************************************!*\
  !*** ./test/unit/tiled/parser-spec/iso-collection.tsj ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{ \"columns\":0,\r\n \"grid\":\r\n    {\r\n     \"height\":64,\r\n     \"orientation\":\"isometric\",\r\n     \"width\":111\r\n    },\r\n \"margin\":0,\r\n \"name\":\"collection\",\r\n \"spacing\":0,\r\n \"tilecount\":8,\r\n \"tiledversion\":\"1.10.2\",\r\n \"tileheight\":128,\r\n \"tiles\":[\r\n        {\r\n         \"id\":0,\r\n         \"image\":\"tile-images\\/abstractTile_12.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111,\r\n         \"objectgroup\":\r\n            {\r\n             \"draworder\":\"index\",\r\n             \"id\":2,\r\n             \"name\":\"\",\r\n             \"objects\":[\r\n                    {\r\n                     \"height\":62.7567567567568,\r\n                     \"id\":1,\r\n                     \"name\":\"\",\r\n                     \"rotation\":0,\r\n                     \"type\":\"\",\r\n                     \"visible\":true,\r\n                     \"width\":65.4954954954955,\r\n                     \"x\":0,\r\n                     \"y\":0\r\n                    }],\r\n             \"opacity\":1,\r\n             \"type\":\"objectgroup\",\r\n             \"visible\":true,\r\n             \"x\":0,\r\n             \"y\":0\r\n            }\r\n        }, \r\n        {\r\n         \"id\":1,\r\n         \"image\":\"tile-images\\/abstractTile_13.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":2,\r\n         \"image\":\"tile-images\\/abstractTile_14.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":3,\r\n         \"image\":\"tile-images\\/abstractTile_15.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":4,\r\n         \"image\":\"tile-images\\/abstractTile_27.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":5,\r\n         \"image\":\"tile-images\\/abstractTile_28.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":6,\r\n         \"image\":\"tile-images\\/abstractTile_29.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }, \r\n        {\r\n         \"id\":7,\r\n         \"image\":\"tile-images\\/abstractTile_30.png\",\r\n         \"imageheight\":128,\r\n         \"imagewidth\":111\r\n        }],\r\n \"tilewidth\":111,\r\n \"type\":\"tileset\",\r\n \"version\":\"1.10\"\r\n}");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/iso-collection.tsx":
/*!********************************************************!*\
  !*** ./test/unit/tiled/parser-spec/iso-collection.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<tileset version=\"1.10\" tiledversion=\"1.10.2\" name=\"collection\" tilewidth=\"111\" tileheight=\"128\" tilecount=\"8\" columns=\"0\">\r\n <editorsettings>\r\n  <export target=\"\" format=\"json\"/>\r\n </editorsettings>\r\n <grid orientation=\"isometric\" width=\"111\" height=\"64\"/>\r\n <tile id=\"0\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_12.png\"/>\r\n  <objectgroup draworder=\"index\" id=\"2\">\r\n   <object id=\"1\" x=\"0\" y=\"0\" width=\"65.4955\" height=\"62.7568\"/>\r\n  </objectgroup>\r\n </tile>\r\n <tile id=\"1\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_13.png\"/>\r\n </tile>\r\n <tile id=\"2\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_14.png\"/>\r\n </tile>\r\n <tile id=\"3\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_15.png\"/>\r\n </tile>\r\n <tile id=\"4\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_27.png\"/>\r\n </tile>\r\n <tile id=\"5\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_28.png\"/>\r\n </tile>\r\n <tile id=\"6\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_29.png\"/>\r\n </tile>\r\n <tile id=\"7\">\r\n  <image width=\"111\" height=\"128\" source=\"tile-images/abstractTile_30.png\"/>\r\n </tile>\r\n</tileset>\r\n");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/isometric.tsj":
/*!***************************************************!*\
  !*** ./test/unit/tiled/parser-spec/isometric.tsj ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{ \"columns\":11,\r\n \"grid\":\r\n    {\r\n     \"height\":8,\r\n     \"orientation\":\"isometric\",\r\n     \"width\":17\r\n    },\r\n \"image\":\"isometric2.png\",\r\n \"imageheight\":170,\r\n \"imagewidth\":176,\r\n \"margin\":0,\r\n \"name\":\"isometric\",\r\n \"spacing\":0,\r\n \"tilecount\":110,\r\n \"tiledversion\":\"1.10.2\",\r\n \"tileheight\":17,\r\n \"tiles\":[\r\n        {\r\n         \"id\":31,\r\n         \"objectgroup\":\r\n            {\r\n             \"draworder\":\"index\",\r\n             \"id\":2,\r\n             \"name\":\"\",\r\n             \"objects\":[\r\n                    {\r\n                     \"height\":5.02573529411765,\r\n                     \"id\":1,\r\n                     \"name\":\"\",\r\n                     \"rotation\":0,\r\n                     \"type\":\"\",\r\n                     \"visible\":true,\r\n                     \"width\":6.04044117647059,\r\n                     \"x\":0.915441176470588,\r\n                     \"y\":1.12867647058824\r\n                    }],\r\n             \"opacity\":1,\r\n             \"type\":\"objectgroup\",\r\n             \"visible\":true,\r\n             \"x\":0,\r\n             \"y\":0\r\n            }\r\n        }],\r\n \"tilewidth\":16,\r\n \"type\":\"tileset\",\r\n \"version\":\"1.10\"\r\n}");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/isometric.tsx":
/*!***************************************************!*\
  !*** ./test/unit/tiled/parser-spec/isometric.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<tileset version=\"1.10\" tiledversion=\"1.10.2\" name=\"isometric\" tilewidth=\"16\" tileheight=\"17\" tilecount=\"110\" columns=\"11\">\r\n <editorsettings>\r\n  <export target=\"isometric.tsj\" format=\"json\"/>\r\n </editorsettings>\r\n <grid orientation=\"isometric\" width=\"17\" height=\"8\"/>\r\n <image source=\"isometric2.png\" width=\"176\" height=\"170\"/>\r\n <tile id=\"31\">\r\n  <objectgroup draworder=\"index\" id=\"2\">\r\n   <object id=\"1\" x=\"0.915441\" y=\"1.12868\" width=\"6.04044\" height=\"5.02574\"/>\r\n  </objectgroup>\r\n </tile>\r\n</tileset>\r\n");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/orthogonal-complex.tmj":
/*!************************************************************!*\
  !*** ./test/unit/tiled/parser-spec/orthogonal-complex.tmj ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{ \"backgroundcolor\":\"#22b2b2\",\r\n \"class\":\"map-class\",\r\n \"compressionlevel\":-1,\r\n \"height\":10,\r\n \"infinite\":false,\r\n \"layers\":[\r\n        {\r\n         \"class\":\"ground-class\",\r\n         \"data\":[2, 3, 3, 2, 2, 3, 1, 3, 2, 1,\r\n            3, 2, 1, 1, 1, 2, 2, 3, 3, 3,\r\n            2, 1, 2, 1, 1, 2, 3, 1, 2, 2,\r\n            3, 1, 3, 3, 2, 1, 2, 2, 3, 3,\r\n            1, 3, 1, 1, 2, 1, 3, 3, 3, 2,\r\n            3, 1, 2, 1, 2, 3, 2, 2, 2, 1,\r\n            2, 1, 2, 3, 2, 1, 2, 1, 1, 3,\r\n            2, 1, 13, 14, 14, 14, 14, 15, 2, 1,\r\n            3, 2, 25, 26, 26, 26, 26, 27, 2, 1,\r\n            3, 2, 37, 38, 38, 38, 38, 39, 3, 2],\r\n         \"height\":10,\r\n         \"id\":1,\r\n         \"name\":\"Ground\",\r\n         \"opacity\":1,\r\n         \"properties\":[\r\n                {\r\n                 \"name\":\"boolean\",\r\n                 \"type\":\"bool\",\r\n                 \"value\":false\r\n                }, \r\n                {\r\n                 \"name\":\"file-prop\",\r\n                 \"type\":\"file\",\r\n                 \"value\":\"Cloud.png\"\r\n                }, \r\n                {\r\n                 \"name\":\"float-prop\",\r\n                 \"type\":\"float\",\r\n                 \"value\":123\r\n                }, \r\n                {\r\n                 \"name\":\"int-prop\",\r\n                 \"type\":\"int\",\r\n                 \"value\":14\r\n                }, \r\n                {\r\n                 \"name\":\"multiline\",\r\n                 \"type\":\"string\",\r\n                 \"value\":\"Multiline string\\nshould\\nnot break\\nthe \\nparser\\n\\n!!!\"\r\n                }, \r\n                {\r\n                 \"name\":\"obj\",\r\n                 \"type\":\"object\",\r\n                 \"value\":1\r\n                }, \r\n                {\r\n                 \"name\":\"some-color\",\r\n                 \"type\":\"color\",\r\n                 \"value\":\"#ff55aa00\"\r\n                }, \r\n                {\r\n                 \"name\":\"string-prop\",\r\n                 \"type\":\"string\",\r\n                 \"value\":\"some-string\"\r\n                }],\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":true,\r\n         \"width\":10,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"data\":[58, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 45, 46, 46, 46, 46, 46, 47, 0, 0,\r\n            0, 57, 0, 0, 0, 0, 0, 59, 0, 0,\r\n            0, 57, 0, 49, 50, 50, 52, 51, 0, 0,\r\n            0, 57, 0, 61, 62, 62, 64, 63, 0, 0,\r\n            0, 57, 0, 73, 74, 86, 74, 76, 0, 0,\r\n            0, 69, 83, 0, 0, 0, 0, 30, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            17, 0, 0, 0, 0, 0, 0, 0, 105, 0,\r\n            29, 29, 0, 94, 0, 0, 0, 0, 0, 129],\r\n         \"height\":10,\r\n         \"id\":2,\r\n         \"name\":\"PlayerLayer\",\r\n         \"opacity\":1,\r\n         \"properties\":[\r\n                {\r\n                 \"name\":\"solid\",\r\n                 \"type\":\"bool\",\r\n                 \"value\":true\r\n                }],\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":true,\r\n         \"width\":10,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"data\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            5, 0, 0, 0, 0, 0, 0, 0, 93, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n         \"height\":10,\r\n         \"id\":3,\r\n         \"name\":\"Above\",\r\n         \"opacity\":1,\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":true,\r\n         \"width\":10,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"data\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 130, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n         \"height\":10,\r\n         \"id\":5,\r\n         \"name\":\"InvisibleLayer\",\r\n         \"opacity\":1,\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":false,\r\n         \"width\":10,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"class\":\"object\",\r\n         \"draworder\":\"topdown\",\r\n         \"id\":4,\r\n         \"name\":\"Objects\",\r\n         \"objects\":[\r\n                {\r\n                 \"height\":0,\r\n                 \"id\":1,\r\n                 \"name\":\"Camera\",\r\n                 \"point\":true,\r\n                 \"properties\":[\r\n                        {\r\n                         \"name\":\"camera\",\r\n                         \"type\":\"bool\",\r\n                         \"value\":true\r\n                        }, \r\n                        {\r\n                         \"name\":\"zoom\",\r\n                         \"type\":\"float\",\r\n                         \"value\":5\r\n                        }],\r\n                 \"rotation\":0,\r\n                 \"type\":\"\",\r\n                 \"visible\":true,\r\n                 \"width\":0,\r\n                 \"x\":87.3333333333333,\r\n                 \"y\":102.666666666667\r\n                }, \r\n                {\r\n                 \"height\":18,\r\n                 \"id\":3,\r\n                 \"name\":\"Rectangle\",\r\n                 \"properties\":[\r\n                        {\r\n                         \"name\":\"other property\",\r\n                         \"type\":\"string\",\r\n                         \"value\":\"prop\"\r\n                        }],\r\n                 \"rotation\":0,\r\n                 \"type\":\"\",\r\n                 \"visible\":true,\r\n                 \"width\":71.3333333333333,\r\n                 \"x\":47.3333333333333,\r\n                 \"y\":125.333333333333\r\n                }, \r\n                {\r\n                 \"gid\":3221225578,\r\n                 \"height\":16,\r\n                 \"id\":4,\r\n                 \"name\":\"\",\r\n                 \"properties\":[\r\n                        {\r\n                         \"name\":\"string prop\",\r\n                         \"type\":\"string\",\r\n                         \"value\":\"struing\"\r\n                        }],\r\n                 \"rotation\":-59,\r\n                 \"type\":\"\",\r\n                 \"visible\":true,\r\n                 \"width\":16,\r\n                 \"x\":27.6666666666667,\r\n                 \"y\":138.333333333333\r\n                }, \r\n                {\r\n                 \"height\":17,\r\n                 \"id\":5,\r\n                 \"name\":\"\",\r\n                 \"rotation\":0,\r\n                 \"text\":\r\n                    {\r\n                     \"text\":\"Hello World\",\r\n                     \"wrap\":true\r\n                    },\r\n                 \"type\":\"\",\r\n                 \"visible\":true,\r\n                 \"width\":80,\r\n                 \"x\":40.6666666666667,\r\n                 \"y\":0.833333333333332\r\n                }, \r\n                {\r\n                 \"gid\":129,\r\n                 \"height\":16,\r\n                 \"id\":6,\r\n                 \"name\":\"\",\r\n                 \"rotation\":0,\r\n                 \"type\":\"\",\r\n                 \"visible\":true,\r\n                 \"width\":16,\r\n                 \"x\":143.666666666667,\r\n                 \"y\":112\r\n                }],\r\n         \"opacity\":1,\r\n         \"properties\":[\r\n                {\r\n                 \"name\":\"props\",\r\n                 \"type\":\"string\",\r\n                 \"value\":\"stuff\"\r\n                }],\r\n         \"tintcolor\":\"#ff0000\",\r\n         \"type\":\"objectgroup\",\r\n         \"visible\":true,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"class\":\"OtherClouds\",\r\n         \"id\":7,\r\n         \"image\":\"Cloud.png\",\r\n         \"name\":\"Clouds 2\",\r\n         \"offsetx\":177,\r\n         \"offsety\":-17,\r\n         \"opacity\":0.5,\r\n         \"parallaxx\":1.9,\r\n         \"parallaxy\":1.4,\r\n         \"type\":\"imagelayer\",\r\n         \"visible\":true,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"class\":\"SomeClouds\",\r\n         \"id\":6,\r\n         \"image\":\"Cloud.png\",\r\n         \"name\":\"Clouds\",\r\n         \"offsetx\":-103,\r\n         \"offsety\":38,\r\n         \"opacity\":0.6,\r\n         \"parallaxx\":0.5,\r\n         \"parallaxy\":0.5,\r\n         \"properties\":[\r\n                {\r\n                 \"name\":\"someprop\",\r\n                 \"type\":\"string\",\r\n                 \"value\":\"a prop\"\r\n                }],\r\n         \"transparentcolor\":\"#ffffff\",\r\n         \"type\":\"imagelayer\",\r\n         \"visible\":true,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }],\r\n \"nextlayerid\":9,\r\n \"nextobjectid\":7,\r\n \"orientation\":\"orthogonal\",\r\n \"parallaxoriginx\":94,\r\n \"parallaxoriginy\":58,\r\n \"renderorder\":\"right-down\",\r\n \"tiledversion\":\"1.10.2\",\r\n \"tileheight\":16,\r\n \"tilesets\":[\r\n        {\r\n         \"class\":\"TilesetClass\",\r\n         \"columns\":12,\r\n         \"firstgid\":1,\r\n         \"image\":\"tilemap_packed.png\",\r\n         \"imageheight\":176,\r\n         \"imagewidth\":192,\r\n         \"margin\":0,\r\n         \"name\":\"Embedded\",\r\n         \"properties\":[\r\n                {\r\n                 \"name\":\"tilesetprop\",\r\n                 \"type\":\"string\",\r\n                 \"value\":\"some prop here\"\r\n                }],\r\n         \"spacing\":0,\r\n         \"tilecount\":132,\r\n         \"tileheight\":16,\r\n         \"tiles\":[\r\n                {\r\n                 \"id\":29,\r\n                 \"objectgroup\":\r\n                    {\r\n                     \"draworder\":\"index\",\r\n                     \"id\":2,\r\n                     \"name\":\"\",\r\n                     \"objects\":[\r\n                            {\r\n                             \"ellipse\":true,\r\n                             \"height\":7.25,\r\n                             \"id\":1,\r\n                             \"name\":\"\",\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":6.75,\r\n                             \"x\":8.5,\r\n                             \"y\":6.25\r\n                            }, \r\n                            {\r\n                             \"ellipse\":true,\r\n                             \"height\":12.75,\r\n                             \"id\":2,\r\n                             \"name\":\"\",\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":11.5,\r\n                             \"x\":-1,\r\n                             \"y\":0.25\r\n                            }],\r\n                     \"opacity\":1,\r\n                     \"type\":\"objectgroup\",\r\n                     \"visible\":true,\r\n                     \"x\":0,\r\n                     \"y\":0\r\n                    }\r\n                }, \r\n                {\r\n                 \"id\":57,\r\n                 \"objectgroup\":\r\n                    {\r\n                     \"draworder\":\"index\",\r\n                     \"id\":2,\r\n                     \"name\":\"\",\r\n                     \"objects\":[\r\n                            {\r\n                             \"height\":0,\r\n                             \"id\":1,\r\n                             \"name\":\"\",\r\n                             \"point\":true,\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":0,\r\n                             \"x\":2.75,\r\n                             \"y\":3\r\n                            }, \r\n                            {\r\n                             \"height\":0,\r\n                             \"id\":2,\r\n                             \"name\":\"\",\r\n                             \"point\":true,\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":0,\r\n                             \"x\":12,\r\n                             \"y\":1.5\r\n                            }, \r\n                            {\r\n                             \"height\":0,\r\n                             \"id\":3,\r\n                             \"name\":\"\",\r\n                             \"point\":true,\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":0,\r\n                             \"x\":4.75,\r\n                             \"y\":9.5\r\n                            }, \r\n                            {\r\n                             \"height\":0,\r\n                             \"id\":4,\r\n                             \"name\":\"\",\r\n                             \"point\":true,\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":0,\r\n                             \"x\":10.5,\r\n                             \"y\":9.5\r\n                            }],\r\n                     \"opacity\":1,\r\n                     \"type\":\"objectgroup\",\r\n                     \"visible\":true,\r\n                     \"x\":0,\r\n                     \"y\":0\r\n                    }\r\n                }, \r\n                {\r\n                 \"id\":93,\r\n                 \"objectgroup\":\r\n                    {\r\n                     \"draworder\":\"index\",\r\n                     \"id\":2,\r\n                     \"name\":\"\",\r\n                     \"objects\":[\r\n                            {\r\n                             \"height\":12,\r\n                             \"id\":1,\r\n                             \"name\":\"\",\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":10,\r\n                             \"x\":3,\r\n                             \"y\":2\r\n                            }],\r\n                     \"opacity\":1,\r\n                     \"type\":\"objectgroup\",\r\n                     \"visible\":true,\r\n                     \"x\":0,\r\n                     \"y\":0\r\n                    },\r\n                 \"properties\":[\r\n                        {\r\n                         \"name\":\"object prop\",\r\n                         \"type\":\"string\",\r\n                         \"value\":\"some prop\"\r\n                        }],\r\n                 \"type\":\"coin\"\r\n                }, \r\n                {\r\n                 \"animation\":[\r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":127\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":115\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":116\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":117\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":118\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":119\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":128\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":129\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":130\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":131\r\n                        }],\r\n                 \"id\":128,\r\n                 \"probability\":0.5,\r\n                 \"properties\":[\r\n                        {\r\n                         \"name\":\"props\",\r\n                         \"type\":\"string\",\r\n                         \"value\":\"animation\"\r\n                        }]\r\n                }],\r\n         \"tilewidth\":16\r\n        }],\r\n \"tilewidth\":16,\r\n \"type\":\"map\",\r\n \"version\":\"1.10\",\r\n \"width\":10\r\n}");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/orthogonal-complex.tmx":
/*!************************************************************!*\
  !*** ./test/unit/tiled/parser-spec/orthogonal-complex.tmx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<map version=\"1.10\" tiledversion=\"1.10.2\" class=\"map-class\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"10\" height=\"10\" tilewidth=\"16\" tileheight=\"16\" infinite=\"0\" parallaxoriginx=\"94\" parallaxoriginy=\"58\" backgroundcolor=\"#22b2b2\" nextlayerid=\"9\" nextobjectid=\"7\">\r\n <editorsettings>\r\n  <export target=\"orthogonal-complex.tmj\" format=\"json\"/>\r\n </editorsettings>\r\n <tileset firstgid=\"1\" name=\"Embedded\" class=\"TilesetClass\" tilewidth=\"16\" tileheight=\"16\" tilecount=\"132\" columns=\"12\">\r\n  <properties>\r\n   <property name=\"tilesetprop\" value=\"some prop here\"/>\r\n  </properties>\r\n  <image source=\"tilemap_packed.png\" width=\"192\" height=\"176\"/>\r\n  <tile id=\"29\">\r\n   <objectgroup draworder=\"index\" id=\"2\">\r\n    <object id=\"1\" x=\"8.5\" y=\"6.25\" width=\"6.75\" height=\"7.25\">\r\n     <ellipse/>\r\n    </object>\r\n    <object id=\"2\" x=\"-1\" y=\"0.25\" width=\"11.5\" height=\"12.75\">\r\n     <ellipse/>\r\n    </object>\r\n   </objectgroup>\r\n  </tile>\r\n  <tile id=\"57\">\r\n   <objectgroup draworder=\"index\" id=\"2\">\r\n    <object id=\"1\" x=\"2.75\" y=\"3\">\r\n     <point/>\r\n    </object>\r\n    <object id=\"2\" x=\"12\" y=\"1.5\">\r\n     <point/>\r\n    </object>\r\n    <object id=\"3\" x=\"4.75\" y=\"9.5\">\r\n     <point/>\r\n    </object>\r\n    <object id=\"4\" x=\"10.5\" y=\"9.5\">\r\n     <point/>\r\n    </object>\r\n   </objectgroup>\r\n  </tile>\r\n  <tile id=\"93\" type=\"coin\">\r\n   <properties>\r\n    <property name=\"object prop\" value=\"some prop\"/>\r\n   </properties>\r\n   <objectgroup draworder=\"index\" id=\"2\">\r\n    <object id=\"1\" x=\"3\" y=\"2\" width=\"10\" height=\"12\"/>\r\n   </objectgroup>\r\n  </tile>\r\n  <tile id=\"128\" probability=\"0.5\">\r\n   <properties>\r\n    <property name=\"props\" value=\"animation\"/>\r\n   </properties>\r\n   <animation>\r\n    <frame tileid=\"127\" duration=\"500\"/>\r\n    <frame tileid=\"115\" duration=\"500\"/>\r\n    <frame tileid=\"116\" duration=\"500\"/>\r\n    <frame tileid=\"117\" duration=\"500\"/>\r\n    <frame tileid=\"118\" duration=\"500\"/>\r\n    <frame tileid=\"119\" duration=\"500\"/>\r\n    <frame tileid=\"128\" duration=\"500\"/>\r\n    <frame tileid=\"129\" duration=\"500\"/>\r\n    <frame tileid=\"130\" duration=\"500\"/>\r\n    <frame tileid=\"131\" duration=\"500\"/>\r\n   </animation>\r\n  </tile>\r\n </tileset>\r\n <layer id=\"1\" name=\"Ground\" class=\"ground-class\" width=\"10\" height=\"10\">\r\n  <properties>\r\n   <property name=\"boolean\" type=\"bool\" value=\"false\"/>\r\n   <property name=\"file-prop\" type=\"file\" value=\"Cloud.png\"/>\r\n   <property name=\"float-prop\" type=\"float\" value=\"123\"/>\r\n   <property name=\"int-prop\" type=\"int\" value=\"14\"/>\r\n   <property name=\"multiline\">Multiline string\r\nshould\r\nnot break\r\nthe \r\nparser\r\n\r\n!!!</property>\r\n   <property name=\"obj\" type=\"object\" value=\"1\"/>\r\n   <property name=\"some-color\" type=\"color\" value=\"#ff55aa00\"/>\r\n   <property name=\"string-prop\" value=\"some-string\"/>\r\n  </properties>\r\n  <data encoding=\"csv\">\r\n2,3,3,2,2,3,1,3,2,1,\r\n3,2,1,1,1,2,2,3,3,3,\r\n2,1,2,1,1,2,3,1,2,2,\r\n3,1,3,3,2,1,2,2,3,3,\r\n1,3,1,1,2,1,3,3,3,2,\r\n3,1,2,1,2,3,2,2,2,1,\r\n2,1,2,3,2,1,2,1,1,3,\r\n2,1,13,14,14,14,14,15,2,1,\r\n3,2,25,26,26,26,26,27,2,1,\r\n3,2,37,38,38,38,38,39,3,2\r\n</data>\r\n </layer>\r\n <layer id=\"2\" name=\"PlayerLayer\" width=\"10\" height=\"10\">\r\n  <properties>\r\n   <property name=\"solid\" type=\"bool\" value=\"true\"/>\r\n  </properties>\r\n  <data encoding=\"csv\">\r\n58,0,0,0,0,0,0,0,0,0,\r\n0,45,46,46,46,46,46,47,0,0,\r\n0,57,0,0,0,0,0,59,0,0,\r\n0,57,0,49,50,50,52,51,0,0,\r\n0,57,0,61,62,62,64,63,0,0,\r\n0,57,0,73,74,86,74,76,0,0,\r\n0,69,83,0,0,0,0,30,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n17,0,0,0,0,0,0,0,105,0,\r\n29,29,0,94,0,0,0,0,0,129\r\n</data>\r\n </layer>\r\n <layer id=\"3\" name=\"Above\" width=\"10\" height=\"10\">\r\n  <data encoding=\"csv\">\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n5,0,0,0,0,0,0,0,93,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0\r\n</data>\r\n </layer>\r\n <layer id=\"5\" name=\"InvisibleLayer\" width=\"10\" height=\"10\" visible=\"0\">\r\n  <data encoding=\"csv\">\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,130,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0\r\n</data>\r\n </layer>\r\n <objectgroup id=\"4\" name=\"Objects\" class=\"object\" tintcolor=\"#ff0000\">\r\n  <properties>\r\n   <property name=\"props\" value=\"stuff\"/>\r\n  </properties>\r\n  <object id=\"1\" name=\"Camera\" x=\"87.3333\" y=\"102.667\">\r\n   <properties>\r\n    <property name=\"camera\" type=\"bool\" value=\"true\"/>\r\n    <property name=\"zoom\" type=\"float\" value=\"5\"/>\r\n   </properties>\r\n   <point/>\r\n  </object>\r\n  <object id=\"3\" name=\"Rectangle\" x=\"47.3333\" y=\"125.333\" width=\"71.3333\" height=\"18\">\r\n   <properties>\r\n    <property name=\"other property\" value=\"prop\"/>\r\n   </properties>\r\n  </object>\r\n  <object id=\"4\" gid=\"3221225578\" x=\"27.6667\" y=\"138.333\" width=\"16\" height=\"16\" rotation=\"-59\">\r\n   <properties>\r\n    <property name=\"string prop\" value=\"struing\"/>\r\n   </properties>\r\n  </object>\r\n  <object id=\"5\" x=\"40.6667\" y=\"0.833333\" width=\"80\" height=\"17\">\r\n   <text wrap=\"1\">Hello World</text>\r\n  </object>\r\n  <object id=\"6\" gid=\"129\" x=\"143.667\" y=\"112\" width=\"16\" height=\"16\"/>\r\n </objectgroup>\r\n <imagelayer id=\"7\" name=\"Clouds 2\" class=\"OtherClouds\" opacity=\"0.5\" offsetx=\"177\" offsety=\"-17\" parallaxx=\"1.9\" parallaxy=\"1.4\">\r\n  <image source=\"Cloud.png\" width=\"100\" height=\"100\"/>\r\n </imagelayer>\r\n <imagelayer id=\"6\" name=\"Clouds\" class=\"SomeClouds\" opacity=\"0.6\" offsetx=\"-103\" offsety=\"38\" parallaxx=\"0.5\" parallaxy=\"0.5\">\r\n  <image source=\"Cloud.png\" trans=\"ffffff\" width=\"100\" height=\"100\"/>\r\n  <properties>\r\n   <property name=\"someprop\" value=\"a prop\"/>\r\n  </properties>\r\n </imagelayer>\r\n</map>\r\n");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/orthogonal-infinite.tmj":
/*!*************************************************************!*\
  !*** ./test/unit/tiled/parser-spec/orthogonal-infinite.tmj ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{ \"backgroundcolor\":\"#22b2b2\",\r\n \"class\":\"map-class\",\r\n \"compressionlevel\":-1,\r\n \"height\":17,\r\n \"infinite\":true,\r\n \"layers\":[\r\n        {\r\n         \"chunks\":[\r\n                {\r\n                 \"data\":[0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\r\n                    0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\r\n                    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\r\n                    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\r\n                    2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 3, 1, 3, 2, 2, 2,\r\n                    2, 2, 2, 2, 2, 3, 2, 1, 1, 1, 2, 2, 3, 3, 2, 2,\r\n                    2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 3, 1, 2, 2, 2,\r\n                    2, 2, 2, 2, 2, 3, 1, 3, 3, 2, 1, 2, 2, 3, 3, 2,\r\n                    2, 2, 2, 2, 2, 1, 3, 1, 1, 2, 1, 3, 3, 3, 2, 2,\r\n                    2, 2, 2, 2, 2, 3, 1, 2, 1, 2, 3, 2, 2, 2, 1, 2,\r\n                    2, 2, 2, 2, 2, 2, 1, 2, 3, 2, 1, 2, 1, 1, 3, 2,\r\n                    2, 2, 2, 2, 2, 2, 1, 13, 14, 14, 14, 14, 15, 2, 1, 2,\r\n                    2, 2, 2, 2, 2, 3, 2, 25, 26, 26, 26, 26, 27, 2, 1, 2,\r\n                    0, 2, 2, 2, 2, 3, 2, 37, 38, 38, 38, 38, 39, 3, 2, 2,\r\n                    0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\r\n                    0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n                 \"height\":16,\r\n                 \"width\":16,\r\n                 \"x\":0,\r\n                 \"y\":0\r\n                }, \r\n                {\r\n                 \"data\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                 \"height\":16,\r\n                 \"width\":16,\r\n                 \"x\":16,\r\n                 \"y\":0\r\n                }, \r\n                {\r\n                 \"data\":[0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                 \"height\":16,\r\n                 \"width\":16,\r\n                 \"x\":0,\r\n                 \"y\":16\r\n                }],\r\n         \"class\":\"ground-class\",\r\n         \"height\":32,\r\n         \"id\":1,\r\n         \"name\":\"Ground\",\r\n         \"opacity\":1,\r\n         \"startx\":0,\r\n         \"starty\":0,\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":true,\r\n         \"width\":32,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"chunks\":[\r\n                {\r\n                 \"data\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                 \"height\":16,\r\n                 \"width\":16,\r\n                 \"x\":0,\r\n                 \"y\":0\r\n                }],\r\n         \"height\":16,\r\n         \"id\":2,\r\n         \"name\":\"PlayerLayer\",\r\n         \"opacity\":1,\r\n         \"properties\":[\r\n                {\r\n                 \"name\":\"solid\",\r\n                 \"type\":\"bool\",\r\n                 \"value\":true\r\n                }],\r\n         \"startx\":0,\r\n         \"starty\":0,\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":true,\r\n         \"width\":16,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }],\r\n \"nextlayerid\":9,\r\n \"nextobjectid\":7,\r\n \"orientation\":\"orthogonal\",\r\n \"parallaxoriginx\":94,\r\n \"parallaxoriginy\":58,\r\n \"renderorder\":\"right-down\",\r\n \"tiledversion\":\"1.10.2\",\r\n \"tileheight\":16,\r\n \"tilesets\":[\r\n        {\r\n         \"class\":\"TilesetClass\",\r\n         \"columns\":12,\r\n         \"firstgid\":1,\r\n         \"image\":\"tilemap_packed.png\",\r\n         \"imageheight\":176,\r\n         \"imagewidth\":192,\r\n         \"margin\":0,\r\n         \"name\":\"Embedded\",\r\n         \"properties\":[\r\n                {\r\n                 \"name\":\"tilesetprop\",\r\n                 \"type\":\"string\",\r\n                 \"value\":\"some prop here\"\r\n                }],\r\n         \"spacing\":0,\r\n         \"tilecount\":132,\r\n         \"tileheight\":16,\r\n         \"tiles\":[\r\n                {\r\n                 \"id\":29,\r\n                 \"objectgroup\":\r\n                    {\r\n                     \"draworder\":\"index\",\r\n                     \"id\":2,\r\n                     \"name\":\"\",\r\n                     \"objects\":[\r\n                            {\r\n                             \"ellipse\":true,\r\n                             \"height\":7.25,\r\n                             \"id\":1,\r\n                             \"name\":\"\",\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":6.75,\r\n                             \"x\":8.5,\r\n                             \"y\":6.25\r\n                            }, \r\n                            {\r\n                             \"ellipse\":true,\r\n                             \"height\":12.75,\r\n                             \"id\":2,\r\n                             \"name\":\"\",\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":11.5,\r\n                             \"x\":-1,\r\n                             \"y\":0.25\r\n                            }],\r\n                     \"opacity\":1,\r\n                     \"type\":\"objectgroup\",\r\n                     \"visible\":true,\r\n                     \"x\":0,\r\n                     \"y\":0\r\n                    }\r\n                }, \r\n                {\r\n                 \"id\":57,\r\n                 \"objectgroup\":\r\n                    {\r\n                     \"draworder\":\"index\",\r\n                     \"id\":2,\r\n                     \"name\":\"\",\r\n                     \"objects\":[\r\n                            {\r\n                             \"height\":0,\r\n                             \"id\":1,\r\n                             \"name\":\"\",\r\n                             \"point\":true,\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":0,\r\n                             \"x\":2.75,\r\n                             \"y\":3\r\n                            }, \r\n                            {\r\n                             \"height\":0,\r\n                             \"id\":2,\r\n                             \"name\":\"\",\r\n                             \"point\":true,\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":0,\r\n                             \"x\":12,\r\n                             \"y\":1.5\r\n                            }, \r\n                            {\r\n                             \"height\":0,\r\n                             \"id\":3,\r\n                             \"name\":\"\",\r\n                             \"point\":true,\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":0,\r\n                             \"x\":4.75,\r\n                             \"y\":9.5\r\n                            }, \r\n                            {\r\n                             \"height\":0,\r\n                             \"id\":4,\r\n                             \"name\":\"\",\r\n                             \"point\":true,\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":0,\r\n                             \"x\":10.5,\r\n                             \"y\":9.5\r\n                            }],\r\n                     \"opacity\":1,\r\n                     \"type\":\"objectgroup\",\r\n                     \"visible\":true,\r\n                     \"x\":0,\r\n                     \"y\":0\r\n                    }\r\n                }, \r\n                {\r\n                 \"id\":93,\r\n                 \"objectgroup\":\r\n                    {\r\n                     \"draworder\":\"index\",\r\n                     \"id\":2,\r\n                     \"name\":\"\",\r\n                     \"objects\":[\r\n                            {\r\n                             \"height\":12,\r\n                             \"id\":1,\r\n                             \"name\":\"\",\r\n                             \"rotation\":0,\r\n                             \"type\":\"\",\r\n                             \"visible\":true,\r\n                             \"width\":10,\r\n                             \"x\":3,\r\n                             \"y\":2\r\n                            }],\r\n                     \"opacity\":1,\r\n                     \"type\":\"objectgroup\",\r\n                     \"visible\":true,\r\n                     \"x\":0,\r\n                     \"y\":0\r\n                    },\r\n                 \"properties\":[\r\n                        {\r\n                         \"name\":\"object prop\",\r\n                         \"type\":\"string\",\r\n                         \"value\":\"some prop\"\r\n                        }],\r\n                 \"type\":\"coin\"\r\n                }, \r\n                {\r\n                 \"animation\":[\r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":127\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":115\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":116\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":117\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":118\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":119\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":128\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":129\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":130\r\n                        }, \r\n                        {\r\n                         \"duration\":500,\r\n                         \"tileid\":131\r\n                        }],\r\n                 \"id\":128,\r\n                 \"probability\":0.5,\r\n                 \"properties\":[\r\n                        {\r\n                         \"name\":\"props\",\r\n                         \"type\":\"string\",\r\n                         \"value\":\"animation\"\r\n                        }]\r\n                }],\r\n         \"tilewidth\":16\r\n        }],\r\n \"tilewidth\":16,\r\n \"type\":\"map\",\r\n \"version\":\"1.10\",\r\n \"width\":19\r\n}");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/orthogonal-infinite.tmx":
/*!*************************************************************!*\
  !*** ./test/unit/tiled/parser-spec/orthogonal-infinite.tmx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<map version=\"1.10\" tiledversion=\"1.10.2\" class=\"map-class\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"19\" height=\"17\" tilewidth=\"16\" tileheight=\"16\" infinite=\"1\" parallaxoriginx=\"94\" parallaxoriginy=\"58\" backgroundcolor=\"#22b2b2\" nextlayerid=\"9\" nextobjectid=\"7\">\r\n <editorsettings>\r\n  <export target=\"orthogonal-infinite.tmj\" format=\"json\"/>\r\n </editorsettings>\r\n <tileset firstgid=\"1\" name=\"Embedded\" class=\"TilesetClass\" tilewidth=\"16\" tileheight=\"16\" tilecount=\"132\" columns=\"12\">\r\n  <properties>\r\n   <property name=\"tilesetprop\" value=\"some prop here\"/>\r\n  </properties>\r\n  <image source=\"tilemap_packed.png\" width=\"192\" height=\"176\"/>\r\n  <tile id=\"29\">\r\n   <objectgroup draworder=\"index\" id=\"2\">\r\n    <object id=\"1\" x=\"8.5\" y=\"6.25\" width=\"6.75\" height=\"7.25\">\r\n     <ellipse/>\r\n    </object>\r\n    <object id=\"2\" x=\"-1\" y=\"0.25\" width=\"11.5\" height=\"12.75\">\r\n     <ellipse/>\r\n    </object>\r\n   </objectgroup>\r\n  </tile>\r\n  <tile id=\"57\">\r\n   <objectgroup draworder=\"index\" id=\"2\">\r\n    <object id=\"1\" x=\"2.75\" y=\"3\">\r\n     <point/>\r\n    </object>\r\n    <object id=\"2\" x=\"12\" y=\"1.5\">\r\n     <point/>\r\n    </object>\r\n    <object id=\"3\" x=\"4.75\" y=\"9.5\">\r\n     <point/>\r\n    </object>\r\n    <object id=\"4\" x=\"10.5\" y=\"9.5\">\r\n     <point/>\r\n    </object>\r\n   </objectgroup>\r\n  </tile>\r\n  <tile id=\"93\" type=\"coin\">\r\n   <properties>\r\n    <property name=\"object prop\" value=\"some prop\"/>\r\n   </properties>\r\n   <objectgroup draworder=\"index\" id=\"2\">\r\n    <object id=\"1\" x=\"3\" y=\"2\" width=\"10\" height=\"12\"/>\r\n   </objectgroup>\r\n  </tile>\r\n  <tile id=\"128\" probability=\"0.5\">\r\n   <properties>\r\n    <property name=\"props\" value=\"animation\"/>\r\n   </properties>\r\n   <animation>\r\n    <frame tileid=\"127\" duration=\"500\"/>\r\n    <frame tileid=\"115\" duration=\"500\"/>\r\n    <frame tileid=\"116\" duration=\"500\"/>\r\n    <frame tileid=\"117\" duration=\"500\"/>\r\n    <frame tileid=\"118\" duration=\"500\"/>\r\n    <frame tileid=\"119\" duration=\"500\"/>\r\n    <frame tileid=\"128\" duration=\"500\"/>\r\n    <frame tileid=\"129\" duration=\"500\"/>\r\n    <frame tileid=\"130\" duration=\"500\"/>\r\n    <frame tileid=\"131\" duration=\"500\"/>\r\n   </animation>\r\n  </tile>\r\n </tileset>\r\n <layer id=\"1\" name=\"Ground\" class=\"ground-class\" width=\"19\" height=\"17\">\r\n  <data encoding=\"csv\">\r\n   <chunk x=\"0\" y=\"0\" width=\"16\" height=\"16\">\r\n0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,\r\n0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,\r\n2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,\r\n2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,\r\n2,2,2,2,2,2,3,3,2,2,3,1,3,2,2,2,\r\n2,2,2,2,2,3,2,1,1,1,2,2,3,3,2,2,\r\n2,2,2,2,2,2,1,2,1,1,2,3,1,2,2,2,\r\n2,2,2,2,2,3,1,3,3,2,1,2,2,3,3,2,\r\n2,2,2,2,2,1,3,1,1,2,1,3,3,3,2,2,\r\n2,2,2,2,2,3,1,2,1,2,3,2,2,2,1,2,\r\n2,2,2,2,2,2,1,2,3,2,1,2,1,1,3,2,\r\n2,2,2,2,2,2,1,13,14,14,14,14,15,2,1,2,\r\n2,2,2,2,2,3,2,25,26,26,26,26,27,2,1,2,\r\n0,2,2,2,2,3,2,37,38,38,38,38,39,3,2,2,\r\n0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,\r\n0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2\r\n</chunk>\r\n   <chunk x=\"16\" y=\"0\" width=\"16\" height=\"16\">\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\r\n</chunk>\r\n   <chunk x=\"0\" y=\"16\" width=\"16\" height=\"16\">\r\n0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\r\n</chunk>\r\n  </data>\r\n </layer>\r\n <layer id=\"2\" name=\"PlayerLayer\" width=\"19\" height=\"17\">\r\n  <properties>\r\n   <property name=\"solid\" type=\"bool\" value=\"true\"/>\r\n  </properties>\r\n  <data encoding=\"csv\">\r\n   <chunk x=\"0\" y=\"0\" width=\"16\" height=\"16\">\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\r\n</chunk>\r\n  </data>\r\n </layer>\r\n</map>\r\n");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/orthogonal-simple.tmj":
/*!***********************************************************!*\
  !*** ./test/unit/tiled/parser-spec/orthogonal-simple.tmj ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("{ \"backgroundcolor\":\"#22b2b2\",\r\n \"class\":\"map-class\",\r\n \"compressionlevel\":-1,\r\n \"height\":10,\r\n \"infinite\":false,\r\n \"layers\":[\r\n        {\r\n         \"class\":\"ground-class\",\r\n         \"data\":[2, 3, 3, 2, 2, 3, 1, 3, 2, 1,\r\n            3, 2, 1, 1, 1, 2, 2, 3, 3, 3,\r\n            2, 1, 2, 1, 1, 2, 3, 1, 2, 2,\r\n            3, 1, 3, 3, 2, 1, 2, 2, 3, 3,\r\n            1, 3, 1, 1, 2, 1, 3, 3, 3, 2,\r\n            3, 1, 2, 1, 2, 3, 2, 2, 2, 1,\r\n            2, 1, 2, 3, 2, 1, 2, 1, 1, 3,\r\n            2, 1, 13, 14, 14, 14, 14, 15, 2, 1,\r\n            3, 2, 25, 26, 26, 26, 26, 27, 2, 1,\r\n            3, 2, 37, 38, 38, 38, 38, 39, 3, 2],\r\n         \"height\":10,\r\n         \"id\":1,\r\n         \"name\":\"Ground\",\r\n         \"opacity\":1,\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":true,\r\n         \"width\":10,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"data\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 45, 46, 46, 46, 46, 46, 47, 0, 0,\r\n            0, 57, 0, 0, 0, 0, 0, 59, 0, 0,\r\n            0, 57, 0, 49, 50, 50, 52, 51, 0, 0,\r\n            0, 57, 0, 61, 62, 62, 64, 63, 0, 0,\r\n            0, 57, 0, 73, 74, 86, 74, 76, 0, 0,\r\n            0, 69, 83, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            17, 0, 0, 0, 0, 0, 0, 0, 105, 0,\r\n            29, 29, 0, 0, 0, 0, 0, 0, 0, 0],\r\n         \"height\":10,\r\n         \"id\":2,\r\n         \"name\":\"PlayerLayer\",\r\n         \"opacity\":1,\r\n         \"properties\":[\r\n                {\r\n                 \"name\":\"solid\",\r\n                 \"type\":\"bool\",\r\n                 \"value\":true\r\n                }],\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":true,\r\n         \"width\":10,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"data\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            5, 0, 0, 0, 0, 0, 0, 0, 93, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n         \"height\":10,\r\n         \"id\":3,\r\n         \"name\":\"Above\",\r\n         \"opacity\":1,\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":true,\r\n         \"width\":10,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"data\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 130, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n         \"height\":10,\r\n         \"id\":5,\r\n         \"name\":\"InvisibleLayer\",\r\n         \"opacity\":1,\r\n         \"type\":\"tilelayer\",\r\n         \"visible\":false,\r\n         \"width\":10,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }, \r\n        {\r\n         \"draworder\":\"topdown\",\r\n         \"id\":4,\r\n         \"name\":\"Objects\",\r\n         \"objects\":[\r\n                {\r\n                 \"height\":0,\r\n                 \"id\":1,\r\n                 \"name\":\"Camera\",\r\n                 \"point\":true,\r\n                 \"properties\":[\r\n                        {\r\n                         \"name\":\"camera\",\r\n                         \"type\":\"bool\",\r\n                         \"value\":true\r\n                        }, \r\n                        {\r\n                         \"name\":\"zoom\",\r\n                         \"type\":\"float\",\r\n                         \"value\":5\r\n                        }],\r\n                 \"rotation\":0,\r\n                 \"type\":\"\",\r\n                 \"visible\":true,\r\n                 \"width\":0,\r\n                 \"x\":87.3333333333333,\r\n                 \"y\":102.666666666667\r\n                }],\r\n         \"opacity\":1,\r\n         \"type\":\"objectgroup\",\r\n         \"visible\":true,\r\n         \"x\":0,\r\n         \"y\":0\r\n        }],\r\n \"nextlayerid\":6,\r\n \"nextobjectid\":2,\r\n \"orientation\":\"orthogonal\",\r\n \"renderorder\":\"right-down\",\r\n \"tiledversion\":\"1.10.2\",\r\n \"tileheight\":16,\r\n \"tilesets\":[\r\n        {\r\n         \"columns\":12,\r\n         \"firstgid\":1,\r\n         \"image\":\"tilemap_packed.png\",\r\n         \"imageheight\":176,\r\n         \"imagewidth\":192,\r\n         \"margin\":0,\r\n         \"name\":\"Embedded\",\r\n         \"spacing\":0,\r\n         \"tilecount\":132,\r\n         \"tileheight\":16,\r\n         \"tilewidth\":16\r\n        }],\r\n \"tilewidth\":16,\r\n \"type\":\"map\",\r\n \"version\":\"1.10\",\r\n \"width\":10\r\n}");

/***/ }),

/***/ "./test/unit/tiled/parser-spec/orthogonal-simple.tmx":
/*!***********************************************************!*\
  !*** ./test/unit/tiled/parser-spec/orthogonal-simple.tmx ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<map version=\"1.10\" tiledversion=\"1.10.2\" class=\"map-class\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"10\" height=\"10\" tilewidth=\"16\" tileheight=\"16\" infinite=\"0\" backgroundcolor=\"#22b2b2\" nextlayerid=\"6\" nextobjectid=\"2\">\r\n <tileset firstgid=\"1\" name=\"Embedded\" tilewidth=\"16\" tileheight=\"16\" tilecount=\"132\" columns=\"12\">\r\n  <image source=\"tilemap_packed.png\" width=\"192\" height=\"176\"/>\r\n </tileset>\r\n <layer id=\"1\" name=\"Ground\" class=\"ground-class\" width=\"10\" height=\"10\">\r\n  <data encoding=\"csv\">\r\n2,3,3,2,2,3,1,3,2,1,\r\n3,2,1,1,1,2,2,3,3,3,\r\n2,1,2,1,1,2,3,1,2,2,\r\n3,1,3,3,2,1,2,2,3,3,\r\n1,3,1,1,2,1,3,3,3,2,\r\n3,1,2,1,2,3,2,2,2,1,\r\n2,1,2,3,2,1,2,1,1,3,\r\n2,1,13,14,14,14,14,15,2,1,\r\n3,2,25,26,26,26,26,27,2,1,\r\n3,2,37,38,38,38,38,39,3,2\r\n</data>\r\n </layer>\r\n <layer id=\"2\" name=\"PlayerLayer\" width=\"10\" height=\"10\">\r\n  <properties>\r\n   <property name=\"solid\" type=\"bool\" value=\"true\"/>\r\n  </properties>\r\n  <data encoding=\"csv\">\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,45,46,46,46,46,46,47,0,0,\r\n0,57,0,0,0,0,0,59,0,0,\r\n0,57,0,49,50,50,52,51,0,0,\r\n0,57,0,61,62,62,64,63,0,0,\r\n0,57,0,73,74,86,74,76,0,0,\r\n0,69,83,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n17,0,0,0,0,0,0,0,105,0,\r\n29,29,0,0,0,0,0,0,0,0\r\n</data>\r\n </layer>\r\n <layer id=\"3\" name=\"Above\" width=\"10\" height=\"10\">\r\n  <data encoding=\"csv\">\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n5,0,0,0,0,0,0,0,93,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0\r\n</data>\r\n </layer>\r\n <layer id=\"5\" name=\"InvisibleLayer\" width=\"10\" height=\"10\" visible=\"0\">\r\n  <data encoding=\"csv\">\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,130,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0\r\n</data>\r\n </layer>\r\n <objectgroup id=\"4\" name=\"Objects\">\r\n  <object id=\"1\" name=\"Camera\" x=\"87.3333\" y=\"102.667\">\r\n   <properties>\r\n    <property name=\"camera\" type=\"bool\" value=\"true\"/>\r\n    <property name=\"zoom\" type=\"float\" value=\"5\"/>\r\n   </properties>\r\n   <point/>\r\n  </object>\r\n </objectgroup>\r\n</map>\r\n");

/***/ }),

/***/ "./test/unit/tiled/tiled-resource-spec/invalid.tmx":
/*!*********************************************************!*\
  !*** ./test/unit/tiled/tiled-resource-spec/invalid.tmx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<map>\r\n <tileset name=\"fantasy\">\r\n  <image source=\"tilemap_packed.png\" width=\"192\" height=\"176\"/>\r\n  <tile id=\"2\" type=\"tileclass\">\r\n   <properties>\r\n    <property name=\"tileprop\" value=\"someprop\"/>\r\n   </properties>\r\n  </tile>\r\n  <tile id=\"105\" type=\"Collectable\"/>\r\n  <tile id=\"119\" type=\"Collectable\">\r\n   <properties>\r\n    <property name=\"item\" value=\"arrow\"/>\r\n   </properties>\r\n   <objectgroup draworder=\"index\" id=\"2\">\r\n    <object id=\"1\" x=\"0\" y=\"0\" width=\"16\" height=\"16\"/>\r\n   </objectgroup>\r\n  </tile>\r\n </tileset>\r\n <tileset firstgid=\"133\" source=\"external-fantasy.tsx\"/>\r\n <tileset firstgid=\"265\" source=\"external-fantasy.tsj\"/>\r\n <layer id=\"1\">\r\n  <data encoding=\"csv\">\r\n3,1,3,1,1,3,2,1,2,3,\r\n2,1,2,1,1,1,2,2,2,3,\r\n1,3,1,2,1,2,3,3,3,3,\r\n1,3,1,3,1,2,1,3,1,1,\r\n2,1,3,1,3,3,2,3,2,3,\r\n3,2,1,3,1,2,2,1,1,3,\r\n3,1,2,2,1,3,3,1,1,1,\r\n3,3,3,3,1,3,1,1,1,2,\r\n1,3,2,1,2,3,2,1,3,2,\r\n2,1,1,2,3,3,1,3,3,2\r\n</data>\r\n </layer>\r\n <layer id=\"2\" name=\"Solid\" width=\"10\" height=\"10\">\r\n  <properties>\r\n   <property name=\"solid\" type=\"bool\" value=\"true\"/>\r\n  </properties>\r\n  <data encoding=\"csv\">\r\n4,0,0,0,0,0,0,0,0,4,\r\n16,0,0,0,0,0,0,0,0,16,\r\n0,0,0,0,0,0,185,186,187,188,\r\n0,0,0,0,0,0,197,198,199,200,\r\n0,0,0,0,0,0,209,210,211,212,\r\n0,237,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,150,0,0,0,228,0,0,\r\n4,0,0,0,0,0,0,0,0,4,\r\n16,0,0,0,0,0,0,0,0,16\r\n</data>\r\n </layer>\r\n <layer id=\"4\" name=\"Above\" class=\"SomeTileLayer\" width=\"10\" height=\"10\">\r\n  <properties>\r\n   <property name=\"above\" value=\"here\"/>\r\n  </properties>\r\n  <data encoding=\"csv\">\r\n0,359,0,0,0,0,0,0,0,0,\r\n0,359,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,225,0,0,0,0,0,0,222,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0\r\n</data>\r\n </layer>\r\n <imagelayer id=\"6\" name=\"ImageLayer\" class=\"SomeImageLayer\">\r\n  <properties>\r\n   <property name=\"answer\" type=\"float\" value=\"42\"/>\r\n  </properties>\r\n </imagelayer>\r\n <objectgroup id=\"3\" name=\"Objects\" class=\"SomeObjectLayer\">\r\n  <properties>\r\n   <property name=\"object\" type=\"bool\" value=\"true\"/>\r\n  </properties>\r\n  <object id=\"1\" name=\"camera\" x=\"79.25\" y=\"77.75\">\r\n   <properties>\r\n    <property name=\"camera\" type=\"bool\" value=\"true\"/>\r\n    <property name=\"zoom\" type=\"float\" value=\"6\"/>\r\n   </properties>\r\n   <point/>\r\n  </object>\r\n  <object id=\"2\" template=\"coin.tx\" x=\"47.75\" y=\"80\"/>\r\n  <object id=\"3\" name=\"Player\" type=\"player-start\" x=\"38.9091\" y=\"40\">\r\n   <point/>\r\n  </object>\r\n  <object id=\"4\" name=\"Arrow\" gid=\"120\" x=\"128.134\" y=\"111.847\" width=\"16\" height=\"16\">\r\n   <properties>\r\n    <property name=\"otherprop\" value=\"something else\"/>\r\n   </properties>\r\n  </object>\r\n </objectgroup>\r\n <objectgroup id=\"5\" name=\"OtherObjects\">\r\n  <object/>\r\n  <object id=\"6\" x=\"7.64411\" y=\"54.8872\">\r\n   <point/>\r\n  </object>\r\n  <object id=\"7\" x=\"96.4912\" y=\"144.486\" width=\"15.0376\" height=\"15.0376\">\r\n   <ellipse/>\r\n  </object>\r\n  <object id=\"8\" x=\"21.9298\" y=\"133.333\">\r\n   <polygon points=\"0,0 9.3985,-22.5564 19.9248,-4.01003 39.2231,-0.125313 19.0476,8.5213 31.8296,21.1779 5.51378,12.1554 0.75188,18.4211 4.63659,2.75689\"/>\r\n  </object>\r\n </objectgroup>\r\n</map>\r\n");

/***/ }),

/***/ "./node_modules/set-function-length/index.js":
/*!***************************************************!*\
  !*** ./node_modules/set-function-length/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var define = __webpack_require__(/*! define-data-property */ "./node_modules/define-data-property/index.js");
var hasDescriptors = __webpack_require__(/*! has-property-descriptors */ "./node_modules/has-property-descriptors/index.js")();
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");

var $TypeError = GetIntrinsic('%TypeError%');
var $floor = GetIntrinsic('%Math.floor%');

module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(fn, 'length', length, true, true);
		} else {
			define(fn, 'length', length);
		}
	}
	return fn;
};


/***/ }),

/***/ "./node_modules/strnum/strnum.js":
/*!***************************************!*\
  !*** ./node_modules/strnum/strnum.js ***!
  \***************************************/
/***/ ((module) => {

const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
const numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
// const octRegex = /0x[a-z0-9]+/;
// const binRegex = /0x[a-z0-9]+/;


//polyfill
if (!Number.parseInt && window.parseInt) {
    Number.parseInt = window.parseInt;
}
if (!Number.parseFloat && window.parseFloat) {
    Number.parseFloat = window.parseFloat;
}

  
const consider = {
    hex :  true,
    leadingZeros: true,
    decimalPoint: "\.",
    eNotation: true
    //skipLike: /regex/
};

function toNumber(str, options = {}){
    // const options = Object.assign({}, consider);
    // if(opt.leadingZeros === false){
    //     options.leadingZeros = false;
    // }else if(opt.hex === false){
    //     options.hex = false;
    // }

    options = Object.assign({}, consider, options );
    if(!str || typeof str !== "string" ) return str;
    
    let trimmedStr  = str.trim();
    // if(trimmedStr === "0.0") return 0;
    // else if(trimmedStr === "+0.0") return 0;
    // else if(trimmedStr === "-0.0") return -0;

    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;
    else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
    // } else if (options.parseOct && octRegex.test(str)) {
    //     return Number.parseInt(val, 8);
    // }else if (options.parseBin && binRegex.test(str)) {
    //     return Number.parseInt(val, 2);
    }else{
        //separate negative sign, leading zeros, and rest number
        const match = numRegex.exec(trimmedStr);
        if(match){
            const sign = match[1];
            const leadingZeros = match[2];
            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros
            //trim ending zeros for floating number
            
            const eNotation = match[4] || match[6];
            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str; //-0123
            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str; //0123
            else{//no leading zeros or leading zeros are allowed
                const num = Number(trimmedStr);
                const numStr = "" + num;
                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation
                    if(options.eNotation) return num;
                    else return str;
                }else if(eNotation){ //given number has enotation
                    if(options.eNotation) return num;
                    else return str;
                }else if(trimmedStr.indexOf(".") !== -1){ //floating number
                    // const decimalPart = match[5].substr(1);
                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf("."));

                    
                    // const p = numStr.indexOf(".");
                    // const givenIntPart = numStr.substr(0,p);
                    // const givenDecPart = numStr.substr(p+1);
                    if(numStr === "0" && (numTrimmedByZeros === "") ) return num; //0.0
                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000
                    else if( sign && numStr === "-"+numTrimmedByZeros) return num;
                    else return str;
                }
                
                if(leadingZeros){
                    // if(numTrimmedByZeros === numStr){
                    //     if(options.leadingZeros) return num;
                    //     else return str;
                    // }else return str;
                    if(numTrimmedByZeros === numStr) return num;
                    else if(sign+numTrimmedByZeros === numStr) return num;
                    else return str;
                }

                if(trimmedStr === numStr) return num;
                else if(trimmedStr === sign+numStr) return num;
                // else{
                //     //number with +/- sign
                //     trimmedStr.test(/[-+][0-9]);

                // }
                return str;
            }
            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;
            
        }else{ //non-numeric string
            return str;
        }
    }
}

/**
 * 
 * @param {string} numStr without leading zeros
 * @returns 
 */
function trimZeros(numStr){
    if(numStr && numStr.indexOf(".") !== -1){//float
        numStr = numStr.replace(/0+$/, ""); //remove ending zeros
        if(numStr === ".")  numStr = "0";
        else if(numStr[0] === ".")  numStr = "0"+numStr;
        else if(numStr[numStr.length-1] === ".")  numStr = numStr.substr(0,numStr.length-1);
        return numStr;
    }
    return numStr;
}
module.exports = toNumber


/***/ }),

/***/ "./src/deprecated.ts":
/*!***************************!*\
  !*** ./src/deprecated.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FLIPPED_DIAGONALLY_FLAG: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.FLIPPED_DIAGONALLY_FLAG),
/* harmony export */   FLIPPED_HORIZONTALLY_FLAG: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.FLIPPED_HORIZONTALLY_FLAG),
/* harmony export */   FLIPPED_VERTICALLY_FLAG: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.FLIPPED_VERTICALLY_FLAG),
/* harmony export */   TiledEntity: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledEntity),
/* harmony export */   TiledLayer: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledLayer),
/* harmony export */   TiledLayerComponent: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledLayerComponent),
/* harmony export */   TiledMap: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledMap),
/* harmony export */   TiledMapFormat: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledMapFormat),
/* harmony export */   TiledMapResource: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledMapResource),
/* harmony export */   TiledObject: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledObject),
/* harmony export */   TiledObjectComponent: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledObjectComponent),
/* harmony export */   TiledObjectGroup: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledObjectGroup),
/* harmony export */   TiledTileset: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledTileset),
/* harmony export */   TiledTilesetTile: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.TiledTilesetTile),
/* harmony export */   getCanonicalGid: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.getCanonicalGid),
/* harmony export */   getProperty: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.getProperty),
/* harmony export */   isFlippedDiagonally: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.isFlippedDiagonally),
/* harmony export */   isFlippedHorizontally: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.isFlippedHorizontally),
/* harmony export */   isFlippedVertically: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.isFlippedVertically),
/* harmony export */   parseExternalJson: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.parseExternalJson),
/* harmony export */   parseExternalTsx: () => (/* reexport safe */ _deprecated_index__WEBPACK_IMPORTED_MODULE_0__.parseExternalTsx)
/* harmony export */ });
/* harmony import */ var _deprecated_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deprecated/index */ "./src/deprecated/index.ts");



/***/ }),

/***/ "./src/deprecated/index.ts":
/*!*********************************!*\
  !*** ./src/deprecated/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FLIPPED_DIAGONALLY_FLAG: () => (/* reexport safe */ _tiled_layer__WEBPACK_IMPORTED_MODULE_4__.FLIPPED_DIAGONALLY_FLAG),
/* harmony export */   FLIPPED_HORIZONTALLY_FLAG: () => (/* reexport safe */ _tiled_layer__WEBPACK_IMPORTED_MODULE_4__.FLIPPED_HORIZONTALLY_FLAG),
/* harmony export */   FLIPPED_VERTICALLY_FLAG: () => (/* reexport safe */ _tiled_layer__WEBPACK_IMPORTED_MODULE_4__.FLIPPED_VERTICALLY_FLAG),
/* harmony export */   TiledEntity: () => (/* reexport safe */ _tiled_entity__WEBPACK_IMPORTED_MODULE_3__.TiledEntity),
/* harmony export */   TiledLayer: () => (/* reexport safe */ _tiled_layer__WEBPACK_IMPORTED_MODULE_4__.TiledLayer),
/* harmony export */   TiledLayerComponent: () => (/* reexport safe */ _tiled_layer_component__WEBPACK_IMPORTED_MODULE_8__.TiledLayerComponent),
/* harmony export */   TiledMap: () => (/* reexport safe */ _tiled_map_parser__WEBPACK_IMPORTED_MODULE_2__.TiledMap),
/* harmony export */   TiledMapFormat: () => (/* reexport safe */ _tiled_map_resource__WEBPACK_IMPORTED_MODULE_1__.TiledMapFormat),
/* harmony export */   TiledMapResource: () => (/* reexport safe */ _tiled_map_resource__WEBPACK_IMPORTED_MODULE_1__.TiledMapResource),
/* harmony export */   TiledObject: () => (/* reexport safe */ _tiled_object__WEBPACK_IMPORTED_MODULE_5__.TiledObject),
/* harmony export */   TiledObjectComponent: () => (/* reexport safe */ _tiled_object_component__WEBPACK_IMPORTED_MODULE_7__.TiledObjectComponent),
/* harmony export */   TiledObjectGroup: () => (/* reexport safe */ _tiled_object__WEBPACK_IMPORTED_MODULE_5__.TiledObjectGroup),
/* harmony export */   TiledTileset: () => (/* reexport safe */ _tiled_tileset__WEBPACK_IMPORTED_MODULE_6__.TiledTileset),
/* harmony export */   TiledTilesetTile: () => (/* reexport safe */ _tiled_tileset__WEBPACK_IMPORTED_MODULE_6__.TiledTilesetTile),
/* harmony export */   getCanonicalGid: () => (/* reexport safe */ _tiled_layer__WEBPACK_IMPORTED_MODULE_4__.getCanonicalGid),
/* harmony export */   getProperty: () => (/* reexport safe */ _tiled_entity__WEBPACK_IMPORTED_MODULE_3__.getProperty),
/* harmony export */   isFlippedDiagonally: () => (/* reexport safe */ _tiled_layer__WEBPACK_IMPORTED_MODULE_4__.isFlippedDiagonally),
/* harmony export */   isFlippedHorizontally: () => (/* reexport safe */ _tiled_layer__WEBPACK_IMPORTED_MODULE_4__.isFlippedHorizontally),
/* harmony export */   isFlippedVertically: () => (/* reexport safe */ _tiled_layer__WEBPACK_IMPORTED_MODULE_4__.isFlippedVertically),
/* harmony export */   parseExternalJson: () => (/* reexport safe */ _tiled_tileset__WEBPACK_IMPORTED_MODULE_6__.parseExternalJson),
/* harmony export */   parseExternalTsx: () => (/* reexport safe */ _tiled_tileset__WEBPACK_IMPORTED_MODULE_6__.parseExternalTsx)
/* harmony export */ });
/* harmony import */ var _tiled_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tiled-types */ "./src/deprecated/tiled-types.ts");
/* harmony import */ var _tiled_map_resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tiled-map-resource */ "./src/deprecated/tiled-map-resource.ts");
/* harmony import */ var _tiled_map_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tiled-map-parser */ "./src/deprecated/tiled-map-parser.ts");
/* harmony import */ var _tiled_entity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tiled-entity */ "./src/deprecated/tiled-entity.ts");
/* harmony import */ var _tiled_layer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tiled-layer */ "./src/deprecated/tiled-layer.ts");
/* harmony import */ var _tiled_object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tiled-object */ "./src/deprecated/tiled-object.ts");
/* harmony import */ var _tiled_tileset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tiled-tileset */ "./src/deprecated/tiled-tileset.ts");
/* harmony import */ var _tiled_object_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tiled-object-component */ "./src/deprecated/tiled-object-component.ts");
/* harmony import */ var _tiled_layer_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tiled-layer-component */ "./src/deprecated/tiled-layer-component.ts");
/* harmony import */ var _raw_tiled_layer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./raw-tiled-layer */ "./src/deprecated/raw-tiled-layer.ts");
/* harmony import */ var _raw_tiled_map__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./raw-tiled-map */ "./src/deprecated/raw-tiled-map.ts");
/* harmony import */ var _raw_tiled_object__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./raw-tiled-object */ "./src/deprecated/raw-tiled-object.ts");
/* harmony import */ var _raw_tiled_text__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./raw-tiled-text */ "./src/deprecated/raw-tiled-text.ts");
/* harmony import */ var _raw_tiled_tileset__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./raw-tiled-tileset */ "./src/deprecated/raw-tiled-tileset.ts");
/* harmony import */ var _raw_tileset_tile__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./raw-tileset-tile */ "./src/deprecated/raw-tileset-tile.ts");









// raw data structures








/***/ }),

/***/ "./src/deprecated/raw-tiled-layer.ts":
/*!*******************************************!*\
  !*** ./src/deprecated/raw-tiled-layer.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/deprecated/raw-tiled-map.ts":
/*!*****************************************!*\
  !*** ./src/deprecated/raw-tiled-map.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/deprecated/raw-tiled-object.ts":
/*!********************************************!*\
  !*** ./src/deprecated/raw-tiled-object.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/deprecated/raw-tiled-text.ts":
/*!******************************************!*\
  !*** ./src/deprecated/raw-tiled-text.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/deprecated/raw-tiled-tileset.ts":
/*!*********************************************!*\
  !*** ./src/deprecated/raw-tiled-tileset.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/deprecated/raw-tileset-tile.ts":
/*!********************************************!*\
  !*** ./src/deprecated/raw-tileset-tile.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/deprecated/tiled-entity.ts":
/*!****************************************!*\
  !*** ./src/deprecated/tiled-entity.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledEntity: () => (/* binding */ TiledEntity),
/* harmony export */   getProperty: () => (/* binding */ getProperty)
/* harmony export */ });
/**
 * Get tile entry property by property name
 * @param properties
 * @param prop
 * @returns
 * @deprecated
 */
const getProperty = (properties, prop) => {
    if (Array.isArray(properties)) {
        return properties === null || properties === void 0 ? void 0 : properties.filter(p => { var _a; return ((_a = p.name) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === prop.toLocaleLowerCase(); })[0];
    }
};
/**
 * @deprecated
 */
class TiledEntity {
    constructor() {
        this.properties = [];
    }
    getProperty(prop) {
        return getProperty(this.properties, prop);
    }
}


/***/ }),

/***/ "./src/deprecated/tiled-layer-component.ts":
/*!*************************************************!*\
  !*** ./src/deprecated/tiled-layer-component.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledLayerComponent: () => (/* binding */ TiledLayerComponent)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);

/**
 * @deprecated
 */
// @ts-ignore
class TiledLayerComponent extends excalibur__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(layer) {
        super();
        this.layer = layer;
        this.type = "ex.tiledlayer";
    }
}


/***/ }),

/***/ "./src/deprecated/tiled-layer.ts":
/*!***************************************!*\
  !*** ./src/deprecated/tiled-layer.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FLIPPED_DIAGONALLY_FLAG: () => (/* binding */ FLIPPED_DIAGONALLY_FLAG),
/* harmony export */   FLIPPED_HORIZONTALLY_FLAG: () => (/* binding */ FLIPPED_HORIZONTALLY_FLAG),
/* harmony export */   FLIPPED_VERTICALLY_FLAG: () => (/* binding */ FLIPPED_VERTICALLY_FLAG),
/* harmony export */   TiledLayer: () => (/* binding */ TiledLayer),
/* harmony export */   getCanonicalGid: () => (/* binding */ getCanonicalGid),
/* harmony export */   isFlippedDiagonally: () => (/* binding */ isFlippedDiagonally),
/* harmony export */   isFlippedHorizontally: () => (/* binding */ isFlippedHorizontally),
/* harmony export */   isFlippedVertically: () => (/* binding */ isFlippedVertically)
/* harmony export */ });
/* harmony import */ var _tiled_entity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tiled-entity */ "./src/deprecated/tiled-entity.ts");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_1__);


// Most significant byte of 32 bit id contains flags for flipping
// See https://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tile-flipping
const FLIPPED_HORIZONTALLY_FLAG = 0x80000000;
const FLIPPED_VERTICALLY_FLAG = 0x40000000;
const FLIPPED_DIAGONALLY_FLAG = 0x20000000;
/**
 * Inspects gid for horizontal flag
 * @param gid
 * @deprecated
 */
const isFlippedHorizontally = (gid) => {
    return !!(gid & FLIPPED_HORIZONTALLY_FLAG);
};
/**
 * Inspects gid for vertical flag
 * @param gid
 * @deprecated
 */
const isFlippedVertically = (gid) => {
    return !!(gid & FLIPPED_VERTICALLY_FLAG);
};
/**
 * Inspects gid for diagonal flag (anti-diagonal flip enables tile rotation)
 * @param gid
 * @deprecated
 */
const isFlippedDiagonally = (gid) => {
    return !!(gid & FLIPPED_DIAGONALLY_FLAG);
};
/**
 * Removes bit flags from gid
 * @param gid
 * @deprecated
 */
const getCanonicalGid = (gid) => {
    return gid & ~(FLIPPED_HORIZONTALLY_FLAG |
        FLIPPED_VERTICALLY_FLAG |
        FLIPPED_DIAGONALLY_FLAG);
};
/**
 * @deprecated
 */
class TiledLayer extends _tiled_entity__WEBPACK_IMPORTED_MODULE_0__.TiledEntity {
    constructor() {
        super(...arguments);
        /**
         * Offset of the tile map
         */
        this.offset = excalibur__WEBPACK_IMPORTED_MODULE_1__.Vector.Zero;
        /**
         * Parallax Factor
         */
        this.parallaxFactor = null;
        /**
         * Original encoding of the Tiled layer
         */
        this.encoding = 'csv';
    }
    static parse(layer) {
        var _a, _b, _c, _d, _e, _f;
        if (layer.type !== 'tilelayer')
            throw Error('Cannot parse a non tilelayer type layer');
        const resultLayer = new TiledLayer();
        resultLayer.id = +layer.id;
        resultLayer.name = layer.name;
        resultLayer.data = layer.data;
        resultLayer.offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_1__.vec)((_a = layer.offsetx) !== null && _a !== void 0 ? _a : 0, (_b = layer.offsety) !== null && _b !== void 0 ? _b : 0);
        resultLayer.parallaxFactor = (layer.parallaxx || layer.parallaxy) ? (0,excalibur__WEBPACK_IMPORTED_MODULE_1__.vec)((_c = layer.parallaxx) !== null && _c !== void 0 ? _c : 1, (_d = layer.parallaxy) !== null && _d !== void 0 ? _d : 1) : null;
        resultLayer.width = layer.width;
        resultLayer.height = layer.height;
        resultLayer.encoding = (_e = layer.encoding) !== null && _e !== void 0 ? _e : 'csv';
        resultLayer.compression = layer.compression;
        resultLayer.order = layer.order;
        resultLayer.properties = (_f = layer.properties) !== null && _f !== void 0 ? _f : [];
        resultLayer.rawLayer = layer;
        return resultLayer;
    }
}


/***/ }),

/***/ "./src/deprecated/tiled-map-parser.ts":
/*!********************************************!*\
  !*** ./src/deprecated/tiled-map-parser.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledMap: () => (/* binding */ TiledMap)
/* harmony export */ });
/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-xml-parser */ "./node_modules/fast-xml-parser/src/parser.js");
/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pako */ "./node_modules/pako/index.js");
/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pako__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var zstddec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zstddec */ "./node_modules/zstddec/dist/zstddec.modern.js");
/* harmony import */ var _tiled_layer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tiled-layer */ "./src/deprecated/tiled-layer.ts");
/* harmony import */ var _tiled_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tiled-object */ "./src/deprecated/tiled-object.ts");
/* harmony import */ var _tiled_tileset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tiled-tileset */ "./src/deprecated/tiled-tileset.ts");
// tmx xml parsing

// gzip & zlib

// zstd




/**
 * Responsible for representing the Tiled TileMap in total and parsing from the source Tiled files (tmx)
 * @deprecated
 */
class TiledMap {
    constructor() {
        /**
         * Tile layers in paint order, first layer in the list is drawn first and so forth
         */
        this.layers = [];
        /**
         * Tile set definition for this Tiled map
         */
        this.tileSets = [];
        /**
         * Tiled Objects in this tiled map, used for storing
         */
        this.objectGroups = [];
    }
    /**
     * @deprecated Will be removed in v0.29.0
     */
    getExcaliburObjects() {
        return this.getObjectLayerByProperty('excalibur', true);
    }
    getObjects() {
        var _a;
        return (_a = this.objectGroups.filter(l => { var _a; return !((_a = l.getProperty('excalibur-exclude')) === null || _a === void 0 ? void 0 : _a.value); })) !== null && _a !== void 0 ? _a : [];
    }
    getObjectLayerByName(name) {
        return this.objectGroups.filter(l => l.name === name)[0];
    }
    getObjectLayerByProperty(name, value) {
        return this.objectGroups.filter(l => { var _a; return ((_a = l.getProperty(name)) === null || _a === void 0 ? void 0 : _a.value) === value; });
    }
    getTileLayerByName(name) {
        return this.layers.filter(l => l.name === name)[0];
    }
    getTileLayersByProperty(name, value) {
        return this.layers.filter(l => { var _a; return ((_a = l.getProperty(name)) === null || _a === void 0 ? void 0 : _a.value) === value; });
    }
    static async fromTmx(tmxData) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        const _convertToArray = (obj, prop, plurlalize = false) => {
            if (!obj[prop]) {
                obj[prop + (plurlalize ? 's' : '')] = [];
                return;
            }
            obj[prop + (plurlalize ? 's' : '')] = Array.isArray(obj[prop]) ? obj[prop] : [obj[prop]];
            if (plurlalize) {
                delete obj[prop];
            }
        };
        const options = {
            attributeNamePrefix: "",
            textNodeName: "#text",
            ignoreAttributes: false,
            ignoreNameSpace: false,
            allowBooleanAttributes: true,
            parseNodeValue: true,
            parseAttributeValue: true,
            trimValues: true,
            parseTrueNumberOnly: false,
            arrayMode: false,
            stopNodes: ["parse-me-as-string"]
        };
        const rawMap = fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.parse(tmxData, options).map;
        _convertToArray(rawMap, 'layer', true);
        for (let layer of rawMap.layers) {
            layer.type = (_a = layer.type) !== null && _a !== void 0 ? _a : 'tilelayer';
            layer.encoding = layer.data.encoding;
            layer.compression = layer.data.compression;
            if (layer.encoding === 'csv') {
                layer.data = layer.data['#text'].split(',').map((id) => +id);
            }
            else {
                layer.data = layer.data['#text'];
            }
            layer.properties = (_c = (_b = layer.properties) === null || _b === void 0 ? void 0 : _b.property) !== null && _c !== void 0 ? _c : [];
            _convertToArray(layer, 'properties');
        }
        rawMap.objectgroup = (_d = rawMap.objectgroup) !== null && _d !== void 0 ? _d : [];
        let objectlayers = Array.isArray(rawMap.objectgroup) ? rawMap.objectgroup : [rawMap.objectgroup];
        for (let objectlayer of objectlayers) {
            objectlayer.type = (_e = objectlayer.type) !== null && _e !== void 0 ? _e : 'objectgroup';
            objectlayer.properties = (_g = (_f = objectlayer.properties) === null || _f === void 0 ? void 0 : _f.property) !== null && _g !== void 0 ? _g : [];
            _convertToArray(objectlayer, 'properties');
            if (objectlayer.object) {
                objectlayer.objects = Array.isArray(objectlayer.object) ? objectlayer.object : [objectlayer.object];
                objectlayer.objects.forEach((o) => { var _a, _b; return o.properties = (_b = (_a = o.properties) === null || _a === void 0 ? void 0 : _a.property) !== null && _b !== void 0 ? _b : []; });
                objectlayer.objects.forEach((o) => _convertToArray(o, 'properties'));
                delete objectlayer.object;
            }
            else {
                continue;
            }
            for (let object of objectlayer.objects) {
                if (object.text) {
                    object.text.text = object.text['#text'];
                    object.text.halign = (_h = object.text.halign) !== null && _h !== void 0 ? _h : 'left';
                    object.text.valign = (_j = object.text.valign) !== null && _j !== void 0 ? _j : 'top';
                    object.text.fontfamily = (_k = object.text.fontfamily) !== null && _k !== void 0 ? _k : 'sans-serif';
                    object.text.pixelsize = +((_l = object.text.pixelsize) !== null && _l !== void 0 ? _l : 16);
                    object.text.kerning = !!object.text.kerning;
                    object.text.italic = !!object.text.italic;
                    object.text.bold = !!object.text.bold;
                    object.text.underline = !!object.text.underline;
                    object.text.strikeout = !!object.text.strikeout;
                    object.text.color = (_m = object.text.color) !== null && _m !== void 0 ? _m : '#000000';
                }
                if (object.point === '') {
                    object.point = true;
                }
                if (object.ellipse === '') {
                    object.ellipse = true;
                }
                if (object.polyline) {
                    object.polyline = object.polyline.points.split(' ').map((p) => {
                        const point = p.split(',');
                        return { x: +point[0], y: +point[1] };
                    });
                }
                if (object.polygon) {
                    object.polygon = object.polygon.points.split(' ').map((p) => {
                        const point = p.split(',');
                        return { x: +point[0], y: +point[1] };
                    });
                }
            }
            rawMap.layers.push(objectlayer);
        }
        delete rawMap.objectgroup;
        _convertToArray(rawMap, 'imagelayer', true);
        for (let imagelayer of rawMap.imagelayers) {
            imagelayer.type = (_o = imagelayer.type) !== null && _o !== void 0 ? _o : 'imagelayer';
            imagelayer.image = imagelayer.image.source;
            imagelayer.properties = (_q = (_p = imagelayer.properties) === null || _p === void 0 ? void 0 : _p.property) !== null && _q !== void 0 ? _q : [];
            _convertToArray(imagelayer, 'properties');
            rawMap.layers.push(imagelayer);
        }
        delete rawMap.imagelayer;
        _convertToArray(rawMap, 'tileset', true);
        for (let tileset of rawMap.tilesets) {
            // Map non-embedded tilesets
            if (!tileset.source) {
                if (tileset.image) {
                    tileset.imagewidth = tileset.image.width;
                    tileset.imageheight = tileset.image.height;
                    tileset.image = tileset.image.source;
                }
                tileset.objectalignment = (_r = tileset.objectalignment) !== null && _r !== void 0 ? _r : 'unspecified';
                _convertToArray(tileset, 'tile', true);
                tileset.tiles.forEach((t) => {
                    var _a;
                    if ((_a = t.image) === null || _a === void 0 ? void 0 : _a.source) {
                        t.image = t.image.source;
                    }
                    if (t.objectgroup) {
                        t.objectgroup.type = 'objectgroup';
                        _convertToArray(t.objectgroup, 'object', true);
                    }
                });
            }
        }
        return await TiledMap._fromRawTiledMap(rawMap);
    }
    static async fromJson(rawJson) {
        return await TiledMap._fromRawTiledMap(rawJson);
    }
    static async _fromRawTiledMap(rawMap) {
        await TiledMap._decompresslayers(rawMap);
        const resultMap = new TiledMap();
        resultMap.orientation = rawMap.orientation;
        resultMap.rawMap = rawMap;
        resultMap.width = +rawMap.width;
        resultMap.height = +rawMap.height;
        resultMap.tileWidth = +rawMap.tilewidth;
        resultMap.tileHeight = +rawMap.tileheight;
        tagLayerWithOriginalOrder(rawMap);
        for (let layer of rawMap.layers) {
            if (layer.type == 'tilelayer') {
                resultMap.layers.push(_tiled_layer__WEBPACK_IMPORTED_MODULE_2__.TiledLayer.parse(layer));
            }
            if (layer.type == 'objectgroup') {
                resultMap.objectGroups.push(_tiled_object__WEBPACK_IMPORTED_MODULE_3__.TiledObjectGroup.parse(layer));
            }
            ;
        }
        for (let tileset of rawMap.tilesets) {
            // Map non-embedded tilesets
            if (!tileset.source) {
                resultMap.tileSets.push(_tiled_tileset__WEBPACK_IMPORTED_MODULE_4__.TiledTileset.parse(tileset));
            }
        }
        return resultMap;
    }
    static async _decompresslayers(rawJson) {
        var _a;
        // Decompress layers
        if (rawJson.layers) {
            for (var layer of rawJson.layers) {
                if (typeof layer.data === "string") {
                    if (layer.encoding === "base64") {
                        layer.data = await decompressors.decompressBase64(layer.data, layer.encoding, (_a = layer.compression) !== null && _a !== void 0 ? _a : '');
                    }
                }
                else {
                    layer.data = decompressors.decompressCsv(layer.data);
                }
            }
        }
        return rawJson;
    }
}
/**
 * @deprecated
 */
const tagLayerWithOriginalOrder = (rawMap) => {
    let order = 0;
    for (let layer of rawMap.layers) {
        layer.order = order++;
    }
};
/**
 * Decompression implementations
 * @deprecated
 */
const decompressors = {
    /**
     * Simplest (passes data through since it's uncompressed)
     */
    decompressCsv: (data) => {
        return data;
    },
    /**
     * Uses base64.js implementation to decode string into byte array
     * and then converts (with/without compression) to array of numbers
     */
    decompressBase64: (b64, encoding, compression) => {
        var i, j, l, tmp, placeHolders, arr;
        if (b64.length % 4 > 0) {
            throw new Error('Invalid string. Length must be a multiple of 4');
        }
        var PLUS = '+'.charCodeAt(0);
        var SLASH = '/'.charCodeAt(0);
        var NUMBER = '0'.charCodeAt(0);
        var LOWER = 'a'.charCodeAt(0);
        var UPPER = 'A'.charCodeAt(0);
        var PLUS_URL_SAFE = '-'.charCodeAt(0);
        var SLASH_URL_SAFE = '_'.charCodeAt(0);
        function decode(elt) {
            var code = elt.charCodeAt(0);
            if (code === PLUS || code === PLUS_URL_SAFE)
                return 62; // '+'
            if (code === SLASH || code === SLASH_URL_SAFE)
                return 63; // '/'
            if (code < NUMBER)
                return -1; // no match
            if (code < NUMBER + 10)
                return code - NUMBER + 26 + 26;
            if (code < UPPER + 26)
                return code - UPPER;
            if (code < LOWER + 26)
                return code - LOWER + 26;
            throw Error('Could not decode elt');
        }
        // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice
        var len = b64.length;
        placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0;
        // base64 is 4/3 + up to two characters of the original data
        arr = new Uint8Array(b64.length * 3 / 4 - placeHolders);
        // if there are placeholders, only get up to the last complete 4 chars
        l = placeHolders > 0 ? b64.length - 4 : b64.length;
        var L = 0;
        function push(v) {
            arr[L++] = v;
        }
        for (i = 0, j = 0; i < l; i += 4, j += 3) {
            tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3));
            push((tmp & 0xFF0000) >> 16);
            push((tmp & 0xFF00) >> 8);
            push(tmp & 0xFF);
        }
        if (placeHolders === 2) {
            tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4);
            push(tmp & 0xFF);
        }
        else if (placeHolders === 1) {
            tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2);
            push((tmp >> 8) & 0xFF);
            push(tmp & 0xFF);
        }
        return new Promise(resolve => {
            const toNumber = function (byteArray) {
                var value = 0;
                for (var i = byteArray.length - 1; i >= 0; i--) {
                    value = (value * 256) + byteArray[i] * 1;
                }
                return value;
            };
            // Byte array
            // handle compression
            if ("zlib" === compression || "gzip" === compression) {
                arr = (0,pako__WEBPACK_IMPORTED_MODULE_1__.inflate)(arr);
                var resultLen = arr.length / 4;
                var result = new Array(resultLen);
                for (i = 0; i < resultLen; i++) {
                    result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));
                }
                resolve(result);
            }
            if ("zstd" === compression) {
                const decoder = new zstddec__WEBPACK_IMPORTED_MODULE_5__.ZSTDDecoder();
                decoder.init().then(() => {
                    arr = decoder.decode(arr);
                    var resultLen = arr.length / 4;
                    var result = new Array(resultLen);
                    for (i = 0; i < resultLen; i++) {
                        result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));
                    }
                    resolve(result);
                });
            }
            if (!compression) {
                var resultLen = arr.length / 4;
                var result = new Array(resultLen);
                for (i = 0; i < resultLen; i++) {
                    result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));
                }
                resolve(result);
            }
        });
    }
};


/***/ }),

/***/ "./src/deprecated/tiled-map-resource.ts":
/*!**********************************************!*\
  !*** ./src/deprecated/tiled-map-resource.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledMapFormat: () => (/* binding */ TiledMapFormat),
/* harmony export */   TiledMapResource: () => (/* binding */ TiledMapResource)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _tiled_map_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tiled-map-parser */ "./src/deprecated/tiled-map-parser.ts");
/* harmony import */ var _tiled_tileset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tiled-tileset */ "./src/deprecated/tiled-tileset.ts");
/* harmony import */ var _tiled_layer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tiled-layer */ "./src/deprecated/tiled-layer.ts");
/* harmony import */ var _tiled_entity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tiled-entity */ "./src/deprecated/tiled-entity.ts");
/* harmony import */ var _tiled_object_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tiled-object-component */ "./src/deprecated/tiled-object-component.ts");
/* harmony import */ var _tiled_layer_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tiled-layer-component */ "./src/deprecated/tiled-layer-component.ts");







/**
 * @deprecated
 */
var TiledMapFormat;
(function (TiledMapFormat) {
    /**
     * TMX map layer format
     */
    TiledMapFormat["TMX"] = "TMX";
    /**
     * JSON map layer format
     */
    TiledMapFormat["JSON"] = "JSON";
})(TiledMapFormat || (TiledMapFormat = {}));
/**
 * @deprecated
 */
class TiledMapResource {
    /**
     *
     * @param path Specify a path to your Tiled map source files (usually path/to/my_map.tmx)
     * @param options Optionally configure other aspects of the tilemap like start layer z-index and map format
     */
    constructor(path, options) {
        this.path = path;
        this.layers = [];
        this.isoLayers = [];
        this._layerZIndexStart = -1;
        this._mapToRawLayer = new Map();
        const { mapFormatOverride, startingLayerZIndex } = { ...options };
        this._layerZIndexStart = startingLayerZIndex !== null && startingLayerZIndex !== void 0 ? startingLayerZIndex : this._layerZIndexStart;
        const detectedType = mapFormatOverride !== null && mapFormatOverride !== void 0 ? mapFormatOverride : (path.includes('.tmx') ? TiledMapFormat.TMX : TiledMapFormat.JSON);
        switch (detectedType) {
            case TiledMapFormat.TMX:
                this._resource = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Resource(path, 'text');
                break;
            case TiledMapFormat.JSON:
                this._resource = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Resource(path, 'json');
                break;
            default:
                throw `The format ${detectedType} is not currently supported. Please export Tiled map as JSON.`;
        }
        this.mapFormat = detectedType;
        this.ex = {};
        this.imageMap = {};
        this.sheetMap = {};
        this.tileImageMap = {};
        this.convertPath = (originPath, relativePath) => {
            // Use absolute path if specified
            if (relativePath.indexOf('/') === 0) {
                return relativePath;
            }
            const originSplit = originPath.split('/');
            const relativeSplit = relativePath.split('/');
            // if origin path is a file, remove it so it's a directory
            if (originSplit[originSplit.length - 1].includes('.')) {
                originSplit.pop();
            }
            return originSplit.concat(relativeSplit).join('/');
        };
    }
    _addTiledCamera(scene) {
        const camera = this.ex.camera;
        if (camera) {
            let cameraPos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(camera.x, camera.y);
            if (this.isIsometric()) {
                cameraPos = this._isoTileToScreenCoords(camera.x, camera.y);
            }
            scene.camera.x = cameraPos.x;
            scene.camera.y = cameraPos.y;
            scene.camera.zoom = camera.zoom;
        }
    }
    _addTiledColliders(scene) {
        var _a;
        const colliders = this.ex.colliders;
        if (colliders) {
            for (let collider of colliders) {
                const actor = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Actor({
                    pos: (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(collider.x, collider.y),
                    name: collider.name,
                    collisionType: (_a = collider.collisionType) !== null && _a !== void 0 ? _a : excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.Fixed
                });
                if (collider.color) {
                    actor.color = excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.fromHex(collider.color.value);
                }
                if (collider.type === 'box') {
                    if (this.isIsometric()) {
                        actor.pos = this._isoTileToScreenCoords(collider.x, collider.y);
                        const bb = new excalibur__WEBPACK_IMPORTED_MODULE_0__.BoundingBox({
                            left: 0,
                            top: 0,
                            right: collider.width,
                            bottom: collider.height
                        });
                        const points = bb.getPoints().map(p => this._isoTileToScreenCoords(p.x, p.y));
                        actor.collider.usePolygonCollider(points, excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero);
                    }
                    else {
                        actor.collider.useBoxCollider(collider.width, collider.height, excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero);
                    }
                }
                if (collider.type === 'circle') {
                    // FIXME no ellipse support yet for colliders in isometric
                    actor.collider.useCircleCollider(collider.radius);
                }
                // @ts-ignore
                actor.addComponent(new _tiled_object_component__WEBPACK_IMPORTED_MODULE_5__.TiledObjectComponent(collider.tiled));
                scene.add(actor);
                if (collider.zIndex) {
                    actor.z = collider.zIndex;
                }
            }
        }
    }
    _isoTileToScreenCoords(x, y) {
        // Transformation sourced from:
        // https://discourse.mapeditor.org/t/how-to-get-cartesian-coords-of-objects-from-tileds-isometric-map/4623/3
        if (this.isIsometric()) {
            const map = this.isoLayers[0];
            const tileWidth = map.tileWidth;
            const tileHeight = map.tileHeight;
            const originX = 0;
            const tileY = y / tileHeight;
            const tileX = x / tileHeight;
            return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((tileX - tileY) * tileWidth / 2 + originX, (tileX + tileY) * tileHeight / 2);
        }
        return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(x, y);
    }
    _addTiledText(scene) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const excaliburObjectLayers = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getObjects();
        if (excaliburObjectLayers && excaliburObjectLayers.length > 0) {
            for (const objectLayer of excaliburObjectLayers) {
                const textObjects = objectLayer.getText();
                for (const text of textObjects) {
                    let worldPos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(text.x, text.y + (((_b = text.height) !== null && _b !== void 0 ? _b : 0) - ((_d = (_c = text.text) === null || _c === void 0 ? void 0 : _c.pixelSize) !== null && _d !== void 0 ? _d : 0)));
                    if (this.isIsometric()) {
                        worldPos = this._isoTileToScreenCoords(text.x, text.y);
                    }
                    const label = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Label({
                        anchor: excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero,
                        x: worldPos.x,
                        y: worldPos.y,
                        text: (_f = (_e = text.text) === null || _e === void 0 ? void 0 : _e.text) !== null && _f !== void 0 ? _f : '',
                        name: this._getEntityName(text),
                        font: new excalibur__WEBPACK_IMPORTED_MODULE_0__.Font({
                            family: (_g = text.text) === null || _g === void 0 ? void 0 : _g.fontFamily,
                            size: (_h = text.text) === null || _h === void 0 ? void 0 : _h.pixelSize,
                            unit: excalibur__WEBPACK_IMPORTED_MODULE_0__.FontUnit.Px
                        })
                    });
                    label.font.textAlign = excalibur__WEBPACK_IMPORTED_MODULE_0__.TextAlign.Left;
                    label.font.baseAlign = excalibur__WEBPACK_IMPORTED_MODULE_0__.BaseAlign.Top;
                    label.rotation = text.rotation;
                    label.color = excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.fromHex((_k = (_j = text.text) === null || _j === void 0 ? void 0 : _j.color) !== null && _k !== void 0 ? _k : '#000000');
                    label.collider.set(excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Box((_l = text.width) !== null && _l !== void 0 ? _l : 0, (_m = text.height) !== null && _m !== void 0 ? _m : 0));
                    label.body.collisionType = excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.PreventCollision;
                    // @ts-ignore
                    label.addComponent(new _tiled_object_component__WEBPACK_IMPORTED_MODULE_5__.TiledObjectComponent(text));
                    label.z = this._calculateZIndex(text, objectLayer);
                    if (this.isIsometric()) {
                        // The component just needs the tile width/height and row/cols
                        // all the layers are the same so we can just use the first
                        const iso = new excalibur__WEBPACK_IMPORTED_MODULE_0__.IsometricEntityComponent(this.isoLayers[0]);
                        label.addComponent(iso);
                        iso.elevation = objectLayer.order;
                    }
                    scene.add(label);
                }
            }
        }
    }
    _addTiledInsertedTiles(scene) {
        var _a, _b, _c;
        const excaliburObjectLayers = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getObjects();
        if (excaliburObjectLayers && excaliburObjectLayers.length > 0) {
            for (const objectLayer of excaliburObjectLayers) {
                const inserted = objectLayer.getInsertedTiles();
                for (const tile of inserted) {
                    const collisionTypeProp = tile.getProperty('collisionType');
                    let collisionType = excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.PreventCollision;
                    if (collisionTypeProp) {
                        collisionType = collisionTypeProp.value;
                    }
                    let worldPos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(tile.x, tile.y);
                    if (this.isIsometric()) {
                        worldPos = this._isoTileToScreenCoords(tile.x, tile.y);
                    }
                    if (tile.gid) {
                        const sprite = this.getSpriteForGid(tile.gid);
                        const colliders = this.getCollidersForGid(tile.gid);
                        const actor = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Actor({
                            x: worldPos.x,
                            y: worldPos.y,
                            width: tile.width,
                            height: tile.height,
                            anchor: this.isIsometric() ? (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(.5, 1) : (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 1),
                            rotation: tile.rotation,
                            collisionType,
                            name: this._getEntityName(tile)
                        });
                        if (this.isIsometric()) {
                            const map = this.isoLayers[0];
                            for (let c of colliders) {
                                c.offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(-map.tileWidth / 2, -map.tileHeight * 2);
                            }
                        }
                        if (colliders.length) {
                            actor.collider.clear();
                            actor.collider.set(new excalibur__WEBPACK_IMPORTED_MODULE_0__.CompositeCollider(colliders));
                        }
                        // @ts-ignore
                        actor.addComponent(new _tiled_object_component__WEBPACK_IMPORTED_MODULE_5__.TiledObjectComponent(tile));
                        actor.graphics.anchor = this.isIsometric() ? (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(.5, 1) : (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 1);
                        // respect tile size on sprite
                        sprite.destSize.width = (_b = tile.width) !== null && _b !== void 0 ? _b : sprite.destSize.width;
                        sprite.destSize.height = (_c = tile.height) !== null && _c !== void 0 ? _c : sprite.destSize.height;
                        actor.graphics.use(sprite);
                        if (this.isIsometric()) {
                            // The component just needs the tile width/height and row/cols
                            // all the layers are the same so we can just use the first
                            const iso = new excalibur__WEBPACK_IMPORTED_MODULE_0__.IsometricEntityComponent(this.isoLayers[0]);
                            actor.addComponent(iso);
                            iso.elevation = objectLayer.order;
                        }
                        scene.add(actor);
                        actor.z = this._calculateZIndex(tile, objectLayer);
                    }
                }
            }
        }
    }
    /**
     * Use any layers with the custom property "solid"= true, to mark the TileMap
     * cells solid.
     */
    useSolidLayers() {
        var _a, _b;
        var _c;
        let tms = this.getTileMapLayers();
        tms = tms.concat(this.isoLayers);
        for (const tm of tms) {
            const rawLayer = this._mapToRawLayer.get(tm);
            if (rawLayer) {
                const solidLayer = (_b = (_a = (0,_tiled_entity__WEBPACK_IMPORTED_MODULE_4__.getProperty)(rawLayer.properties, 'solid')) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : false;
                if (solidLayer) {
                    for (let i = 0; i < rawLayer.data.length; i++) {
                        (_c = tm.tiles[i]).solid || (_c.solid = !!rawLayer.data[i]);
                    }
                }
            }
        }
    }
    /**
     * Adds the TileMap and any parsed objects from Tiled into the Scene
     * @param scene
     */
    addTiledMapToScene(scene) {
        const tms = this.getTileMapLayers();
        for (const tm of tms) {
            scene.add(tm);
        }
        for (const iso of this.isoLayers) {
            scene.add(iso);
        }
        // TODO tiled uses different coordinates for iso and iso staggered
        this._addTiledCamera(scene);
        this._addTiledColliders(scene);
        this._addTiledText(scene);
        this._addTiledInsertedTiles(scene);
        this.useSolidLayers();
    }
    _parseExcaliburInfo() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        // Tiled+Excalibur smarts
        const excaliburObjectLayers = (_a = this.data) === null || _a === void 0 ? void 0 : _a.getObjects();
        const ex = {};
        if (excaliburObjectLayers.length > 0) {
            // Parse cameras find the first
            ex.camera = (_b = excaliburObjectLayers.find(objectlayer => objectlayer.getObjectByClass('camera'))) === null || _b === void 0 ? void 0 : _b.getCamera();
            // Parse colliders
            ex.colliders = [];
            for (let objectLayer of excaliburObjectLayers) {
                const boxColliders = objectLayer.getObjectsByClass('boxcollider');
                for (let box of boxColliders) {
                    const collisionType = box.getProperty('collisiontype');
                    const color = box.getProperty('color');
                    const zIndex = this._calculateZIndex(box, objectLayer);
                    ex.colliders.push({
                        ...box,
                        width: +((_c = box.width) !== null && _c !== void 0 ? _c : 0),
                        height: +((_d = box.height) !== null && _d !== void 0 ? _d : 0),
                        collisionType: (_e = collisionType === null || collisionType === void 0 ? void 0 : collisionType.value) !== null && _e !== void 0 ? _e : excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.Fixed,
                        color,
                        zIndex: zIndex,
                        radius: 0,
                        type: 'box',
                        tiled: box,
                        name: this._getEntityName(box)
                    });
                }
                const circleColliders = objectLayer.getObjectsByClass('circlecollider');
                for (let circle of circleColliders) {
                    const collisionType = circle.getProperty('collisiontype');
                    const color = circle.getProperty('color');
                    const zIndex = this._calculateZIndex(circle, objectLayer);
                    ex.colliders.push({
                        x: circle.x,
                        y: circle.y,
                        radius: Math.max((_f = circle.width) !== null && _f !== void 0 ? _f : 0, (_g = circle.height) !== null && _g !== void 0 ? _g : 0),
                        collisionType: (_h = collisionType === null || collisionType === void 0 ? void 0 : collisionType.value) !== null && _h !== void 0 ? _h : excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.Fixed,
                        color,
                        zIndex: zIndex,
                        width: (_j = circle.width) !== null && _j !== void 0 ? _j : 0,
                        height: (_k = circle.height) !== null && _k !== void 0 ? _k : 0,
                        type: 'circle',
                        tiled: circle,
                        name: this._getEntityName(circle)
                    });
                }
            }
        }
        this.ex = ex;
    }
    isLoaded() {
        return !!this.data;
    }
    isIsometric() {
        return !!this.isoLayers.length;
    }
    async load() {
        const mapData = await this._resource.load();
        const tiledMap = await this._importMapData(mapData);
        let externalTilesets = [];
        // Loop through loaded tileset data
        // If we find an image property, then
        // load the image and sprite
        tiledMap.rawMap.tilesets.forEach(ts => {
            // If we find a source property, then
            // load the tileset data, merge it with
            // existing data, and load the image and sprite
            if (ts.source) {
                const type = ts.source.includes('.tsx') ? 'text' : 'json';
                var tileset = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Resource(this.convertPath(this.path, ts.source), type);
                externalTilesets.push(tileset.load().then((external) => {
                    if (type === 'text') {
                        external = (0,_tiled_tileset__WEBPACK_IMPORTED_MODULE_2__.parseExternalTsx)(external, ts.firstgid, ts.source);
                    }
                    else {
                        external = (0,_tiled_tileset__WEBPACK_IMPORTED_MODULE_2__.parseExternalJson)(external, ts.firstgid, ts.source);
                    }
                    Object.assign(ts, external);
                    tiledMap.tileSets.push(external);
                }, () => {
                    excalibur__WEBPACK_IMPORTED_MODULE_0__.Logger.getInstance().error(`[Tiled] Error loading external tileset file ${tileset.path}`);
                }));
            }
        });
        // Load all tilesets if necessary
        await Promise.all(externalTilesets).then(() => {
            // external images
            let externalImages = [];
            // retrieve images from tilesets and create textures
            tiledMap.rawMap.tilesets.forEach(ts => {
                let tileSetImages = [];
                // if image is specified it's a single image tileset
                if (ts.image) {
                    if (ts.source) {
                        // if external tileset "source" is specified and images are relative to external tileset
                        tileSetImages = [this.convertPath(ts.source, ts.image)];
                    }
                    else {
                        // otherwise for embedded tilesets, images are relative to the tmx (this.path)
                        tileSetImages = [this.convertPath(this.path, ts.image)];
                    }
                    for (let image of tileSetImages) {
                        const tx = new excalibur__WEBPACK_IMPORTED_MODULE_0__.ImageSource(image);
                        this.imageMap[ts.firstgid] = tx;
                        externalImages.push(tx.load());
                        excalibur__WEBPACK_IMPORTED_MODULE_0__.Logger.getInstance().debug("[Tiled] Loading associated tileset image: " + ts.image);
                    }
                }
                else {
                    // otherwise it's a collection of images tileset
                    for (let tile of ts.tiles) {
                        let tileImage;
                        if (ts.source) {
                            tileImage = this.convertPath(ts.source, tile.image);
                        }
                        else {
                            tileImage = this.convertPath(this.path, tile.image);
                        }
                        const tx = new excalibur__WEBPACK_IMPORTED_MODULE_0__.ImageSource(tileImage);
                        externalImages.push(tx.load());
                        if (!this.tileImageMap[ts.firstgid]) {
                            this.tileImageMap[ts.firstgid] = [];
                        }
                        this.tileImageMap[ts.firstgid].push([tile, tx]);
                        excalibur__WEBPACK_IMPORTED_MODULE_0__.Logger.getInstance().debug("[Tiled] Loading associated tileset image: " + tileImage);
                    }
                }
            });
            return Promise.all(externalImages).then(() => {
                this._createTileMap();
            }, () => {
                excalibur__WEBPACK_IMPORTED_MODULE_0__.Logger.getInstance().error("[Tiled] Error loading tileset images");
            });
        });
        this._parseExcaliburInfo();
        return tiledMap;
    }
    async _importMapData(data) {
        if (data === void 0) {
            throw `Tiled map resource ${this.path} is empty`;
        }
        switch (this.mapFormat) {
            case TiledMapFormat.TMX:
                return this.data = await _tiled_map_parser__WEBPACK_IMPORTED_MODULE_1__.TiledMap.fromTmx(data);
            case TiledMapFormat.JSON:
                return this.data = await _tiled_map_parser__WEBPACK_IMPORTED_MODULE_1__.TiledMap.fromJson(data);
            default:
                throw new Error('Unknown map format: ' + this.mapFormat);
        }
    }
    /**
     * Given a Tiled gid (global identifier) return the Tiled tileset data
     * @param gid
     */
    getTilesetForTile(gid) {
        if (this.data) {
            for (var i = this.data.tileSets.length - 1; i >= 0; i--) {
                var ts = this.data.tileSets[i];
                if (gid >= ts.firstGid && gid <= ts.firstGid + ts.tileCount - 1) {
                    return ts;
                }
            }
        }
        throw Error(`No tileset exists for tiled gid [${gid}]!`);
    }
    /**
     * Given a Tiled TileSet gid, return the equivalent Excalibur Sprite
     * @param gid
     */
    getSpriteForGid(gid) {
        const h = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.isFlippedHorizontally)(gid);
        const v = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.isFlippedVertically)(gid);
        const d = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.isFlippedDiagonally)(gid);
        const normalizedGid = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.getCanonicalGid)(gid);
        const tileset = this.getTilesetForTile(normalizedGid);
        const spriteIndex = normalizedGid - tileset.firstGid;
        const spriteSheet = this.sheetMap[tileset.firstGid.toString()];
        if (spriteSheet) {
            let sprite = spriteSheet.sprites[spriteIndex];
            if (d || h || v) {
                sprite = sprite.clone();
            }
            // See https://github.com/mapeditor/tiled/issues/2119#issuecomment-491533214
            if (d) {
                sprite.rotation = -Math.PI / 2;
                sprite.scale = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(-1, 1);
            }
            if (h) {
                sprite.scale = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((d ? 1 : -1) * sprite.scale.x, (d ? -1 : 1) * sprite.scale.y);
            }
            if (v) {
                sprite.scale = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((d ? -1 : 1) * sprite.scale.x, (d ? 1 : -1) * sprite.scale.y);
            }
            return sprite;
        }
        throw new Error(`Could not find sprite for gid: [${gid}] normalized gid: [${normalizedGid}]`);
    }
    _transformPoints(points, tileset, gid) {
        const h = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.isFlippedHorizontally)(gid);
        const v = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.isFlippedVertically)(gid);
        const d = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.isFlippedDiagonally)(gid);
        if (d) {
            points = points.map(p => tileset.diagonalFlipTransform.multiply(p));
        }
        if (h) {
            points = points.map(p => tileset.horizontalFlipTransform.multiply(p));
        }
        if (v) {
            points = points.map(p => tileset.verticalFlipTransform.multiply(p));
        }
        return points;
    }
    getCollidersForGid(gid) {
        const normalizedGid = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.getCanonicalGid)(gid);
        const tileset = this.getTilesetForTile(normalizedGid);
        const tileIndex = normalizedGid - tileset.firstGid;
        const tileWithObjects = tileset.tiles.find(t => t.id === tileIndex);
        if (tileWithObjects && tileWithObjects.objectgroup) {
            const result = [];
            for (const polygon of tileWithObjects.objectgroup.getPolygons()) {
                const offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(polygon.x, polygon.y);
                const points = polygon.polygon.points;
                const parsed = points.split(" ")
                    .map((tp) => {
                    const point = tp.split(",");
                    return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(Number.parseFloat(point[0]), Number.parseFloat(point[1])).add(offset);
                });
                const poly = excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Polygon(parsed);
                poly.points = this._transformPoints(poly.points, tileset, gid);
                result.push(poly);
            }
            for (const box of tileWithObjects.objectgroup.getBoxes()) {
                const boxCollider = excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Box(box.width, box.height, excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero);
                boxCollider.points = boxCollider.points.map(p => p.add((0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(box.x, box.y)));
                boxCollider.points = this._transformPoints(boxCollider.points, tileset, gid);
                result.push(boxCollider);
            }
            for (const circle of tileWithObjects.objectgroup.getEllipses()) {
                const circleCollider = excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Circle(Math.min(circle.width / 2, circle.height / 2), (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(circle.width / 2, circle.height / 2).add((0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(circle.x, circle.y)));
                result.push(circleCollider);
            }
            return result;
        }
        return [];
    }
    getAnimationForGid(gid) {
        const normalizedGid = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.getCanonicalGid)(gid);
        const tileset = this.getTilesetForTile(normalizedGid);
        const tileIndex = normalizedGid - tileset.firstGid;
        const tileWithAnimation = tileset.tiles.find(t => t.id === tileIndex);
        if (tileWithAnimation && tileWithAnimation.hasAnimation()) {
            return tileWithAnimation.getAnimation(this);
        }
        return null;
    }
    _calculateZIndex(entity, tileLayerOrObjectGroup) {
        var _a, _b, _c;
        let finalZ = (_b = (_a = entity.getProperty('z')) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : (_c = entity.getProperty('zindex')) === null || _c === void 0 ? void 0 : _c.value;
        finalZ !== null && finalZ !== void 0 ? finalZ : (finalZ = tileLayerOrObjectGroup.order + this._layerZIndexStart);
        // coerce to integer
        return +finalZ;
    }
    _getEntityName(entity) {
        return entity.name;
    }
    /**
     * Creates the Excalibur tile map representation
     */
    _createTileMap() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        // register sprite sheets for each tileset in map
        for (const tileset of this.data.rawMap.tilesets) {
            const spacing = (_a = tileset.spacing) !== null && _a !== void 0 ? _a : 0;
            const cols = Math.floor((tileset.imagewidth + spacing) / (tileset.tilewidth + spacing));
            const rows = Math.floor((tileset.imageheight + spacing) / (tileset.tileheight + spacing));
            // Single image tilesets
            if (this.imageMap[tileset.firstgid]) {
                // Tiled and Excalibur use the same words for different things :facepalm:
                // Tiled margin is the same as Excalibur originOffset
                // Tiled spacing is the same as Excalibur margin
                const ss = excalibur__WEBPACK_IMPORTED_MODULE_0__.SpriteSheet.fromImageSource({
                    image: this.imageMap[tileset.firstgid],
                    grid: {
                        columns: cols,
                        rows: rows,
                        spriteWidth: tileset.tilewidth,
                        spriteHeight: tileset.tileheight
                    },
                    spacing: {
                        originOffset: {
                            x: (_b = tileset.margin) !== null && _b !== void 0 ? _b : 0,
                            y: (_c = tileset.margin) !== null && _c !== void 0 ? _c : 0
                        },
                        margin: {
                            x: (_d = tileset.spacing) !== null && _d !== void 0 ? _d : 0,
                            y: (_e = tileset.spacing) !== null && _e !== void 0 ? _e : 0,
                        }
                    }
                });
                this.sheetMap[tileset.firstgid.toString()] = ss;
                // Image collection tilesets
            }
            else {
                const tiles = this.tileImageMap[tileset.firstgid];
                const sprites = tiles.map(([tile, imageSource]) => {
                    const sprite = imageSource.toSprite();
                    return sprite;
                });
                const ss = new excalibur__WEBPACK_IMPORTED_MODULE_0__.SpriteSheet({ sprites });
                this.sheetMap[tileset.firstgid.toString()] = ss;
            }
        }
        // Create Excalibur sprites for each cell
        for (var layer of this.data.layers) {
            if (layer.rawLayer.type === "tilelayer") {
                if (this.data.orientation === "orthogonal") {
                    const rawLayer = layer.rawLayer;
                    const tileMapLayer = new excalibur__WEBPACK_IMPORTED_MODULE_0__.TileMap({
                        name: layer.rawLayer.name,
                        pos: (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(layer.offset.x, layer.offset.y),
                        tileWidth: this.data.rawMap.tilewidth,
                        tileHeight: this.data.rawMap.tileheight,
                        columns: this.data.width,
                        rows: this.data.height
                    });
                    // @ts-ignore
                    tileMapLayer.addComponent(new _tiled_layer_component__WEBPACK_IMPORTED_MODULE_6__.TiledLayerComponent(layer));
                    if (layer.rawLayer.parallaxx || layer.rawLayer.parallaxy) {
                        const factor = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((_f = layer.rawLayer.parallaxx) !== null && _f !== void 0 ? _f : 1.0, (_g = layer.rawLayer.parallaxy) !== null && _g !== void 0 ? _g : 1.0);
                        tileMapLayer.addComponent(new excalibur__WEBPACK_IMPORTED_MODULE_0__.ParallaxComponent(factor));
                    }
                    // I know this looks goofy, but the entity and the layer "it belongs" to are the same here
                    tileMapLayer.z = this._calculateZIndex(layer, layer);
                    for (let i = 0; i < rawLayer.data.length; i++) {
                        let gid = rawLayer.data[i];
                        if (gid !== 0) {
                            const sprite = this.getSpriteForGid(gid);
                            tileMapLayer.tiles[i].addGraphic(sprite);
                            const colliders = this.getCollidersForGid(gid);
                            for (let collider of colliders) {
                                tileMapLayer.tiles[i].addCollider(collider);
                            }
                            const animation = this.getAnimationForGid(gid);
                            if (animation) {
                                tileMapLayer.tiles[i].clearGraphics();
                                tileMapLayer.tiles[i].addGraphic(animation);
                            }
                        }
                    }
                    this._mapToRawLayer.set(tileMapLayer, rawLayer);
                    (_h = this.layers) === null || _h === void 0 ? void 0 : _h.push(tileMapLayer);
                }
                if (this.data.orientation === "isometric") {
                    const rawLayer = layer.rawLayer;
                    const iso = new excalibur__WEBPACK_IMPORTED_MODULE_0__.IsometricMap({
                        name: layer.rawLayer.name,
                        pos: (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(layer.offset.x, layer.offset.y),
                        columns: this.data.width,
                        rows: this.data.height,
                        tileWidth: this.data.tileWidth,
                        tileHeight: this.data.tileHeight
                    });
                    const tx = iso.get(excalibur__WEBPACK_IMPORTED_MODULE_0__.TransformComponent);
                    if (tx) {
                        tx.z = this._calculateZIndex(layer, layer);
                    }
                    for (let i = 0; i < rawLayer.data.length; i++) {
                        let gid = rawLayer.data[i];
                        if (gid !== 0) {
                            const sprite = this.getSpriteForGid(gid);
                            iso.tiles[i].addGraphic(sprite);
                            const colliders = this.getCollidersForGid(gid);
                            for (let collider of colliders) {
                                iso.tiles[i].addCollider(collider);
                            }
                            const isoComponent = iso.tiles[i].get(excalibur__WEBPACK_IMPORTED_MODULE_0__.IsometricEntityComponent);
                            if (isoComponent) {
                                isoComponent.elevation = layer.order;
                            }
                        }
                    }
                    iso.updateColliders();
                    this._mapToRawLayer.set(iso, rawLayer);
                    (_j = this.isoLayers) === null || _j === void 0 ? void 0 : _j.push(iso);
                }
            }
        }
    }
    /**
     * Return the TileMap layers for the parsed Tiled map
     */
    getTileMapLayers() {
        var _a;
        if ((_a = this.layers) === null || _a === void 0 ? void 0 : _a.length) {
            return this.layers;
        }
        return [];
    }
    /**
     * Return the IsometricMap layers for the parsed Tiled map
     */
    getIsometricMapLayers() {
        var _a;
        if ((_a = this.isoLayers) === null || _a === void 0 ? void 0 : _a.length) {
            return this.isoLayers;
        }
        return [];
    }
    _lookupTile(tilemap, tile, layerName) {
        const tileIndex = tilemap.tiles.indexOf(tile); // both ex and tiled share the same index
        // Tiled data
        // gid can be found by looking up the original data, locate layer by name
        const tiledLayer = this.data.getTileLayerByName(layerName);
        const tileGid = (0,_tiled_layer__WEBPACK_IMPORTED_MODULE_3__.getCanonicalGid)(tiledLayer.data[tileIndex]);
        // No tile case
        if (tileGid === 0) {
            return null;
        }
        // Tiled tileset properties
        const tiledTileset = this.getTilesetForTile(tileGid);
        // odd quirk of Tiled's data the gid's here are off by 1 from the data array :/
        const tiledTile = tiledTileset.tiles.find(t => t.id === (tileGid - 1));
        if (!tiledTile) {
            return {
                id: tileGid - 1,
                tileset: tiledTileset,
                properties: {}
            };
        }
        return tiledTile;
    }
    getTileByPoint(layerName, worldPos) {
        // ex TileMap data structure by name
        const tilemap = this.getTileMapLayers().find(tm => tm.name === layerName);
        if (tilemap) {
            const tile = tilemap.getTileByPoint(worldPos);
            if (!tile)
                return null;
            return this._lookupTile(tilemap, tile, layerName);
        }
        return null;
    }
    getTileByCoordinate(layerName, x, y) {
        // ex TileMap data structure by name
        const tilemap = this.getTileMapLayers().find(tm => tm.name === layerName);
        if (tilemap) {
            const tile = tilemap.getTile(x, y);
            return this._lookupTile(tilemap, tile, layerName);
        }
        return null;
    }
}


/***/ }),

/***/ "./src/deprecated/tiled-object-component.ts":
/*!**************************************************!*\
  !*** ./src/deprecated/tiled-object-component.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledObjectComponent: () => (/* binding */ TiledObjectComponent)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);

/**
 * @deprecated
 */
// @ts-ignore
class TiledObjectComponent extends excalibur__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(object) {
        super();
        this.object = object;
        this.type = "ex.tiledobject";
    }
}


/***/ }),

/***/ "./src/deprecated/tiled-object.ts":
/*!****************************************!*\
  !*** ./src/deprecated/tiled-object.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledObject: () => (/* binding */ TiledObject),
/* harmony export */   TiledObjectGroup: () => (/* binding */ TiledObjectGroup)
/* harmony export */ });
/* harmony import */ var _tiled_entity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tiled-entity */ "./src/deprecated/tiled-entity.ts");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_1__);


/**
 * Tiled Object Layer
 * @deprecated
 */
class TiledObjectGroup extends _tiled_entity__WEBPACK_IMPORTED_MODULE_0__.TiledEntity {
    constructor() {
        super(...arguments);
        this.objects = [];
    }
    getCamera() {
        var _a;
        const camera = this.getObjectByClass('camera');
        if (camera) {
            const zoom = camera.getProperty('zoom');
            return ({
                x: camera.x,
                y: camera.y,
                zoom: zoom ? +((_a = zoom === null || zoom === void 0 ? void 0 : zoom.value) !== null && _a !== void 0 ? _a : 1) : 1
            });
        }
    }
    getObjectByType(type) {
        return this.getObjectsByType(type)[0];
    }
    getObjectByClass(type) {
        return this.getObjectsByClass(type)[0];
    }
    getObjectsByType(type) {
        return this.objects.filter(o => { var _a; return ((_a = o.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === type.toLocaleLowerCase(); });
    }
    /**
     * Since Tiled 1.10 the property is called `type` again.
     * We treat both properties here to be on the safe side.
     * See https://doc.mapeditor.org/en/stable/reference/tmx-changelog/#tiled-1-10
     */
    getObjectsByClass(type) {
        return this.objects.filter(o => { var _a, _b; return ((_a = o.class) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === type.toLocaleLowerCase() || ((_b = o.type) === null || _b === void 0 ? void 0 : _b.toLocaleLowerCase()) === type.toLocaleLowerCase(); });
    }
    getObjectByName(name) {
        return this.getObjectsByName(name)[0];
    }
    getObjectsByName(name) {
        return this.objects.filter(o => { var _a; return ((_a = o.name) === null || _a === void 0 ? void 0 : _a.toString().toLocaleLowerCase()) === name.toString().toLocaleLowerCase(); });
    }
    getPoints() {
        return this.objects.filter(o => !!o.point);
    }
    getEllipses() {
        return this.objects.filter(o => !!o.ellipse);
    }
    getText() {
        return this.objects.filter(o => !!o.text);
    }
    getPolyLines() {
        return this.objects.filter(o => !!o.polyline);
    }
    getPolygons() {
        return this.objects.filter(o => !!o.polygon);
    }
    getBoxes() {
        return this.objects.filter(o => !!o.width && !!o.height && !o.ellipse);
    }
    getInsertedTiles() {
        return this.objects.filter(o => !!o.gid);
    }
    static parse(objectGroup) {
        var _a;
        if (objectGroup.type !== 'objectgroup')
            throw Error('Cannot parse non objectgroup type layer');
        const resultObjectGroup = new TiledObjectGroup();
        resultObjectGroup.id = +objectGroup.id;
        resultObjectGroup.name = objectGroup.name;
        resultObjectGroup.properties = (_a = objectGroup.properties) !== null && _a !== void 0 ? _a : [];
        resultObjectGroup.rawObjectGroup = objectGroup;
        resultObjectGroup.order = objectGroup.order;
        for (let object of objectGroup.objects) {
            resultObjectGroup.objects.push(TiledObject.parse(object));
        }
        return resultObjectGroup;
    }
}
/**
 * @deprecated
 */
class TiledObject extends _tiled_entity__WEBPACK_IMPORTED_MODULE_0__.TiledEntity {
    static parse(object) {
        var _a, _b, _c, _d;
        const resultObject = new TiledObject();
        resultObject.id = +object.id;
        resultObject.gid = object.gid;
        resultObject.visible = (_a = object.visible) !== null && _a !== void 0 ? _a : true;
        resultObject.name = object.name;
        resultObject.type = object.type;
        resultObject.class = object.class;
        resultObject.x = +object.x;
        resultObject.y = +object.y;
        resultObject.rotation = object.rotation ? (0,excalibur__WEBPACK_IMPORTED_MODULE_1__.toRadians)(object.rotation) : 0;
        resultObject.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;
        resultObject.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;
        resultObject.point = object.point;
        resultObject.ellipse = object.ellipse === true || (object.ellipse === '');
        resultObject.polyline = object.polyline;
        resultObject.polygon = object.polygon;
        resultObject.rawObject = object;
        if (object.text) {
            resultObject.text = {
                ...object.text,
                pixelSize: object.text.pixelsize,
                fontFamily: object.text.fontfamily
            };
        }
        resultObject.properties = (_d = object.properties) !== null && _d !== void 0 ? _d : [];
        return resultObject;
    }
}


/***/ }),

/***/ "./src/deprecated/tiled-tileset.ts":
/*!*****************************************!*\
  !*** ./src/deprecated/tiled-tileset.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledTileset: () => (/* binding */ TiledTileset),
/* harmony export */   TiledTilesetTile: () => (/* binding */ TiledTilesetTile),
/* harmony export */   parseExternalJson: () => (/* binding */ parseExternalJson),
/* harmony export */   parseExternalTsx: () => (/* binding */ parseExternalTsx)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-xml-parser */ "./node_modules/fast-xml-parser/src/parser.js");
/* harmony import */ var _tiled_object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tiled-object */ "./src/deprecated/tiled-object.ts");
/* harmony import */ var _tiled_entity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tiled-entity */ "./src/deprecated/tiled-entity.ts");
// tmx xml parsing




/**
 * @deprecated
 */
class TiledTileset {
    constructor() {
        /**
         * Array of Tiles (optional)
         */
        this.tiles = [];
    }
    static parse(rawTileSet) {
        var _a, _b;
        const tileSet = new TiledTileset();
        let tiles = [];
        if (!Array.isArray(rawTileSet.tiles)) {
            for (let id in rawTileSet.tiles) {
                tiles.push(TiledTilesetTile.parse({ ...rawTileSet.tiles[id], id: +id }, tileSet));
            }
        }
        else {
            tiles = ((_a = rawTileSet.tiles) !== null && _a !== void 0 ? _a : []).map(t => TiledTilesetTile.parse(t, tileSet));
        }
        tileSet.tiles = tiles;
        tileSet.firstGid = rawTileSet.firstgid;
        tileSet.tileWidth = rawTileSet.tilewidth;
        tileSet.tileHeight = rawTileSet.tileheight;
        tileSet.tileCount = rawTileSet.tilecount;
        tileSet.tileOffset = rawTileSet.tileoffset;
        tileSet.tiledVersion = rawTileSet.tiledversion;
        tileSet.backgroundColor = rawTileSet.backgroundcolor;
        tileSet.transparentColor = rawTileSet.transparentcolor;
        tileSet.wangSets = rawTileSet.wangsets;
        tileSet.imageWidth = rawTileSet.imagewidth;
        tileSet.imageHeight = rawTileSet.imageheight;
        tileSet.objectAlignment = (_b = rawTileSet.objectalignment) !== null && _b !== void 0 ? _b : 'unspecified';
        tileSet.image = rawTileSet.image;
        tileSet.spacing = isNaN(rawTileSet.spacing) ? 0 : rawTileSet.spacing;
        tileSet.horizontalFlipTransform = excalibur__WEBPACK_IMPORTED_MODULE_0__.Matrix.identity().translate(tileSet.tileWidth, 0).scale(-1, 1);
        tileSet.verticalFlipTransform = excalibur__WEBPACK_IMPORTED_MODULE_0__.Matrix.identity().translate(0, tileSet.tileHeight).scale(1, -1);
        tileSet.diagonalFlipTransform = excalibur__WEBPACK_IMPORTED_MODULE_0__.Matrix.identity().translate(0, 0).rotate(-Math.PI / 2).scale(-1, 1);
        return tileSet;
    }
}
/**
 * @deprecated
 */
class TiledTilesetTile {
    hasAnimation() {
        return !!this.animation;
    }
    getAnimation(map) {
        var _a;
        if (this.animation) {
            let exFrames = [];
            for (let frame of this.animation) {
                exFrames.push({
                    graphic: map.getSpriteForGid(frame.tileid + this.tileset.firstGid),
                    duration: frame.duration
                });
            }
            return new excalibur__WEBPACK_IMPORTED_MODULE_0__.Animation({
                frames: exFrames,
                strategy: (_a = this.animationStrategy) !== null && _a !== void 0 ? _a : excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Loop
            });
        }
        return null;
    }
    static parse(rawTilesetTile, tileset) {
        var _a, _b, _c;
        const tile = new TiledTilesetTile();
        tile.id = +rawTilesetTile.id;
        tile.image = rawTilesetTile.image;
        tile.tileset = tileset;
        tile.properties = Array.isArray(rawTilesetTile.properties) ? rawTilesetTile.properties : (_b = (_a = rawTilesetTile.properties) === null || _a === void 0 ? void 0 : _a.property) !== null && _b !== void 0 ? _b : [];
        if (rawTilesetTile.objectgroup) {
            tile.objectgroup = _tiled_object__WEBPACK_IMPORTED_MODULE_2__.TiledObjectGroup.parse(rawTilesetTile.objectgroup);
        }
        if (rawTilesetTile.terrain) {
            tile.terrain = rawTilesetTile.terrain;
        }
        if (rawTilesetTile.animation) {
            tile.animation = Array.isArray(rawTilesetTile.animation) ? rawTilesetTile.animation : [...rawTilesetTile.animation.frame];
            if (tile.properties) {
                const maybeStrategy = (_c = (0,_tiled_entity__WEBPACK_IMPORTED_MODULE_3__.getProperty)(tile.properties, "animationstrategy")) === null || _c === void 0 ? void 0 : _c.value;
                switch (maybeStrategy === null || maybeStrategy === void 0 ? void 0 : maybeStrategy.toLowerCase()) {
                    case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.End.toLowerCase():
                        tile.animationStrategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.End;
                        break;
                    case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Freeze.toLowerCase():
                        tile.animationStrategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Freeze;
                        break;
                    case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Loop.toLowerCase():
                        tile.animationStrategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Loop;
                        break;
                    case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.PingPong.toLowerCase():
                        tile.animationStrategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.PingPong;
                        break;
                    default:
                        tile.animationStrategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Loop;
                }
            }
        }
        return tile;
    }
}
// TODO merge this with the other parser
/**
 * @deprecated
 */
const parseExternalTsx = (tsxData, firstGid, source) => {
    var _a, _b, _c, _d, _e;
    const _convertToArray = (obj, prop, plurlalize = false) => {
        if (!obj[prop]) {
            obj[prop + (plurlalize ? 's' : '')] = [];
            return;
        }
        obj[prop + (plurlalize ? 's' : '')] = Array.isArray(obj[prop]) ? obj[prop] : [obj[prop]];
        if (plurlalize) {
            delete obj[prop];
        }
    };
    const options = {
        attributeNamePrefix: "",
        textNodeName: "#text",
        ignoreAttributes: false,
        ignoreNameSpace: false,
        allowBooleanAttributes: true,
        parseNodeValue: true,
        parseAttributeValue: true,
        trimValues: true,
        parseTrueNumberOnly: false,
        arrayMode: false,
        stopNodes: ["parse-me-as-string"]
    };
    const rawTsx = fast_xml_parser__WEBPACK_IMPORTED_MODULE_1__.parse(tsxData, options).tileset;
    const rawTileset = rawTsx;
    rawTileset.firstgid = firstGid;
    rawTileset.source = source;
    rawTileset.imagewidth = (_a = rawTsx.image) === null || _a === void 0 ? void 0 : _a.width;
    rawTileset.imageheight = (_b = rawTsx.image) === null || _b === void 0 ? void 0 : _b.height;
    rawTileset.objectalignment = (_c = rawTsx.objectalignment) !== null && _c !== void 0 ? _c : 'unspecified';
    rawTileset.image = (_d = rawTsx.image) === null || _d === void 0 ? void 0 : _d.source;
    rawTileset.spacing = isNaN(rawTsx.spacing) ? 0 : rawTsx.spacing;
    _convertToArray(rawTsx, "tile", true);
    rawTsx.tiles.forEach((t) => {
        var _a;
        if ((_a = t.image) === null || _a === void 0 ? void 0 : _a.source) {
            t.image = t.image.source;
        }
        if (t.objectgroup) {
            t.objectgroup.type = 'objectgroup';
            _convertToArray(t.objectgroup, 'object', true);
        }
    });
    rawTileset.tiles = rawTsx.tiles;
    const result = {
        ...rawTileset,
        tiles: [],
        firstGid: rawTileset.firstgid,
        tileWidth: rawTileset.tilewidth,
        tileHeight: rawTileset.tileheight,
        tileCount: rawTileset.tilecount,
        tileOffset: rawTileset.tileoffset,
        tiledVersion: rawTileset.tiledversion,
        backgroundColor: rawTileset.backgroundcolor,
        transparentColor: rawTileset.transparentcolor,
        wangSets: rawTileset.wangsets,
        imageWidth: rawTileset.imagewidth,
        imageHeight: rawTileset.imageheight,
        objectAlignment: (_e = rawTileset.objectalignment) !== null && _e !== void 0 ? _e : 'unspecified',
        image: rawTileset.image,
        spacing: isNaN(rawTileset.spacing) ? 0 : rawTileset.spacing,
        horizontalFlipTransform: excalibur__WEBPACK_IMPORTED_MODULE_0__.Matrix.identity().translate(rawTileset.tilewidth, 0).scale(-1, 1),
        verticalFlipTransform: excalibur__WEBPACK_IMPORTED_MODULE_0__.Matrix.identity().translate(0, rawTileset.tileheight).scale(1, -1),
        diagonalFlipTransform: excalibur__WEBPACK_IMPORTED_MODULE_0__.Matrix.identity().translate(rawTileset.tilewidth, rawTileset.tileheight).rotate(-Math.PI / 2).scale(-1, 1)
    };
    result.tiles = rawTileset.tiles.map(t => TiledTilesetTile.parse(t, result));
    return result;
};
/**
 * @deprecated
 */
const parseExternalJson = (rawTileset, firstGid, source) => {
    var _a, _b;
    let tiles = [];
    rawTileset.tiles = (_a = rawTileset.tiles) !== null && _a !== void 0 ? _a : [];
    const origin = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(rawTileset.tilewidth / 2, rawTileset.tileheight / 2);
    const result = {
        ...rawTileset,
        source,
        tiles,
        firstGid: firstGid,
        tileWidth: rawTileset.tilewidth,
        tileHeight: rawTileset.tileheight,
        tileCount: rawTileset.tilecount,
        tileOffset: rawTileset.tileoffset,
        tiledVersion: rawTileset.tiledversion,
        backgroundColor: rawTileset.backgroundcolor,
        transparentColor: rawTileset.transparentcolor,
        wangSets: rawTileset.wangsets,
        imageWidth: rawTileset.imagewidth,
        imageHeight: rawTileset.imageheight,
        spacing: isNaN(rawTileset.spacing) ? 0 : rawTileset.spacing,
        objectAlignment: (_b = rawTileset.objectalignment) !== null && _b !== void 0 ? _b : 'unspecified',
        image: rawTileset.image,
        horizontalFlipTransform: excalibur__WEBPACK_IMPORTED_MODULE_0__.Matrix.identity().translate(rawTileset.tilewidth, 0).scale(-1, 1),
        verticalFlipTransform: excalibur__WEBPACK_IMPORTED_MODULE_0__.Matrix.identity().translate(0, rawTileset.tileheight).scale(1, -1),
        diagonalFlipTransform: excalibur__WEBPACK_IMPORTED_MODULE_0__.Matrix.identity().translate(rawTileset.tilewidth, rawTileset.tileheight).rotate(-Math.PI / 2).scale(-1, 1)
    };
    for (let id in rawTileset.tiles) {
        tiles.push(TiledTilesetTile.parse({ ...rawTileset.tiles[id], id: +id }, result));
    }
    return result;
};


/***/ }),

/***/ "./src/deprecated/tiled-types.ts":
/*!***************************************!*\
  !*** ./src/deprecated/tiled-types.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Decoder: () => (/* reexport safe */ _resource_decoder__WEBPACK_IMPORTED_MODULE_1__.Decoder),
/* harmony export */   Deprecated: () => (/* reexport module object */ _deprecated__WEBPACK_IMPORTED_MODULE_18__),
/* harmony export */   Ellipse: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.Ellipse),
/* harmony export */   ExcaliburTiledProperties: () => (/* reexport safe */ _resource_excalibur_properties__WEBPACK_IMPORTED_MODULE_2__.ExcaliburTiledProperties),
/* harmony export */   FLIPPED_DIAGONALLY_FLAG: () => (/* reexport safe */ _resource_gid_util__WEBPACK_IMPORTED_MODULE_5__.FLIPPED_DIAGONALLY_FLAG),
/* harmony export */   FLIPPED_HORIZONTALLY_FLAG: () => (/* reexport safe */ _resource_gid_util__WEBPACK_IMPORTED_MODULE_5__.FLIPPED_HORIZONTALLY_FLAG),
/* harmony export */   FLIPPED_VERTICALLY_FLAG: () => (/* reexport safe */ _resource_gid_util__WEBPACK_IMPORTED_MODULE_5__.FLIPPED_VERTICALLY_FLAG),
/* harmony export */   FetchLoader: () => (/* reexport safe */ _resource_file_loader__WEBPACK_IMPORTED_MODULE_3__.FetchLoader),
/* harmony export */   InsertedTile: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.InsertedTile),
/* harmony export */   LoaderCache: () => (/* reexport safe */ _resource_loader_cache__WEBPACK_IMPORTED_MODULE_7__.LoaderCache),
/* harmony export */   PluginObject: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.PluginObject),
/* harmony export */   Point: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.Point),
/* harmony export */   Polygon: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.Polygon),
/* harmony export */   Polyline: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.Polyline),
/* harmony export */   Rectangle: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.Rectangle),
/* harmony export */   Template: () => (/* reexport safe */ _resource_template__WEBPACK_IMPORTED_MODULE_12__.Template),
/* harmony export */   TemplateObject: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.TemplateObject),
/* harmony export */   TemplateResource: () => (/* reexport safe */ _resource_template_resource__WEBPACK_IMPORTED_MODULE_11__.TemplateResource),
/* harmony export */   Text: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.Text),
/* harmony export */   Tile: () => (/* reexport safe */ _resource_tileset__WEBPACK_IMPORTED_MODULE_17__.Tile),
/* harmony export */   TiledDataComponent: () => (/* reexport safe */ _resource_tiled_data_component__WEBPACK_IMPORTED_MODULE_13__.TiledDataComponent),
/* harmony export */   TiledLayerDataComponent: () => (/* reexport safe */ _resource_tiled_layer_component__WEBPACK_IMPORTED_MODULE_14__.TiledLayerDataComponent),
/* harmony export */   TiledMap: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.TiledMap),
/* harmony export */   TiledParser: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.TiledParser),
/* harmony export */   TiledResource: () => (/* reexport safe */ _resource_tiled_resource__WEBPACK_IMPORTED_MODULE_15__.TiledResource),
/* harmony export */   TiledTemplate: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.TiledTemplate),
/* harmony export */   TiledText: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.TiledText),
/* harmony export */   TiledTile: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.TiledTile),
/* harmony export */   TiledTileLayer: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.TiledTileLayer),
/* harmony export */   TiledTileLayerInfinite: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.TiledTileLayerInfinite),
/* harmony export */   TiledTileset: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.TiledTileset),
/* harmony export */   TiledTilesetFile: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.TiledTilesetFile),
/* harmony export */   Tileset: () => (/* reexport safe */ _resource_tileset__WEBPACK_IMPORTED_MODULE_17__.Tileset),
/* harmony export */   TilesetResource: () => (/* reexport safe */ _resource_tileset_resource__WEBPACK_IMPORTED_MODULE_16__.TilesetResource),
/* harmony export */   byClassCaseInsensitive: () => (/* reexport safe */ _resource_filter_util__WEBPACK_IMPORTED_MODULE_4__.byClassCaseInsensitive),
/* harmony export */   byNameCaseInsensitive: () => (/* reexport safe */ _resource_filter_util__WEBPACK_IMPORTED_MODULE_4__.byNameCaseInsensitive),
/* harmony export */   byPropertyCaseInsensitive: () => (/* reexport safe */ _resource_filter_util__WEBPACK_IMPORTED_MODULE_4__.byPropertyCaseInsensitive),
/* harmony export */   filenameFromPath: () => (/* reexport safe */ _resource_path_util__WEBPACK_IMPORTED_MODULE_9__.filenameFromPath),
/* harmony export */   getCanonicalGid: () => (/* reexport safe */ _resource_gid_util__WEBPACK_IMPORTED_MODULE_5__.getCanonicalGid),
/* harmony export */   isCSV: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.isCSV),
/* harmony export */   isFlippedDiagonally: () => (/* reexport safe */ _resource_gid_util__WEBPACK_IMPORTED_MODULE_5__.isFlippedDiagonally),
/* harmony export */   isFlippedHorizontally: () => (/* reexport safe */ _resource_gid_util__WEBPACK_IMPORTED_MODULE_5__.isFlippedHorizontally),
/* harmony export */   isFlippedVertically: () => (/* reexport safe */ _resource_gid_util__WEBPACK_IMPORTED_MODULE_5__.isFlippedVertically),
/* harmony export */   isInfiniteLayer: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.isInfiniteLayer),
/* harmony export */   isTiledTilesetCollectionOfImages: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.isTiledTilesetCollectionOfImages),
/* harmony export */   isTiledTilesetEmbedded: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.isTiledTilesetEmbedded),
/* harmony export */   isTiledTilesetExternal: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.isTiledTilesetExternal),
/* harmony export */   isTiledTilesetSingleImage: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.isTiledTilesetSingleImage),
/* harmony export */   mapPath: () => (/* reexport safe */ _resource_path_util__WEBPACK_IMPORTED_MODULE_9__.mapPath),
/* harmony export */   mapProps: () => (/* reexport safe */ _resource_properties__WEBPACK_IMPORTED_MODULE_10__.mapProps),
/* harmony export */   needsDecoding: () => (/* reexport safe */ _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__.needsDecoding),
/* harmony export */   parseObject: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.parseObject),
/* harmony export */   parseObjects: () => (/* reexport safe */ _resource_objects__WEBPACK_IMPORTED_MODULE_8__.parseObjects),
/* harmony export */   pathInMap: () => (/* reexport safe */ _resource_path_util__WEBPACK_IMPORTED_MODULE_9__.pathInMap),
/* harmony export */   pathRelativeToBase: () => (/* reexport safe */ _resource_path_util__WEBPACK_IMPORTED_MODULE_9__.pathRelativeToBase)
/* harmony export */ });
/* harmony import */ var _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser/tiled-parser */ "./src/parser/tiled-parser.ts");
/* harmony import */ var _resource_decoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resource/decoder */ "./src/resource/decoder.ts");
/* harmony import */ var _resource_excalibur_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resource/excalibur-properties */ "./src/resource/excalibur-properties.ts");
/* harmony import */ var _resource_file_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resource/file-loader */ "./src/resource/file-loader.ts");
/* harmony import */ var _resource_filter_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resource/filter-util */ "./src/resource/filter-util.ts");
/* harmony import */ var _resource_gid_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resource/gid-util */ "./src/resource/gid-util.ts");
/* harmony import */ var _resource_layer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resource/layer */ "./src/resource/layer.ts");
/* harmony import */ var _resource_loader_cache__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./resource/loader-cache */ "./src/resource/loader-cache.ts");
/* harmony import */ var _resource_objects__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./resource/objects */ "./src/resource/objects.ts");
/* harmony import */ var _resource_path_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./resource/path-util */ "./src/resource/path-util.ts");
/* harmony import */ var _resource_properties__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./resource/properties */ "./src/resource/properties.ts");
/* harmony import */ var _resource_template_resource__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./resource/template-resource */ "./src/resource/template-resource.ts");
/* harmony import */ var _resource_template__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./resource/template */ "./src/resource/template.ts");
/* harmony import */ var _resource_tiled_data_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./resource/tiled-data-component */ "./src/resource/tiled-data-component.ts");
/* harmony import */ var _resource_tiled_layer_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./resource/tiled-layer-component */ "./src/resource/tiled-layer-component.ts");
/* harmony import */ var _resource_tiled_resource__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./resource/tiled-resource */ "./src/resource/tiled-resource.ts");
/* harmony import */ var _resource_tileset_resource__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./resource/tileset-resource */ "./src/resource/tileset-resource.ts");
/* harmony import */ var _resource_tileset__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./resource/tileset */ "./src/resource/tileset.ts");
/* harmony import */ var _deprecated__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./deprecated */ "./src/deprecated.ts");


















// export deprecated




/***/ }),

/***/ "./src/parser/tiled-parser.ts":
/*!************************************!*\
  !*** ./src/parser/tiled-parser.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledMap: () => (/* binding */ TiledMap),
/* harmony export */   TiledParser: () => (/* binding */ TiledParser),
/* harmony export */   TiledTemplate: () => (/* binding */ TiledTemplate),
/* harmony export */   TiledText: () => (/* binding */ TiledText),
/* harmony export */   TiledTile: () => (/* binding */ TiledTile),
/* harmony export */   TiledTileLayer: () => (/* binding */ TiledTileLayer),
/* harmony export */   TiledTileLayerInfinite: () => (/* binding */ TiledTileLayerInfinite),
/* harmony export */   TiledTileset: () => (/* binding */ TiledTileset),
/* harmony export */   TiledTilesetFile: () => (/* binding */ TiledTilesetFile),
/* harmony export */   isCSV: () => (/* binding */ isCSV),
/* harmony export */   isInfiniteLayer: () => (/* binding */ isInfiniteLayer),
/* harmony export */   isTiledTilesetCollectionOfImages: () => (/* binding */ isTiledTilesetCollectionOfImages),
/* harmony export */   isTiledTilesetEmbedded: () => (/* binding */ isTiledTilesetEmbedded),
/* harmony export */   isTiledTilesetExternal: () => (/* binding */ isTiledTilesetExternal),
/* harmony export */   isTiledTilesetSingleImage: () => (/* binding */ isTiledTilesetSingleImage),
/* harmony export */   needsDecoding: () => (/* binding */ needsDecoding)
/* harmony export */ });
/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ "./node_modules/zod/lib/index.mjs");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");

const TiledIntProperty = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('int'),
    value: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int()
});
const TiledBoolProperty = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('bool'),
    value: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()
});
const TiledFloatProperty = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('float'),
    value: zod__WEBPACK_IMPORTED_MODULE_0__.z.number()
});
const TiledStringProperty = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('string'),
    value: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()
});
const TiledFileProperty = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('file'),
    value: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()
});
const TiledColorProperty = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('color'),
    value: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()
});
const TiledObjectProperty = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('object'),
    value: zod__WEBPACK_IMPORTED_MODULE_0__.z.number()
});
const TiledProperty = zod__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion("type", [
    TiledIntProperty,
    TiledBoolProperty,
    TiledFloatProperty,
    TiledStringProperty,
    TiledFileProperty,
    TiledColorProperty,
    TiledObjectProperty
]);
const TiledTileLayerBase = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("tilelayer"),
    class: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    height: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    width: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    x: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    y: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    opacity: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledProperty).optional(),
    visible: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),
    tintcolor: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    parallaxx: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    parallaxy: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    offsetx: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    offsety: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
});
const TiledTileLayerCSV = TiledTileLayerBase.extend({
    data: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.number()),
    encoding: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('csv')
});
const TiledTileLayerGZIP = TiledTileLayerBase.extend({
    data: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.number()),
    encoding: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('base64'),
    compression: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('gzip'),
});
const TiledTileLayerZLib = TiledTileLayerBase.extend({
    data: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.number()),
    encoding: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('base64'),
    compression: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('zlib'),
});
const TiledTileLayerZStandard = TiledTileLayerBase.extend({
    data: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.number()),
    encoding: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('base64'),
    compression: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('zstandard'),
});
const TiledTileLayerBase64 = TiledTileLayerBase.extend({
    data: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    encoding: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('base64'),
    compression: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
});
const TiledTileLayerChunk = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    x: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    y: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    width: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    height: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    data: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.number()) // infinite chunks are only csv!
});
const TiledTileLayerInfinite = TiledTileLayerBase.extend({
    startx: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    starty: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    chunks: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledTileLayerChunk)
});
const TiledTileLayer = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([
    TiledTileLayerBase64,
    TiledTileLayerCSV,
    TiledTileLayerGZIP,
    TiledTileLayerZLib,
    TiledTileLayerZStandard,
    TiledTileLayerInfinite
]);
function needsDecoding(x) {
    return x.encoding === 'base64';
}
function isCSV(x) {
    return x.encoding === 'csv' || Array.isArray(x.data);
}
const TiledPoint = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    x: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    y: zod__WEBPACK_IMPORTED_MODULE_0__.z.number()
});
const TiledPolygon = zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledPoint);
const TiledText = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    text: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    color: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    fontfamily: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    pixelsize: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    wrap: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),
    halign: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('left'), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('center'), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('right'), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('justify')]).optional(),
    valign: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('top'), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('center'), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('bottom')]).optional()
});
const TiledObject = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(), // Template files might not have an id for some reason
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    x: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(), // template files dont have x/y sometimes
    y: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(), // template files dont have x/y sometimes
    rotation: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    height: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    width: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    visible: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),
    gid: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    text: TiledText.optional(),
    point: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),
    ellipse: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),
    polyline: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledPoint).optional(),
    polygon: TiledPolygon.optional(),
    template: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledProperty).optional(),
});
const TiledAnimation = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    duration: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    tileid: zod__WEBPACK_IMPORTED_MODULE_0__.z.number()
});
const TiledObjectLayer = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    draworder: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("objectgroup"),
    class: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    x: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    y: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    color: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    tintcolor: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    parallaxx: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    parallaxy: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    offsetx: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    offsety: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    opacity: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledProperty).optional(),
    visible: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),
    objects: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledObject)
});
const TiledImageLayer = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    x: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    y: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('imagelayer'),
    class: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    image: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    opacity: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledProperty).optional(),
    visible: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),
    tintcolor: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    repeatx: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),
    repeaty: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),
    parallaxx: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    parallaxy: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    offsetx: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    offsety: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    transparentcolor: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()
});
// FIXME recursive Group Layer definition
const TiledLayer = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([
    TiledImageLayer,
    TiledTileLayer,
    TiledObjectLayer
]);
const TiledObjectGroup = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    draworder: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(), // sometimes tiled doesn't put an id here :( inconsistent
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    x: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    y: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    opacity: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    tintcolor: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("objectgroup"),
    visible: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),
    objects: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledObject),
    properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledProperty).optional()
});
const TiledTile = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    animation: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledAnimation).optional(),
    objectgroup: TiledObjectGroup.optional(),
    probability: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledProperty).optional(),
    // Tiles can be collections of images
    image: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    imageheight: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    imagewidth: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()
});
const TiledTilesetEmbedded = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    firstgid: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    class: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    objectalignment: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([
        zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('topleft'),
        zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('top'),
        zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('topright'),
        zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('left'),
        zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('center'),
        zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('right'),
        zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('bottomleft'),
        zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('bottom'),
        zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('bottomright'),
    ]).optional(),
    // optional image/width/height if collection of images
    image: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    imagewidth: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    imageheight: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    columns: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    tileheight: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    tilewidth: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    tilecount: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    grid: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
        height: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
        width: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
        orientation: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('isometric'), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('orthogonal')])
    }).optional(),
    // Can specify a drawing offset
    tileoffset: TiledPoint.optional(),
    spacing: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    margin: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    tiles: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledTile).optional(),
    properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledProperty).optional()
});
function isTiledTilesetSingleImage(x) {
    return !!x.image;
}
function isTiledTilesetCollectionOfImages(x) {
    return !!!x.image;
}
const TiledTilesetFile = TiledTilesetEmbedded.extend({
    tiledversion: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('tileset'),
    version: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()
});
const TiledTilesetExternal = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    firstgid: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    source: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()
});
const TiledTileset = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([TiledTilesetEmbedded, TiledTilesetExternal]);
const TiledTemplate = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    object: TiledObject.extend({ id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional() }),
    tileset: TiledTilesetExternal.optional(),
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('template')
});
const TiledMap = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({
    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    class: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    tiledversion: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    version: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),
    width: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    height: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    tilewidth: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    tileheight: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    compressionlevel: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    infinite: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),
    nextlayerid: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    nextobjectid: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),
    parallaxoriginx: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    parallaxoriginy: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    hexsidelength: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),
    staggeraxis: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('y').or(zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('x')).optional(),
    staggerindex: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('odd').or(zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('even')).optional(),
    orientation: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("isometric"), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("orthogonal"), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("staggered"), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("hexagonal")]),
    renderorder: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("right-down"), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("right-up"), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("left-down"), zod__WEBPACK_IMPORTED_MODULE_0__.z.literal("left-up")]),
    backgroundcolor: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),
    layers: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledLayer),
    tilesets: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledTileset),
    properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(TiledProperty).optional()
});
function isInfiniteLayer(tileLayer) {
    return !!tileLayer.chunks;
}
function isTiledTilesetEmbedded(ts) {
    return !!!ts.source;
}
function isTiledTilesetExternal(ts) {
    return !!ts.source;
}
class BoundingBox {
    constructor(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    combine(other) {
        const right = this.x + this.width;
        const bottom = this.y + this.height;
        const otherRight = other.x + other.width;
        const otherBottom = other.y + other.height;
        const endRight = Math.max(right, otherRight);
        const endBottom = Math.max(bottom, otherBottom);
        const compositeBB = new BoundingBox(Math.min(this.x, other.x), Math.min(this.y, other.y), endRight - Math.min(this.x, other.x), endBottom - Math.min(this.y, other.y));
        return compositeBB;
    }
}
class TiledParser {
    constructor() {
        this._largestBounds = new BoundingBox(0, 0, 0, 0);
    }
    _coerceNumber(value) {
        return +value;
    }
    _coerceBoolean(value) {
        switch (value) {
            case "0": return false;
            case "false": return false;
            case "true": return true;
            default: return !!(Boolean(value));
        }
    }
    _coerceType(type, value) {
        if (type === 'bool') {
            return this._coerceBoolean(value);
        }
        if (type === 'int' || type === 'float') {
            return this._coerceNumber(value);
        }
        if (type === 'object') {
            return this._coerceNumber(value);
        }
        return value;
    }
    _parsePropertiesNode(propertiesNode, target) {
        var _a;
        const properties = [];
        if (propertiesNode) {
            for (let prop of propertiesNode.children) {
                const type = (_a = prop.getAttribute('type')) !== null && _a !== void 0 ? _a : 'string'; // if no type is set it's string!
                let value = prop.getAttribute('value');
                if (!value) {
                    value = prop.innerHTML;
                }
                properties.push({
                    name: prop.getAttribute('name'),
                    type: type,
                    value: this._coerceType(type, value)
                });
            }
        }
        target.properties = properties;
    }
    _parseAttributes(node, target) {
        // attribute names to coerce into numbers
        const numberProps = [
            'width',
            'height',
            'columns',
            'firstgid',
            'spacing',
            'margin',
            'tilecount',
            'tilewidth',
            'tileheight',
            'opacity',
            'compressionlevel',
            'nextlayerid',
            'nextobjectid',
            'parallaxoriginx',
            'parallaxoriginy',
            'parallaxx',
            'parallaxy',
            'hexsidelength',
            'offsetx',
            'offsety',
            'id',
            'gid',
            'x',
            'y',
            'rotation',
            'probability'
        ];
        // attribute names to coerce into booleans
        const booleanProps = [
            "infinite",
            'visible',
            'repeatx',
            'repeaty',
        ];
        for (let attribute of node.attributes) {
            if (numberProps.indexOf(attribute.name) > -1) {
                target[attribute.name] = this._coerceNumber(attribute.value);
            }
            else if (booleanProps.indexOf(attribute.name) > -1) {
                target[attribute.name] = this._coerceBoolean(attribute.value);
            }
            else {
                target[attribute.name] = attribute.value;
            }
        }
    }
    /**
     * Takes an xml string and uses an available parser (DOMParser in browser or JSDOM in Node.js)
     * to produce a DOM object compatible with at least DOM Level 3.
     * @param xml
     * @returns
     */
    _parseToDocument(xml) {
        if (typeof DOMParser !== 'undefined') {
            const domParser = new DOMParser();
            return domParser.parseFromString(xml, 'application/xml');
        }
        try {
            const { JSDOM } = __webpack_require__(/*! jsdom */ "jsdom");
            const dom = new JSDOM(xml, {
                contentType: 'application/xml',
                encoding: 'utf-8',
            });
            return dom.window.document;
        }
        catch (e) { /* ignored */ }
        const error = new Error('Could not find DOM parser');
        console.error(error.message, error);
        throw error;
    }
    parseObject(objectNode, strict = true) {
        var _a, _b;
        const object = {};
        object.type = '';
        object.x = 0;
        object.y = 0;
        if (!objectNode.getAttribute('template')) {
            object.visible = true;
            object.name = '';
            object.rotation = 0;
            object.height = 0;
            object.width = 0;
        }
        this._parseAttributes(objectNode, object);
        const propertiesNode = objectNode.querySelector('properties');
        if (propertiesNode) {
            this._parsePropertiesNode(propertiesNode, object);
        }
        const text = objectNode.querySelector('text');
        if (text) {
            object.text = {
                text: text.textContent
            };
            const fontfamily = text.getAttribute('fontfamily');
            if (fontfamily) {
                object.text.fontfamily = fontfamily;
            }
            const color = text.getAttribute('color');
            if (color) {
                object.text.color = color;
            }
            const pixelsize = text.getAttribute('pixelsize');
            if (pixelsize) {
                object.text.pixelsize = this._coerceNumber(pixelsize);
            }
            const wrap = text.getAttribute('wrap');
            if (wrap) {
                object.text.wrap = this._coerceBoolean(wrap);
            }
            const valign = text.getAttribute('valign');
            if (valign) {
                object.text.valign = valign;
            }
            const halign = text.getAttribute('halign');
            if (halign) {
                object.text.halign = halign;
            }
        }
        const point = objectNode.querySelector('point');
        if (point) {
            object.point = true;
        }
        const ellipse = objectNode.querySelector('ellipse');
        if (ellipse) {
            object.ellipse = true;
        }
        const polygon = objectNode.querySelector('polygon');
        if (polygon) {
            const points = (_a = polygon.getAttribute('points')) === null || _a === void 0 ? void 0 : _a.split(' ');
            object.polygon = [];
            if (points) {
                points.forEach(p => {
                    const point = p.split(',');
                    object.polygon.push({
                        x: +point[0],
                        y: +point[1]
                    });
                });
            }
        }
        const polyline = objectNode.querySelector('polyline');
        if (polyline) {
            const points = (_b = polyline.getAttribute('points')) === null || _b === void 0 ? void 0 : _b.split(' ');
            object.polyline = [];
            if (points) {
                points.forEach(p => {
                    const point = p.split(',');
                    object.polyline.push({
                        x: +point[0],
                        y: +point[1]
                    });
                });
            }
        }
        if (strict) {
            try {
                return TiledObject.parse(object);
            }
            catch (e) {
                console.error('Could not parse object', object, e);
                throw e;
            }
        }
        return object;
    }
    parseTileset(tilesetNode, strict = true) {
        const tileset = {};
        tileset.spacing = 0;
        tileset.margin = 0;
        this._parseAttributes(tilesetNode, tileset);
        if (tileset.source) {
            try {
                return TiledTileset.parse(tileset);
            }
            catch (e) {
                console.error('Could not parse external tileset', tileset, e);
            }
        }
        for (let tilesetChild of tilesetNode.children) {
            switch (tilesetChild.tagName) {
                case 'properties': {
                    this._parsePropertiesNode(tilesetChild, tileset);
                    break;
                }
                case 'tileoffset': {
                    const tileoffset = {};
                    this._parseAttributes(tilesetChild, tileoffset);
                    tileset.tileoffset = tileoffset;
                    break;
                }
                case 'grid': {
                    const grid = {};
                    this._parseAttributes(tilesetChild, grid);
                    tileset.grid = grid;
                    break;
                }
                case 'image': {
                    tileset.image = tilesetChild.getAttribute('source');
                    tileset.imagewidth = this._coerceNumber(tilesetChild.getAttribute('width'));
                    tileset.imageheight = this._coerceNumber(tilesetChild.getAttribute('height'));
                    break;
                }
                case 'tile': {
                    if (!tileset.tiles) {
                        tileset.tiles = [];
                    }
                    const tile = {};
                    this._parseAttributes(tilesetChild, tile);
                    for (let tileChild of tilesetChild.children) {
                        switch (tileChild.tagName) {
                            case 'image': {
                                tile.image = tileChild.getAttribute('source');
                                tile.imagewidth = this._coerceNumber(tileChild.getAttribute('width'));
                                tile.imageheight = this._coerceNumber(tileChild.getAttribute('height'));
                                break;
                            }
                            case 'objectgroup': {
                                const objectgroup = {};
                                objectgroup.type = 'objectgroup';
                                objectgroup.name = "";
                                objectgroup.visible = true;
                                objectgroup.x = 0;
                                objectgroup.y = 0;
                                objectgroup.opacity = 1;
                                objectgroup.objects = [];
                                this._parseAttributes(tileChild, objectgroup);
                                tile.objectgroup = objectgroup;
                                for (let objectChild of tileChild.children) {
                                    const object = this.parseObject(objectChild, strict);
                                    objectgroup.objects.push(object);
                                }
                                break;
                            }
                            case 'animation': {
                                const animation = [];
                                for (let frameChild of tileChild.children) {
                                    animation.push({
                                        duration: this._coerceNumber(frameChild.getAttribute('duration')),
                                        tileid: this._coerceNumber(frameChild.getAttribute('tileid'))
                                    });
                                }
                                tile.animation = animation;
                                break;
                            }
                            case 'properties': {
                                this._parsePropertiesNode(tileChild, tile);
                                break;
                            }
                        }
                    }
                    if (strict) {
                        try {
                            tileset.tiles.push(TiledTile.parse(tile));
                        }
                        catch (e) {
                            console.error('Could not parse Tile', tile, e);
                            throw e;
                        }
                    }
                    else {
                        tileset.tiles.push(tile);
                    }
                    break;
                }
            }
        }
        if (strict) {
            try {
                return TiledTileset.parse(tileset);
            }
            catch (e) {
                console.error('Could not parse Tileset', tileset, e);
                throw e;
            }
        }
        return tileset;
    }
    parseTileLayer(layerNode, infinite, strict = true) {
        var _a, _b, _c;
        const layer = {};
        layer.type = 'tilelayer';
        layer.compression = ''; // default uncompressed
        layer.x = 0;
        layer.y = 0;
        layer.opacity = 1;
        layer.visible = true;
        this._parseAttributes(layerNode, layer);
        for (let layerChild of layerNode.children) {
            switch (layerChild.tagName) {
                case 'properties': {
                    this._parsePropertiesNode(layerChild, layer);
                    break;
                }
                case 'data': {
                    if (infinite) {
                        layer.width = 0;
                        layer.height = 0;
                        layer.chunks = [];
                        // Tiled appears to have an undocumented minimum bounds
                        let bounds = new BoundingBox(0, 0, 0, 0);
                        for (let chunkTag of layerChild.children) {
                            if (chunkTag.tagName === 'chunk') {
                                const chunk = {};
                                this._parseAttributes(chunkTag, chunk);
                                // If infinite there is no encoding other than CSV!
                                chunk.data = (_a = chunkTag.textContent) === null || _a === void 0 ? void 0 : _a.split(',').map(id => +id);
                                // combining bounding boxes actually probably is easiest here
                                const chunkBounds = new BoundingBox(chunk.x, chunk.y, chunk.width, chunk.height);
                                bounds = bounds.combine(chunkBounds);
                                layer.chunks.push(chunk);
                            }
                        }
                        layer.width = bounds.width;
                        layer.height = bounds.height;
                        layer.startx = bounds.x;
                        layer.starty = bounds.y;
                        this._largestBounds = this._largestBounds.combine(new BoundingBox(layer.startx, layer.starty, layer.width, layer.height));
                    }
                    else {
                        const encoding = layerChild.getAttribute('encoding');
                        // technically breaking compat, but this is useful
                        layer.encoding = encoding;
                        const compression = layerChild.getAttribute('compression');
                        if (compression) {
                            layer.compression = compression;
                        }
                        switch (layer.encoding) {
                            case 'base64': {
                                layer.data = (_b = layerChild.textContent) === null || _b === void 0 ? void 0 : _b.trim();
                                break;
                            }
                            case 'csv': { // csv case
                                layer.data = (_c = layerChild.textContent) === null || _c === void 0 ? void 0 : _c.split(',').map(id => +id);
                                break;
                            }
                        }
                    }
                }
            }
        }
        if (strict) {
            try {
                return TiledLayer.parse(layer);
            }
            catch (e) {
                console.error('Could not parse tiled tile layer', layer, e);
                throw e;
            }
        }
        return layer;
    }
    parseObjectGroup(groupNode, strict = true) {
        const group = {};
        group.type = 'objectgroup';
        group.draworder = 'topdown';
        group.visible = true;
        group.x = 0;
        group.y = 0;
        group.opacity = 1;
        group.objects = [];
        this._parseAttributes(groupNode, group);
        for (let groupChild of groupNode.children) {
            switch (groupChild.tagName) {
                case 'properties': {
                    this._parsePropertiesNode(groupChild, group);
                    break;
                }
                case 'object': {
                    const object = this.parseObject(groupChild, strict);
                    group.objects.push(object);
                    break;
                }
            }
        }
        if (strict) {
            try {
                return TiledLayer.parse(group);
            }
            catch (e) {
                console.error('Could not parse object group', group, e);
                throw e;
            }
        }
        return group;
    }
    parseImageLayer(imageNode, strict = true) {
        const imageLayer = {};
        imageLayer.type = 'imagelayer';
        imageLayer.visible = true;
        imageLayer.x = 0;
        imageLayer.y = 0;
        imageLayer.opacity = 1;
        const image = imageNode.querySelector('image');
        imageLayer.image = image === null || image === void 0 ? void 0 : image.getAttribute('source');
        const properties = imageNode.querySelector('properties');
        if (properties) {
            this._parsePropertiesNode(properties, imageLayer);
        }
        const transparentcolor = image === null || image === void 0 ? void 0 : image.getAttribute('trans');
        if (transparentcolor) {
            imageLayer.transparentcolor = '#' + transparentcolor;
        }
        this._parseAttributes(imageNode, imageLayer);
        if (strict) {
            try {
                return TiledLayer.parse(imageLayer);
            }
            catch (e) {
                console.error('Could not parse layer', imageLayer, e);
                throw e;
            }
        }
        return imageLayer;
    }
    parseExternalTemplate(txXml, strict = true) {
        const doc = this._parseToDocument(txXml);
        const templateElement = doc.querySelector('template');
        const template = {};
        template.type = 'template';
        const objectElement = templateElement.querySelector('object');
        if (objectElement) {
            template.object = this.parseObject(objectElement, strict);
        }
        const tileSetElement = templateElement.querySelector('tileset');
        if (tileSetElement) {
            template.tileset = this.parseTileset(tileSetElement, strict);
        }
        if (strict) {
            try {
                return TiledTemplate.parse(template);
            }
            catch (e) {
                console.error('Could not parse template', template, e);
                throw e;
            }
        }
        return template;
    }
    /**
     * Takes Tiled tmx xml and produces the equivalent Tiled txj (json) content
     * @param tsxXml
     */
    parseExternalTileset(tsxXml, strict = true) {
        const doc = this._parseToDocument(tsxXml);
        const tilesetElement = doc.querySelector('tileset');
        const tileset = this.parseTileset(tilesetElement, strict);
        tileset.type = 'tileset';
        this._parseAttributes(tilesetElement, tileset);
        if (strict) {
            try {
                return TiledTilesetFile.parse(tileset);
            }
            catch (e) {
                console.error('Could not parse tileset file', tileset, e);
                throw e;
            }
        }
        return tileset;
    }
    /**
     * Takes Tiled tmx xml and produces the equivalent Tiled tmj (json) content
     * @param tmxXml
     * @returns
     */
    parse(tmxXml, strict = true) {
        const doc = this._parseToDocument(tmxXml);
        const mapElement = doc.querySelector('map');
        const tiledMap = {};
        tiledMap.type = 'map';
        tiledMap.compressionlevel = -1;
        tiledMap.layers = [];
        tiledMap.tilesets = [];
        this._parseAttributes(mapElement, tiledMap);
        const parseHelper = (node, strict = true) => {
            switch (node.tagName) {
                case 'group': {
                    // recurse through groups!
                    // currently we support groups by flattening them, no group types
                    for (let child of node.children) {
                        parseHelper(child, strict);
                    }
                    break;
                }
                case 'layer': {
                    const layer = this.parseTileLayer(node, tiledMap.infinite, strict);
                    tiledMap.layers.push(layer);
                    break;
                }
                case 'properties': {
                    this._parsePropertiesNode(node, tiledMap);
                    break;
                }
                case 'tileset': {
                    const tileset = this.parseTileset(node, strict);
                    tiledMap.tilesets.push(tileset);
                    break;
                }
                case 'objectgroup': {
                    const objectgroup = this.parseObjectGroup(node, strict);
                    tiledMap.layers.push(objectgroup);
                    break;
                }
                case 'imagelayer': {
                    const imageLayer = this.parseImageLayer(node, strict);
                    tiledMap.layers.push(imageLayer);
                    break;
                }
            }
        };
        // Parse all layers
        for (let mapChild of mapElement.children) {
            parseHelper(mapChild, strict);
        }
        if (strict) {
            try {
                return TiledMap.parse(tiledMap);
            }
            catch (e) {
                console.error('Could not parse Tiled map', e);
                throw e;
            }
        }
        return tiledMap;
    }
}


/***/ }),

/***/ "./src/resource/decoder.ts":
/*!*********************************!*\
  !*** ./src/resource/decoder.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Decoder: () => (/* binding */ Decoder)
/* harmony export */ });
/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pako */ "./node_modules/pako/index.js");
/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pako__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var zstddec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zstddec */ "./node_modules/zstddec/dist/zstddec.modern.js");
// gzip & zlib

// zstd

class Decoder {
    /**
     * Decodes any compressed/encoded Tiled data and produces the canonical list of Tiled gids
     * @param data
     * @param options
     */
    static decode(data, compression) {
        var i, j, l, tmp, placeHolders, arr;
        if (data.length % 4 > 0) {
            throw new Error('Invalid string. Length must be a multiple of 4');
        }
        var PLUS = '+'.charCodeAt(0);
        var SLASH = '/'.charCodeAt(0);
        var NUMBER = '0'.charCodeAt(0);
        var LOWER = 'a'.charCodeAt(0);
        var UPPER = 'A'.charCodeAt(0);
        var PLUS_URL_SAFE = '-'.charCodeAt(0);
        var SLASH_URL_SAFE = '_'.charCodeAt(0);
        function decode(elt) {
            var code = elt.charCodeAt(0);
            if (code === PLUS || code === PLUS_URL_SAFE)
                return 62; // '+'
            if (code === SLASH || code === SLASH_URL_SAFE)
                return 63; // '/'
            if (code < NUMBER)
                return -1; // no match
            if (code < NUMBER + 10)
                return code - NUMBER + 26 + 26;
            if (code < UPPER + 26)
                return code - UPPER;
            if (code < LOWER + 26)
                return code - LOWER + 26;
            throw Error('Could not decode elt');
        }
        // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice
        var len = data.length;
        placeHolders = data.charAt(len - 2) === '=' ? 2 : data.charAt(len - 1) === '=' ? 1 : 0;
        // base64 is 4/3 + up to two characters of the original data
        arr = new Uint8Array(data.length * 3 / 4 - placeHolders);
        // if there are placeholders, only get up to the last complete 4 chars
        l = placeHolders > 0 ? data.length - 4 : data.length;
        var L = 0;
        function push(v) {
            arr[L++] = v;
        }
        for (i = 0, j = 0; i < l; i += 4, j += 3) {
            tmp = (decode(data.charAt(i)) << 18) | (decode(data.charAt(i + 1)) << 12) | (decode(data.charAt(i + 2)) << 6) | decode(data.charAt(i + 3));
            push((tmp & 0xFF0000) >> 16);
            push((tmp & 0xFF00) >> 8);
            push(tmp & 0xFF);
        }
        if (placeHolders === 2) {
            tmp = (decode(data.charAt(i)) << 2) | (decode(data.charAt(i + 1)) >> 4);
            push(tmp & 0xFF);
        }
        else if (placeHolders === 1) {
            tmp = (decode(data.charAt(i)) << 10) | (decode(data.charAt(i + 1)) << 4) | (decode(data.charAt(i + 2)) >> 2);
            push((tmp >> 8) & 0xFF);
            push(tmp & 0xFF);
        }
        return new Promise(resolve => {
            const toNumber = function (byteArray) {
                var value = 0;
                for (var i = byteArray.length - 1; i >= 0; i--) {
                    value = (value * 256) + byteArray[i] * 1;
                }
                return value;
            };
            // Byte array
            // handle compression
            if ("zlib" === compression || "gzip" === compression) {
                arr = (0,pako__WEBPACK_IMPORTED_MODULE_0__.inflate)(arr);
                var resultLen = arr.length / 4;
                var result = new Array(resultLen);
                for (i = 0; i < resultLen; i++) {
                    result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));
                }
                resolve(result);
            }
            if ("zstd" === compression) {
                const decoder = new zstddec__WEBPACK_IMPORTED_MODULE_1__.ZSTDDecoder();
                decoder.init().then(() => {
                    arr = decoder.decode(arr);
                    var resultLen = arr.length / 4;
                    var result = new Array(resultLen);
                    for (i = 0; i < resultLen; i++) {
                        result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));
                    }
                    resolve(result);
                });
            }
            // no compression just base64
            if (!compression) {
                var resultLen = arr.length / 4;
                var result = new Array(resultLen);
                for (i = 0; i < resultLen; i++) {
                    result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));
                }
                resolve(result);
            }
        });
    }
}


/***/ }),

/***/ "./src/resource/excalibur-properties.ts":
/*!**********************************************!*\
  !*** ./src/resource/excalibur-properties.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExcaliburTiledProperties: () => (/* binding */ ExcaliburTiledProperties)
/* harmony export */ });
/**
 * Special excalibur properties
 */
const ExcaliburTiledProperties = {
    TileData: {
        Tiled: 'ex-tiled'
    },
    ZIndex: {
        /**
         * Override the default z-index based on the ordering in Tiled
         */
        ZIndex: 'zindex'
    },
    Camera: {
        /**
         * Boolean property on an object to treat as the excalibur camera if truthy
         *
         * Warning, the plugin will use the first object it finds with this property!
         */
        Camera: 'camera',
        Zoom: 'zoom'
    },
    Animation: {
        /**
         * String property with any value from the ex.AnimationStrategy enum (case insensitive)
         */
        Strategy: 'animationstrategy'
    },
    Layer: {
        /**
         * Boolean property on a TileLayer, if truthy any tile on the layer will be treated as solid
         *
         * Boolean property on a ObjectLayer, if truthy any object will be created as an actor, objects
         * will have a default collision type of preventcollision, see the collisiontype property.
         */
        Solid: 'solid'
    },
    Collision: {
        /**
         * String property with any value from the ex.CollisionType enum (case insensitive)
         */
        Type: 'collisiontype'
    }
};


/***/ }),

/***/ "./src/resource/file-loader.ts":
/*!*************************************!*\
  !*** ./src/resource/file-loader.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FetchLoader: () => (/* binding */ FetchLoader)
/* harmony export */ });
const FetchLoader = async (path, contentType) => {
    const response = await fetch(path);
    switch (contentType.toLowerCase()) {
        case 'xml': return await response.text();
        case 'json': return await response.json();
        default: return await response.text();
    }
};


/***/ }),

/***/ "./src/resource/filter-util.ts":
/*!*************************************!*\
  !*** ./src/resource/filter-util.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   byClassCaseInsensitive: () => (/* binding */ byClassCaseInsensitive),
/* harmony export */   byNameCaseInsensitive: () => (/* binding */ byNameCaseInsensitive),
/* harmony export */   byPropertyCaseInsensitive: () => (/* binding */ byPropertyCaseInsensitive)
/* harmony export */ });
const byNameCaseInsensitive = (name) => {
    return (object) => {
        if ((object === null || object === void 0 ? void 0 : object.name) && name) {
            return object.name.toLocaleLowerCase().localeCompare(name.toLocaleLowerCase()) === 0;
        }
        return (object === null || object === void 0 ? void 0 : object.name) === name;
    };
};
const byClassCaseInsensitive = (className) => {
    return (object) => {
        if ((object === null || object === void 0 ? void 0 : object.class) && className) {
            return object.class.toLocaleLowerCase().localeCompare(className.toLocaleLowerCase()) === 0;
        }
        return (object === null || object === void 0 ? void 0 : object.class) === className;
    };
};
const copyPropsLowerCase = (properties) => {
    const lowercase = new Map();
    for (let [key, value] of properties) {
        let normalizedValue = value;
        if (typeof value === 'string') {
            normalizedValue = value.toLocaleLowerCase();
        }
        lowercase.set(key.toLocaleLowerCase(), normalizedValue);
    }
    return lowercase;
};
const byPropertyCaseInsensitive = (propertyName, value) => {
    return (object) => {
        const lowercase = copyPropsLowerCase(object.properties);
        if (value !== undefined) {
            let normalizedValue = value;
            if (typeof value === 'string') {
                normalizedValue = value.toLocaleLowerCase();
            }
            return lowercase.get(propertyName.toLocaleLowerCase()) === normalizedValue;
        }
        else {
            return lowercase.has(propertyName.toLocaleLowerCase());
        }
    };
};


/***/ }),

/***/ "./src/resource/gid-util.ts":
/*!**********************************!*\
  !*** ./src/resource/gid-util.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FLIPPED_DIAGONALLY_FLAG: () => (/* binding */ FLIPPED_DIAGONALLY_FLAG),
/* harmony export */   FLIPPED_HORIZONTALLY_FLAG: () => (/* binding */ FLIPPED_HORIZONTALLY_FLAG),
/* harmony export */   FLIPPED_VERTICALLY_FLAG: () => (/* binding */ FLIPPED_VERTICALLY_FLAG),
/* harmony export */   getCanonicalGid: () => (/* binding */ getCanonicalGid),
/* harmony export */   isFlippedDiagonally: () => (/* binding */ isFlippedDiagonally),
/* harmony export */   isFlippedHorizontally: () => (/* binding */ isFlippedHorizontally),
/* harmony export */   isFlippedVertically: () => (/* binding */ isFlippedVertically)
/* harmony export */ });
// Most significant byte of 32 bit id contains flags for flipping
// See https://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tile-flipping
const FLIPPED_HORIZONTALLY_FLAG = 0x80000000;
const FLIPPED_VERTICALLY_FLAG = 0x40000000;
const FLIPPED_DIAGONALLY_FLAG = 0x20000000;
/**
 * Inspects gid for horizontal flag
 * @param gid
 */
const isFlippedHorizontally = (gid) => {
    return !!(gid & FLIPPED_HORIZONTALLY_FLAG);
};
/**
 * Inspects gid for vertical flag
 * @param gid
 */
const isFlippedVertically = (gid) => {
    return !!(gid & FLIPPED_VERTICALLY_FLAG);
};
/**
 * Inspects gid for diagonal flag (anti-diagonal flip enables tile rotation)
 * @param gid
 */
const isFlippedDiagonally = (gid) => {
    return !!(gid & FLIPPED_DIAGONALLY_FLAG);
};
/**
 * Removes bit flags from gid
 * @param gid
 */
const getCanonicalGid = (gid) => {
    return gid & ~(FLIPPED_HORIZONTALLY_FLAG |
        FLIPPED_VERTICALLY_FLAG |
        FLIPPED_DIAGONALLY_FLAG);
};


/***/ }),

/***/ "./src/resource/image-layer.ts":
/*!*************************************!*\
  !*** ./src/resource/image-layer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageLayer: () => (/* binding */ ImageLayer)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./properties */ "./src/resource/properties.ts");
/* harmony import */ var _path_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path-util */ "./src/resource/path-util.ts");



class ImageLayer {
    constructor(tiledImageLayer, resource, order) {
        this.tiledImageLayer = tiledImageLayer;
        this.resource = resource;
        this.order = order;
        this.properties = new Map();
        this.image = null;
        this.imageActor = null;
        this.name = tiledImageLayer.name;
        this.class = tiledImageLayer.class;
        (0,_properties__WEBPACK_IMPORTED_MODULE_1__.mapProps)(this, tiledImageLayer.properties);
        if (tiledImageLayer.image) {
            this.image = new excalibur__WEBPACK_IMPORTED_MODULE_0__.ImageSource((0,_path_util__WEBPACK_IMPORTED_MODULE_2__.pathRelativeToBase)(this.resource.path, tiledImageLayer.image, this.resource.pathMap));
        }
    }
    async load() {
        var _a, _b, _c, _d;
        const opacity = this.tiledImageLayer.opacity;
        const hasTint = !!this.tiledImageLayer.tintcolor;
        const tint = this.tiledImageLayer.tintcolor ? excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.fromHex(this.tiledImageLayer.tintcolor) : excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.White;
        const offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((_a = this.tiledImageLayer.offsetx) !== null && _a !== void 0 ? _a : 0, (_b = this.tiledImageLayer.offsety) !== null && _b !== void 0 ? _b : 0);
        const parallaxx = (_c = this.tiledImageLayer.parallaxx) !== null && _c !== void 0 ? _c : 1;
        const parallaxy = (_d = this.tiledImageLayer.parallaxy) !== null && _d !== void 0 ? _d : 1;
        if (this.image) {
            if (!this.resource.headless) {
                await this.image.load();
            }
            this.imageActor = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Actor({
                name: this.tiledImageLayer.name,
                pos: offset,
                anchor: excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero,
                z: this.order
            });
            this.imageActor.addComponent(new excalibur__WEBPACK_IMPORTED_MODULE_0__.ParallaxComponent((0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(parallaxx, parallaxy)));
            // FIXME when excalibur supports tiling we should use it here for repeatx/repeaty!
            const sprite = this.image.toSprite();
            this.imageActor.graphics.use(sprite);
            this.imageActor.graphics.visible = this.tiledImageLayer.visible;
            this.imageActor.graphics.opacity = opacity;
            if (hasTint) {
                sprite.tint = tint;
            }
        }
    }
}


/***/ }),

/***/ "./src/resource/iso-tile-layer.ts":
/*!****************************************!*\
  !*** ./src/resource/iso-tile-layer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IsoTileLayer: () => (/* binding */ IsoTileLayer)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./properties */ "./src/resource/properties.ts");
/* harmony import */ var _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/tiled-parser */ "./src/parser/tiled-parser.ts");
/* harmony import */ var _decoder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./decoder */ "./src/resource/decoder.ts");
/* harmony import */ var _gid_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gid-util */ "./src/resource/gid-util.ts");
/* harmony import */ var _excalibur_properties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./excalibur-properties */ "./src/resource/excalibur-properties.ts");
/* harmony import */ var _tiled_layer_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tiled-layer-component */ "./src/resource/tiled-layer-component.ts");
/* harmony import */ var _filter_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./filter-util */ "./src/resource/filter-util.ts");








class IsoTileLayer {
    constructor(tiledTileLayer, resource, order) {
        this.tiledTileLayer = tiledTileLayer;
        this.resource = resource;
        this.order = order;
        this.logger = excalibur__WEBPACK_IMPORTED_MODULE_0__.Logger.getInstance();
        /**
         * Number of tiles wide
         */
        this.width = 0;
        /**
         * Number of tiles high
         */
        this.height = 0;
        this.properties = new Map();
        /**
         * Original list of gids for this layer from tiled
         */
        this.data = [];
        this._gidToTileInfo = new Map();
        this.name = tiledTileLayer.name;
        this.class = tiledTileLayer.class;
        this.width = tiledTileLayer.width;
        this.height = tiledTileLayer.height;
        (0,_properties__WEBPACK_IMPORTED_MODULE_1__.mapProps)(this, tiledTileLayer.properties);
    }
    /**
     * Returns the excalibur tiles that match a tiled gid
     */
    getTilesByGid(gid) {
        var _a;
        return (_a = this._gidToTileInfo.get(gid)) !== null && _a !== void 0 ? _a : [];
    }
    /**
     * Returns the excalibur tiles that match a tiled class name
     * @param className
     */
    getTilesByClassName(className) {
        const tiles = this.isometricMap.tiles.filter(t => {
            const maybeTiled = t.data.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled);
            if (maybeTiled) {
                return (0,_filter_util__WEBPACK_IMPORTED_MODULE_7__.byClassCaseInsensitive)(className)(maybeTiled);
            }
            return false;
        });
        return tiles.map(t => ({
            exTile: t,
            tiledTile: t.data.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled)
        }));
    }
    /**
     * Returns the excalibur tiles that match a tiled property and optional value
     * @param name
     * @param value
     */
    getTilesByProperty(name, value) {
        const tiles = this.isometricMap.tiles.filter(t => {
            const maybeTiled = t.data.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled);
            if (maybeTiled) {
                return (0,_filter_util__WEBPACK_IMPORTED_MODULE_7__.byPropertyCaseInsensitive)(name, value)(maybeTiled);
            }
            return false;
        });
        return tiles.map(t => ({
            exTile: t,
            tiledTile: t.data.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled)
        }));
    }
    getTileByPoint(worldPos) {
        if (!this.isometricMap) {
            this.logger.warn('IsometricMap has not yet been loaded! getTileByPoint() will only return null');
            return null;
        }
        if (this.isometricMap) {
            const exTile = this.isometricMap.getTileByPoint(worldPos);
            if (!exTile)
                return null;
            const tileIndex = this.isometricMap.tiles.indexOf(exTile);
            const gid = (0,_gid_util__WEBPACK_IMPORTED_MODULE_4__.getCanonicalGid)(this.data[tileIndex]);
            if (gid <= 0) {
                return null;
            }
            const tileset = this.resource.getTilesetForTileGid(gid);
            const tiledTile = tileset.getTileByGid(gid);
            return { tiledTile, exTile };
        }
        return null;
    }
    _recordTileData(gid, tile) {
        let tiles = this._gidToTileInfo.get(gid);
        let tileset = this.resource.getTilesetForTileGid(gid);
        let maybeTile = tileset.getTileByGid(gid);
        if (!tiles) {
            tiles = [{ exTile: tile, tiledTile: maybeTile }];
        }
        else {
            tiles.push({ exTile: tile, tiledTile: maybeTile });
        }
        this._gidToTileInfo.set(gid, tiles);
        tile.data.set(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled, maybeTile);
    }
    updateTile(tile, gid, hasTint, tint, isSolidLayer) {
        this._recordTileData(gid, tile);
        if (this.resource.useExcaliburWiring && isSolidLayer) {
            tile.solid = true;
        }
        const iso = tile.get(excalibur__WEBPACK_IMPORTED_MODULE_0__.IsometricEntityComponent);
        if (iso) {
            iso.elevation = this.order;
        }
        const tileset = this.resource.getTilesetForTileGid(gid);
        let sprite = tileset.getSpriteForGid(gid);
        if (hasTint) {
            sprite = sprite.clone();
            sprite.tint = tint;
        }
        tile.addGraphic(sprite, { offset: tileset.tileOffset });
        let offset = tile.pos;
        if (tileset.orientation === 'orthogonal') {
            // Odd rendering case when mixing/matching iso maps with orthogonal tilesets
            offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 0);
        }
        else {
            const halfWidth = this.resource.map.tilewidth / 2;
            const height = this.resource.map.tileheight;
            offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(halfWidth, height);
        }
        // the whole tilemap uses a giant composite collider relative to the Tilemap
        // not individual tiles
        const colliders = tileset.getCollidersForGid(gid, { offset });
        for (let collider of colliders) {
            tile.addCollider(collider);
        }
        let animation = tileset.getAnimationForGid(gid);
        if (animation) {
            if (hasTint) {
                animation = animation.clone();
                animation.tint = tint;
            }
            tile.clearGraphics();
            tile.addGraphic(animation, { offset: tileset.tileOffset });
            if (this.resource.useExcaliburWiring) {
                const tileObj = tileset.getTileByGid(gid);
                const strategy = tileObj === null || tileObj === void 0 ? void 0 : tileObj.properties.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.Animation.Strategy);
                if (strategy && typeof strategy === 'string') {
                    switch (strategy.toLowerCase()) {
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.End.toLowerCase(): {
                            animation.strategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.End;
                            break;
                        }
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Freeze.toLowerCase(): {
                            animation.strategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Freeze;
                            break;
                        }
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Loop.toLowerCase(): {
                            animation.strategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Loop;
                            break;
                        }
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.PingPong.toLowerCase(): {
                            animation.strategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.PingPong;
                            break;
                        }
                        default: {
                            // unknown animation strategy
                            this.logger.warn(`Unknown animation strategy in tileset ${tileset.name} on tile gid ${gid}: ${strategy}`);
                            break;
                        }
                    }
                }
            }
        }
    }
    async load() {
        var _a, _b, _c, _d;
        const layer = this.tiledTileLayer;
        const isSolidLayer = !!this.properties.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.Layer.Solid);
        const opacity = this.tiledTileLayer.opacity;
        const hasTint = !!this.tiledTileLayer.tintcolor;
        const tint = this.tiledTileLayer.tintcolor ? excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.fromHex(this.tiledTileLayer.tintcolor) : excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.Transparent;
        const pos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((_a = layer.offsetx) !== null && _a !== void 0 ? _a : 0, (_b = layer.offsety) !== null && _b !== void 0 ? _b : 0);
        if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.needsDecoding)(this.tiledTileLayer)) {
            this.data = await _decoder__WEBPACK_IMPORTED_MODULE_3__.Decoder.decode(this.tiledTileLayer.data, this.tiledTileLayer.compression);
        }
        else if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isCSV)(this.tiledTileLayer)) {
            this.data = this.tiledTileLayer.data;
        }
        let order = this.order;
        let zoverride = this.properties.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.ZIndex.ZIndex);
        if (typeof zoverride === 'number') {
            order = zoverride;
        }
        if (this.resource.map.infinite && (0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isInfiniteLayer)(this.tiledTileLayer)) {
            const start = this.resource.isometricTiledCoordToWorld(this.tiledTileLayer.startx, this.tiledTileLayer.starty);
            const infiniteStartPos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(start.x * this.resource.map.tilewidth, start.y * this.resource.map.tileheight);
            this.isometricMap = new excalibur__WEBPACK_IMPORTED_MODULE_0__.IsometricMap({
                name: this.name,
                pos: pos.add(infiniteStartPos),
                tileHeight: this.resource.map.tileheight,
                tileWidth: this.resource.map.tilewidth,
                columns: layer.width,
                rows: layer.height,
                elevation: order
            });
        }
        else {
            this.isometricMap = new excalibur__WEBPACK_IMPORTED_MODULE_0__.IsometricMap({
                name: this.name,
                pos,
                tileWidth: this.resource.map.tilewidth,
                tileHeight: this.resource.map.tileheight,
                columns: layer.width,
                rows: layer.height,
                elevation: order
            });
        }
        // TODO make these optional params in the ctor
        this.isometricMap.visible = this.tiledTileLayer.visible;
        this.isometricMap.opacity = this.tiledTileLayer.opacity;
        this.isometricMap.addComponent(new _tiled_layer_component__WEBPACK_IMPORTED_MODULE_6__.TiledLayerDataComponent({ tiledTileLayer: layer }));
        if (layer.parallaxx || layer.parallaxy) {
            const factor = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((_c = layer.parallaxx) !== null && _c !== void 0 ? _c : 1, (_d = layer.parallaxy) !== null && _d !== void 0 ? _d : 1);
            this.isometricMap.addComponent(new excalibur__WEBPACK_IMPORTED_MODULE_0__.ParallaxComponent(factor));
        }
        if (this.resource.map.infinite && (0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isInfiniteLayer)(this.tiledTileLayer)) {
            for (let chunk of this.tiledTileLayer.chunks) {
                for (let i = 0; i < chunk.data.length; i++) {
                    const gid = chunk.data[i];
                    if (gid != 0) {
                        // Map from chunk to big tile map
                        const tileX = (i % chunk.width) + (chunk.x - this.tiledTileLayer.startx);
                        const tileY = Math.floor(i / chunk.width) + (chunk.y - this.tiledTileLayer.starty);
                        const tile = this.isometricMap.tiles[tileX + tileY * layer.width];
                        this.updateTile(tile, gid, hasTint, tint, isSolidLayer);
                    }
                }
            }
        }
        else {
            // Read tiled data into Excalibur's tilemap type
            for (let i = 0; i < this.data.length; i++) {
                let gid = this.data[i];
                if (gid !== 0) {
                    const tile = this.isometricMap.tiles[i];
                    this.updateTile(tile, gid, hasTint, tint, isSolidLayer);
                }
            }
        }
    }
}


/***/ }),

/***/ "./src/resource/layer.ts":
/*!*******************************!*\
  !*** ./src/resource/layer.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/resource/loader-cache.ts":
/*!**************************************!*\
  !*** ./src/resource/loader-cache.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LoaderCache: () => (/* binding */ LoaderCache)
/* harmony export */ });
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/**
 * Read through cache for loadables
 */
class LoaderCache {
    constructor(type) {
        this.type = type;
        this._loaded = false;
        this.cache = new Map();
    }
    getOrAdd(...args) {
        let resource = this.cache.get(args.join('+'));
        if (resource) {
            return resource;
        }
        resource = new this.type(...args);
        this.cache.set(args.join('+'), resource);
        return resource;
    }
    values() {
        if (this._loaded) {
            return Array.from(this.cache.values());
        }
        throw new Error(`Read through cache not yet loaded! No values to return!`);
    }
    async load() {
        const resources = Array.from(this.cache.entries());
        const results = await Promise.allSettled(resources.map(i => i[1].load()));
        // Check for errors loading resources
        let errored = 0;
        for (let i = 0; i < results.length; i++) {
            const result = results[i];
            if (result.status === 'rejected') {
                console.error(`Error loading resource at ${resources[i][0]}, is your pathMap correct? or your Tiled map corrupted?`, result.reason);
                errored++;
            }
        }
        if (errored) {
            throw new Error(`Error loading ${errored} resources`);
        }
        this._loaded = true;
    }
}


/***/ }),

/***/ "./src/resource/object-layer.ts":
/*!**************************************!*\
  !*** ./src/resource/object-layer.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ObjectLayer: () => (/* binding */ ObjectLayer)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _objects__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./objects */ "./src/resource/objects.ts");
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./properties */ "./src/resource/properties.ts");
/* harmony import */ var _filter_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filter-util */ "./src/resource/filter-util.ts");
/* harmony import */ var _excalibur_properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./excalibur-properties */ "./src/resource/excalibur-properties.ts");
/* harmony import */ var _tiled_data_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tiled-data-component */ "./src/resource/tiled-data-component.ts");






class ObjectLayer {
    constructor(tiledObjectLayer, resource, order) {
        this.tiledObjectLayer = tiledObjectLayer;
        this.resource = resource;
        this.order = order;
        this.logger = excalibur__WEBPACK_IMPORTED_MODULE_0__.Logger.getInstance();
        this.properties = new Map();
        this.objects = [];
        this.entities = [];
        this._objectToEntity = new Map();
        this._entityToObject = new Map();
        this._loaded = false;
        this.name = tiledObjectLayer.name;
        this.class = tiledObjectLayer.class;
        (0,_properties__WEBPACK_IMPORTED_MODULE_2__.mapProps)(this, tiledObjectLayer.properties);
    }
    _logLoadedWarning(name) {
        this.logger.warn(`ObjectLayer ${this.name} is not yet loaded, ${name}() will always be empty!`);
    }
    getObjectsByName(name) {
        if (!this._loaded)
            this._logLoadedWarning('getObjectsByName');
        return this.objects.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_3__.byNameCaseInsensitive)(name));
    }
    getEntitiesByName(name) {
        if (!this._loaded)
            this._logLoadedWarning('getEntitiesByName');
        return this.entities.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_3__.byNameCaseInsensitive)(name));
    }
    getEntityByObject(object) {
        if (!this._loaded)
            this._logLoadedWarning('getEntityByObject');
        return this._objectToEntity.get(object);
    }
    getObjectByEntity(actor) {
        if (!this._loaded)
            this._logLoadedWarning('getObjectByEntity');
        return this._entityToObject.get(actor);
    }
    /**
     * Search for a tiled object that has a property name, and optionally specify a value
     * @param propertyName
     * @param value
     * @returns
     */
    getObjectsByProperty(propertyName, value) {
        if (!this._loaded)
            this._logLoadedWarning('getObjectsByProperty');
        return this.objects.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_3__.byPropertyCaseInsensitive)(propertyName, value));
    }
    /**
     * Search for actors that were created from tiled objects
     * @returns
     */
    getEntitiesByProperty(propertyName, value) {
        if (!this._loaded)
            this._logLoadedWarning('getEntitiesByProperty');
        return this.getObjectsByProperty(propertyName, value).map(o => this._objectToEntity.get(o)).filter(a => !!a);
    }
    /**
     * Search for an Tiled object by it's Tiled class name
     * @returns
     */
    getObjectsByClassName(className) {
        if (!this._loaded)
            this._logLoadedWarning('getObjectsByClassName');
        return this.objects.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_3__.byClassCaseInsensitive)(className));
    }
    /**
     * Search for an Actor created by the plugin by it's Tiled object
     * @param className
     * @returns
     */
    getEntitiesByClassName(className) {
        if (!this._loaded)
            this._logLoadedWarning('getEntitiesByClassName');
        return this.getObjectsByClassName(className).map(o => this._objectToEntity.get(o)).filter(a => !!a);
    }
    getTemplates() {
        if (!this._loaded)
            this._logLoadedWarning('getTemplates');
        return this.objects.filter(o => o instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.TemplateObject);
    }
    /**
     * Runs or re-runs a specific registered factory given a class name on this object layer
     * @param className
     */
    runFactory(className) {
        var _a, _b, _c, _d;
        const offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((_a = this.tiledObjectLayer.offsetx) !== null && _a !== void 0 ? _a : 0, (_b = this.tiledObjectLayer.offsety) !== null && _b !== void 0 ? _b : 0);
        // create a copy of the objects to prevent editing the current collection
        const objects = this.objects.slice();
        for (let object of objects) {
            let objectType = object.class;
            if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.TemplateObject) {
                objectType = objectType ? objectType : object.template.object.class;
            }
            if (className !== objectType)
                continue;
            let worldPos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(((_c = object.x) !== null && _c !== void 0 ? _c : 0) + offset.x, ((_d = object.y) !== null && _d !== void 0 ? _d : 0) + offset.y);
            // When isometric, Tiled positions are in isometric coordinates
            if (this.resource.map.orientation === 'isometric') {
                worldPos = this.resource.isometricTiledCoordToWorld(worldPos.x, worldPos.y);
            }
            const factory = this.resource.factories.get(className);
            if (factory) {
                // TODO does this entity get added to the scene?
                const entity = factory({
                    worldPos,
                    name: object.name,
                    class: objectType,
                    layer: this,
                    object,
                    properties: object.properties
                });
                if (entity) {
                    this._recordObjectEntityMapping(object, entity);
                }
            }
        }
    }
    _actorFromObject(object, newActor, tileset) {
        var _a, _b, _c, _d, _e, _f;
        const headless = this.resource.headless;
        const hasTint = !!this.tiledObjectLayer.tintcolor;
        const tint = this.tiledObjectLayer.tintcolor ? excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.fromHex(this.tiledObjectLayer.tintcolor) : excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.White;
        if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.InsertedTile && tileset) {
            // handle case where we have isometric map but orthogonal tileset!s
            const overrideAlignment = this.resource.map.orientation === 'isometric' && tileset.orientation === 'orthogonal' ? 'bottom' : undefined;
            const anchor = tileset.getTilesetAlignmentAnchor(overrideAlignment);
            // Inserted tiles pivot from the bottom left in Tiled
            newActor.anchor = anchor;
            const scaleX = ((_a = object.tiledObject.width) !== null && _a !== void 0 ? _a : this.resource.map.tilewidth) / this.resource.map.tilewidth;
            const scaleY = ((_b = object.tiledObject.width) !== null && _b !== void 0 ? _b : this.resource.map.tilewidth) / this.resource.map.tilewidth;
            const scale = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(scaleX, scaleY);
            if (!headless) {
                // need to clone because we are modify sprite properties, sprites are shared by default
                const sprite = tileset.getSpriteForGid(object.gid).clone();
                sprite.destSize.width = (_c = object.tiledObject.width) !== null && _c !== void 0 ? _c : sprite.width;
                sprite.destSize.height = (_d = object.tiledObject.height) !== null && _d !== void 0 ? _d : sprite.height;
                if (hasTint) {
                    sprite.tint = tint;
                }
                newActor.graphics.use(sprite);
                newActor.graphics.offset = tileset.tileOffset;
                const animation = tileset.getAnimationForGid(object.gid);
                if (animation) {
                    const animationScaled = animation.clone();
                    animationScaled.scale = scale;
                    if (hasTint) {
                        animationScaled.tint = tint;
                    }
                    newActor.graphics.use(animationScaled);
                    newActor.graphics.offset = tileset.tileOffset;
                }
            }
            // insertable tiles have an x, y, width, height, gid
            // by default they pivot from the bottom left (0, 1)
            const width = ((_e = object.tiledObject.width) !== null && _e !== void 0 ? _e : 0);
            const height = ((_f = object.tiledObject.height) !== null && _f !== void 0 ? _f : 0);
            const offsetx = -width * anchor.x;
            const offsety = -height * anchor.y;
            const halfTileWidth = this.resource.map.tilewidth / 2;
            const tileHeight = this.resource.map.tileheight;
            let offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(offsetx, offsety);
            if (this.resource.map.orientation === 'isometric') {
                offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(offsetx + halfTileWidth, offsety + tileHeight);
                if (tileset.orientation === 'orthogonal') {
                    // Handling odd case where the tileset is orthogonal but the map is isometric
                    offset = offset.sub((0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(halfTileWidth, tileHeight));
                }
            }
            const colliders = tileset.getCollidersForGid(object.gid, { anchor: excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero, scale, offset });
            if (colliders.length) {
                newActor.collider.useCompositeCollider(colliders);
            }
            else {
                let width = object.width;
                let height = object.height;
                if (this.resource.map.orientation === 'isometric') {
                    // Isometric uses height to organize grid alignment
                    const dimension = object.height / 2;
                    width = dimension;
                    height = dimension;
                }
                // Anchor at 1,1 for isometric is a quirk of the coord transformation
                let boxCollider = excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Box(width, height, this.resource.map.orientation === 'isometric' ? (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(1, 1) : (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 1));
                if (this.resource.map.orientation === 'isometric') {
                    boxCollider.points = boxCollider.points.map(p => this.resource.isometricTiledCoordToWorld(p.x, p.y));
                }
                newActor.collider.set(boxCollider);
            }
        }
        if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.Text) {
            newActor.graphics.use(object.text);
        }
        if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.Polygon) {
            let pos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(object.x, object.y);
            let points = object.localPoints;
            if (this.resource.map.orientation === 'isometric') {
                pos = this.resource.isometricTiledCoordToWorld(pos.x, pos.y);
                points = points.map(p => this.resource.isometricTiledCoordToWorld(p.x, p.y));
            }
            newActor.anchor = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 1);
            newActor.pos = pos;
            const polygon = excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Polygon(points, excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero, true);
            if (!polygon.isConvex()) {
                newActor.collider.set(polygon.triangulate());
            }
            else {
                newActor.collider.set(polygon);
            }
        }
        if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.Rectangle) {
            newActor.anchor = object.anchor;
            let boxCollider = excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Box(object.width, object.height, object.anchor);
            if (this.resource.map.orientation === 'isometric') {
                boxCollider.points = boxCollider.points.map(p => this.resource.isometricTiledCoordToWorld(p.x, p.y));
            }
            newActor.collider.set(boxCollider);
        }
        if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.Ellipse) {
            // FIXME: Circles are positioned differently in isometric as ellipses and currently arent supported
            // FIXME: Excalibur doesn't support ellipses :( fallback to circle
            // pick the smallest dimension and that's our radius
            newActor.collider.useCircleCollider(Math.min(object.width, object.height) / 2);
        }
    }
    async load() {
        var _a, _b, _c, _d, _e;
        const opacity = this.tiledObjectLayer.opacity;
        const offset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((_a = this.tiledObjectLayer.offsetx) !== null && _a !== void 0 ? _a : 0, (_b = this.tiledObjectLayer.offsety) !== null && _b !== void 0 ? _b : 0);
        const objects = (0,_objects__WEBPACK_IMPORTED_MODULE_1__.parseObjects)(this.tiledObjectLayer, this.resource);
        for (let object of objects) {
            let worldPos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(((_c = object.x) !== null && _c !== void 0 ? _c : 0) + offset.x, ((_d = object.y) !== null && _d !== void 0 ? _d : 0) + offset.y);
            // When isometric, Tiled positions are in isometric coordinates
            if (this.resource.map.orientation === 'isometric') {
                worldPos = this.resource.isometricTiledCoordToWorld(worldPos.x, worldPos.y);
            }
            let objectType = object.class;
            if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.TemplateObject) {
                objectType = objectType ? objectType : object.template.object.class;
            }
            if (objectType) {
                const factory = this.resource.factories.get(objectType);
                if (factory) {
                    const entity = factory({
                        worldPos,
                        name: object.name,
                        class: objectType,
                        layer: this,
                        object,
                        properties: object.properties
                    });
                    if (entity) {
                        this._recordObjectEntityMapping(object, entity);
                    }
                    continue; // If we do a factor method we skip any default processing
                }
            }
            let zindex = undefined;
            let zoverride = this.properties.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_4__.ExcaliburTiledProperties.ZIndex.ZIndex);
            if (typeof zoverride === 'number') {
                zindex = zoverride;
            }
            const newActor = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Actor({
                name: object.tiledObject.name,
                pos: worldPos,
                anchor: excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero,
                rotation: (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.toRadians)((_e = object.tiledObject.rotation) !== null && _e !== void 0 ? _e : 0),
                z: zindex
            });
            const graphics = newActor.get(excalibur__WEBPACK_IMPORTED_MODULE_0__.GraphicsComponent);
            if (graphics) {
                graphics.visible = this.tiledObjectLayer.visible && (object.tiledObject.visible === undefined ? true : !!object.tiledObject.visible);
                graphics.opacity = opacity;
            }
            if (this.resource.map.orientation === 'isometric') {
                const iso = new excalibur__WEBPACK_IMPORTED_MODULE_0__.IsometricEntityComponent({
                    rows: this.resource.map.height,
                    columns: this.resource.map.width,
                    tileWidth: this.resource.map.tilewidth,
                    tileHeight: this.resource.map.tileheight
                });
                iso.elevation = zindex !== null && zindex !== void 0 ? zindex : this.order;
                newActor.addComponent(iso);
            }
            if (this.resource.useExcaliburWiring) {
                const collisionType = object.properties.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_4__.ExcaliburTiledProperties.Collision.Type);
                if (collisionType && typeof collisionType === 'string') {
                    switch (collisionType.toLowerCase()) {
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.Active.toLowerCase(): {
                            newActor.body.collisionType = excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.Active;
                            break;
                        }
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.Fixed.toLowerCase(): {
                            newActor.body.collisionType = excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.Fixed;
                            break;
                        }
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.Passive.toLowerCase(): {
                            newActor.body.collisionType = excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.Passive;
                            break;
                        }
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.PreventCollision.toLowerCase(): {
                            newActor.body.collisionType = excalibur__WEBPACK_IMPORTED_MODULE_0__.CollisionType.PreventCollision;
                            break;
                        }
                        default: {
                            this.logger.warn(`Unknown collision type in layer ${this.name}, for object id ${object.id} and name ${object.name}: ${collisionType}`);
                            break;
                        }
                    }
                }
            }
            if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.TemplateObject) {
                // templates reference their own tilesets
                const tileset = object.template.tileset;
                if (object.template.object) {
                    this._actorFromObject(object.template.object, newActor, tileset);
                }
            }
            else {
                let tileset;
                if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_1__.InsertedTile) {
                    tileset = this.resource.getTilesetForTileGid(object.gid);
                }
                this._actorFromObject(object, newActor, tileset);
            }
            this._recordObjectEntityMapping(object, newActor);
        }
        this._loaded = true;
    }
    _recordObjectEntityMapping(object, entity) {
        entity.addComponent(new _tiled_data_component__WEBPACK_IMPORTED_MODULE_5__.TiledDataComponent({
            tiledObject: object
        }));
        this.objects.push(object);
        this.entities.push(entity);
        this._objectToEntity.set(object, entity);
        this._entityToObject.set(entity, object);
    }
}


/***/ }),

/***/ "./src/resource/objects.ts":
/*!*********************************!*\
  !*** ./src/resource/objects.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ellipse: () => (/* binding */ Ellipse),
/* harmony export */   InsertedTile: () => (/* binding */ InsertedTile),
/* harmony export */   PluginObject: () => (/* binding */ PluginObject),
/* harmony export */   Point: () => (/* binding */ Point),
/* harmony export */   Polygon: () => (/* binding */ Polygon),
/* harmony export */   Polyline: () => (/* binding */ Polyline),
/* harmony export */   Rectangle: () => (/* binding */ Rectangle),
/* harmony export */   TemplateObject: () => (/* binding */ TemplateObject),
/* harmony export */   Text: () => (/* binding */ Text),
/* harmony export */   parseObject: () => (/* binding */ parseObject),
/* harmony export */   parseObjects: () => (/* binding */ parseObjects)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./properties */ "./src/resource/properties.ts");
/* harmony import */ var _path_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path-util */ "./src/resource/path-util.ts");




/**
 * Plugin object represents the base class of a generic instance of an object used in a map.
 *
 * It could be more specific as well.
 */
class PluginObject {
    constructor(props) {
        var _a, _b, _c;
        this.properties = new Map();
        this.tiledObject = props.tiledObject;
        this.name = this.tiledObject.name;
        // Yes this is class in the Tiled UI, it switched from Type -> Class but not all the representations match
        // class mostly synonymous with type in tiled except for a few instances
        this.class = this.tiledObject.type;
        this.id = (_a = this.tiledObject.id) !== null && _a !== void 0 ? _a : -1;
        this.x = (_b = this.tiledObject.x) !== null && _b !== void 0 ? _b : 0;
        this.y = (_c = this.tiledObject.y) !== null && _c !== void 0 ? _c : 0;
    }
}
/**
 * Represents a template instance in a map.
 *
 * Inherits properties, class, and name from template if not overridden.
 */
class TemplateObject extends PluginObject {
    constructor(tiledObject, template) {
        super({ tiledObject });
        if (!tiledObject.template)
            throw new Error('Invalid template');
        this.source = tiledObject.template;
        this.tiledTemplate = tiledObject;
        this.template = template;
        // Inherited from template object
        if (template.object) {
            this.name = this.name || template.object.name;
            this.class = this.class || template.object.class;
            for (const [key, value] of template.object.properties.entries()) {
                if (!this.properties.has(key)) {
                    this.properties.set(key, value);
                }
            }
        }
        // Inherited from tileset
        if (template.tileset && template.object.tiledObject.gid) {
            const tile = template.tileset.getTileByGid(template.object.tiledObject.gid);
            if (tile) {
                this.class = this.class || tile.class;
                for (const [key, value] of tile.properties.entries()) {
                    if (!this.properties.has(key)) {
                        this.properties.set(key, value);
                    }
                }
            }
        }
    }
}
/**
 * Represents an instance of an inserted tile object in a map.
 */
class InsertedTile extends PluginObject {
    constructor(tiledObject, gid, width, height) {
        super({ tiledObject });
        this.gid = gid;
        this.width = width;
        this.height = height;
    }
}
/**
 * Represents an instance of a point object in a map
 */
class Point extends PluginObject {
}
/**
 * Represents an instance of a Text object in a map
 */
class Text extends PluginObject {
    constructor(tiledObject, text, width, textQuality) {
        var _a, _b, _c;
        super({ tiledObject });
        this.font = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Font({
            family: (_a = text.fontfamily) !== null && _a !== void 0 ? _a : 'sans-serif',
            color: text.color ? excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.fromHex(text.color) : excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.Black,
            size: (_b = text.pixelsize) !== null && _b !== void 0 ? _b : 16,
            unit: excalibur__WEBPACK_IMPORTED_MODULE_0__.FontUnit.Px,
            textAlign: this._textAlignFromTiled(text.halign),
            baseAlign: this._textBaselineFromTiled(text.valign),
            quality: textQuality
        });
        const textWrap = (_c = text.wrap) !== null && _c !== void 0 ? _c : false;
        this.text = new excalibur__WEBPACK_IMPORTED_MODULE_0__.Text({
            text: text.text,
            font: this.font,
            ...(textWrap ? {
                maxWidth: width + 10 // FIXME: need to bump by a few pixels for some reason
            } : {})
        });
    }
    _textBaselineFromTiled(code) {
        switch (code) {
            case 'bottom': {
                return excalibur__WEBPACK_IMPORTED_MODULE_0__.BaseAlign.Bottom;
            }
            case 'center': {
                return excalibur__WEBPACK_IMPORTED_MODULE_0__.BaseAlign.Middle;
            }
            case 'top': {
                return excalibur__WEBPACK_IMPORTED_MODULE_0__.BaseAlign.Top;
            }
            default: {
                return excalibur__WEBPACK_IMPORTED_MODULE_0__.BaseAlign.Top;
            }
        }
    }
    _textAlignFromTiled(code) {
        switch (code) {
            case 'left': {
                return excalibur__WEBPACK_IMPORTED_MODULE_0__.TextAlign.Left;
            }
            case 'center': {
                return excalibur__WEBPACK_IMPORTED_MODULE_0__.TextAlign.Center;
            }
            case 'right': {
                return excalibur__WEBPACK_IMPORTED_MODULE_0__.TextAlign.Right;
            }
            case 'justify': {
                return excalibur__WEBPACK_IMPORTED_MODULE_0__.TextAlign.Start;
            }
            default: {
                return excalibur__WEBPACK_IMPORTED_MODULE_0__.TextAlign.Left;
            }
        }
    }
}
/**
 * Represents an instance of an ellipse object in a map.
 */
class Ellipse extends PluginObject {
    constructor(tiledObject, width, height) {
        super({ tiledObject });
        this.width = width;
        this.height = height;
    }
}
/**
 * Represents an instance of a rectangle object in a map.
 */
class Rectangle extends PluginObject {
    constructor(tiledObject, width, height, anchor) {
        super({ tiledObject });
        this.width = width;
        this.height = height;
        this.anchor = anchor;
    }
}
/**
 * Represents an instance of a polygon object in a map.
 */
class Polygon extends PluginObject {
    constructor(tiledObject, points) {
        super({ tiledObject });
        /**
         * Transformed world space points
         */
        this.points = [];
        /**
         * Local space points
         */
        this.localPoints = [];
        this.localPoints = points.map(p => (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(p.x, p.y));
        this.points = points.map(p => (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(p.x, p.y).add((0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(this.x, this.y)));
    }
}
/**
 * Represents an instance of a polyline object in a map
 */
class Polyline extends PluginObject {
    constructor(tiledObject, points) {
        super({ tiledObject });
        this.points = [];
        this.points = points.map(p => (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(p.x, p.y));
    }
}
/**
 * Parses a TiledObject and returns a friendly plugin object.
 * @param object
 * @param resource
 * @returns
 */
function parseObject(object, resource) {
    var _a, _b, _c, _d;
    let newObject;
    if (object.point) {
        // Template objects don't have an id for some reason
        newObject = new Point({ tiledObject: object });
    }
    else if (object.ellipse) {
        if (object.width && object.height) {
            // if defaulted the circle center is accurate, otherwise need to be offset by radius
            newObject = new Ellipse(object, object.width, object.height);
            newObject.x += object.width / 2;
            newObject.y += object.height / 2;
        }
        else {
            // Tiled undocumented default is 20x20
            newObject = new Ellipse(object, 20, 20);
        }
    }
    else if (object.polygon) {
        newObject = new Polygon(object, object.polygon);
    }
    else if (object.polyline) {
        newObject = new Polyline(object, object.polyline);
    }
    else if (object.text) {
        newObject = new Text(object, object.text, (_a = object.width) !== null && _a !== void 0 ? _a : 0, (_b = resource === null || resource === void 0 ? void 0 : resource.textQuality) !== null && _b !== void 0 ? _b : 4);
    }
    else if (object.gid) {
        newObject = new InsertedTile(object, object.gid, (_c = object.width) !== null && _c !== void 0 ? _c : 0, (_d = object.height) !== null && _d !== void 0 ? _d : 0);
        // Check for inherited class names & properties from tileset
        const tileset = resource === null || resource === void 0 ? void 0 : resource.getTilesetForTileGid(object.gid);
        let className = object.type;
        if (tileset) {
            const tile = tileset === null || tileset === void 0 ? void 0 : tileset.getTileByGid(object.gid);
            className = className || (tile === null || tile === void 0 ? void 0 : tile.class);
            if (tile === null || tile === void 0 ? void 0 : tile.properties) {
                for (const [key, value] of tile.properties.entries()) {
                    if (!newObject.properties.has(key)) {
                        newObject.properties.set(key, value);
                    }
                }
            }
        }
        newObject.class = className;
    }
    else if (object.template && resource) {
        // FIXME This is problematic if you have files with the same name but different paths
        const template = resource.templates.find(t => (0,_path_util__WEBPACK_IMPORTED_MODULE_2__.filenameFromPath)(t.templatePath) === (0,_path_util__WEBPACK_IMPORTED_MODULE_2__.filenameFromPath)(object.template));
        if (template) {
            newObject = new TemplateObject(object, template);
        }
        else {
            // This is truly an error situation
            throw new Error(`Template object id ${object.id} with name ${object.name} is missing a loaded template file, there should be one loaded from ${object.template}! Is your tiled map or template corrupted?`);
        }
    }
    else { // rectangle
        if (object.width && object.height) {
            // if defaulted the rectangle center is accurate, otherwise need to be offset by radius
            newObject = new Rectangle(object, object.width, object.height, excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero);
        }
        else {
            // Tiled undocumented default is 20x20 AND pivots around the center
            newObject = new Rectangle(object, 20, 20, excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Half);
        }
    }
    (0,_properties__WEBPACK_IMPORTED_MODULE_1__.mapProps)(newObject, object.properties);
    return newObject;
}
/**
 * Parses a Tiled Object Group and returns friendly plugin objects.
 * @param tiledObjectGroup
 * @param resource
 * @returns
 */
function parseObjects(tiledObjectGroup, resource) {
    const objects = [];
    for (const object of tiledObjectGroup.objects) {
        let newObject = parseObject(object, resource);
        objects.push(newObject);
    }
    return objects;
}


/***/ }),

/***/ "./src/resource/path-util.ts":
/*!***********************************!*\
  !*** ./src/resource/path-util.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filenameFromPath: () => (/* binding */ filenameFromPath),
/* harmony export */   mapPath: () => (/* binding */ mapPath),
/* harmony export */   pathInMap: () => (/* binding */ pathInMap),
/* harmony export */   pathRelativeToBase: () => (/* binding */ pathRelativeToBase)
/* harmony export */ });
function filenameFromPath(inputPath) {
    const filenameExpression = /[^/\\&\?]+\.\w{2,4}(?=([\#\?&].*$|$))/ig;
    const matches = inputPath.match(filenameExpression);
    if (matches) {
        const match = matches[0];
        return match;
    }
    throw new Error(`Could not locate filename from path: ${inputPath}`);
}
function mapPath(inputPath, pathMap) {
    for (const { path, output } of pathMap) {
        if (typeof path === 'string') {
            if (inputPath.includes(path)) {
                return output;
            }
        }
        else {
            const match = inputPath.match(path);
            if (match) {
                return output.replace('[match]', match[0]);
                ;
            }
        }
    }
    return inputPath;
}
function pathInMap(inputPath, pathMap) {
    if (!pathMap)
        return false;
    for (const { path, output } of pathMap) {
        if (typeof path === 'string') {
            if (inputPath.includes(path)) {
                return true;
            }
        }
        else {
            const match = inputPath.match(path);
            if (match) {
                return true;
            }
        }
    }
    return false;
}
function pathRelativeToBase(basePath, relativeToBase, pathMap) {
    if (pathInMap(relativeToBase, pathMap) && pathMap) {
        return mapPath(relativeToBase, pathMap);
    }
    // Use absolute path if specified
    if (relativeToBase.indexOf('/') === 0) {
        return relativeToBase;
    }
    const originSplit = basePath.split('/');
    const relativeSplit = relativeToBase.split('/');
    // if origin path is a file, remove it so it's a directory
    if (originSplit[originSplit.length - 1].includes('.')) {
        originSplit.pop();
    }
    return originSplit.concat(relativeSplit).join('/');
}


/***/ }),

/***/ "./src/resource/properties.ts":
/*!************************************!*\
  !*** ./src/resource/properties.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mapProps: () => (/* binding */ mapProps)
/* harmony export */ });
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/**
 * Maps the tiled source properties, to a JS property map with all keys/values normalized to lowercase where appropriate
 * @param target
 * @param sourceProps
 */
function mapProps(target, sourceProps) {
    try {
        if (sourceProps) {
            for (const prop of sourceProps) {
                let value = prop.value;
                if (typeof prop.value === 'string') {
                    value = prop.value.toLocaleLowerCase();
                }
                target.properties.set(prop.name.toLocaleLowerCase(), value);
            }
        }
    }
    catch (e) {
        console.error(`Unable to map properties onto ${target}`, e);
    }
}


/***/ }),

/***/ "./src/resource/template-resource.ts":
/*!*******************************************!*\
  !*** ./src/resource/template-resource.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TemplateResource: () => (/* binding */ TemplateResource)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tiled-parser */ "./src/parser/tiled-parser.ts");
/* harmony import */ var _file_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file-loader */ "./src/resource/file-loader.ts");
/* harmony import */ var _loader_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loader-cache */ "./src/resource/loader-cache.ts");
/* harmony import */ var _objects__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./objects */ "./src/resource/objects.ts");
/* harmony import */ var _path_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./path-util */ "./src/resource/path-util.ts");
/* harmony import */ var _template__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./template */ "./src/resource/template.ts");
/* harmony import */ var _tileset_resource__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tileset-resource */ "./src/resource/tileset-resource.ts");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");








/**
 * Templates are basically a mini tiled resource, they have a self contained object and optionally a tileset
 *
 * They can be used to instance objects in ObjectLayers, or as part of Tile Collider definitions
 */
class TemplateResource {
    constructor(templatePath, options) {
        this.templatePath = templatePath;
        this.headless = false;
        this.strict = true;
        this.fileLoader = _file_loader__WEBPACK_IMPORTED_MODULE_2__.FetchLoader;
        const { fileLoader, parser, pathMap, imageLoader, strict, headless } = { ...options };
        this.headless = headless !== null && headless !== void 0 ? headless : this.headless;
        this.strict = strict !== null && strict !== void 0 ? strict : this.strict;
        this.fileLoader = fileLoader !== null && fileLoader !== void 0 ? fileLoader : this.fileLoader;
        this.imageLoader = imageLoader !== null && imageLoader !== void 0 ? imageLoader : new _loader_cache__WEBPACK_IMPORTED_MODULE_3__.LoaderCache(excalibur__WEBPACK_IMPORTED_MODULE_0__.ImageSource);
        this.parser = parser !== null && parser !== void 0 ? parser : new _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_1__.TiledParser();
        this.pathMap = pathMap;
    }
    isLoaded() {
        return !!this.data;
    }
    async load() {
        const templateType = this.templatePath.includes('.tx') ? 'xml' : 'json';
        try {
            const content = await this.fileLoader(this.templatePath, templateType);
            let template;
            if (templateType === 'xml') {
                template = this.parser.parseExternalTemplate(content, this.strict);
            }
            else {
                if (this.strict) {
                    template = _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_1__.TiledTemplate.parse(content);
                }
                else {
                    template = content;
                }
            }
            const tiledTemplate = template;
            const object = (0,_objects__WEBPACK_IMPORTED_MODULE_4__.parseObject)(template.object);
            let tileset = undefined;
            if (template.tileset) {
                // Template tilesets are not included in the TiledResource list because their gids can collide with map tilesets
                const tilesetPath = (0,_path_util__WEBPACK_IMPORTED_MODULE_5__.pathRelativeToBase)(this.templatePath, template.tileset.source, this.pathMap);
                const tilesetResource = new _tileset_resource__WEBPACK_IMPORTED_MODULE_7__.TilesetResource(tilesetPath, template.tileset.firstgid, {
                    headless: this.headless,
                    strict: this.strict,
                    fileLoader: this.fileLoader,
                    imageLoader: this.imageLoader,
                    parser: this.parser,
                    pathMap: this.pathMap
                });
                tileset = await tilesetResource.load();
            }
            return this.data = new _template__WEBPACK_IMPORTED_MODULE_6__.Template({
                templatePath: this.templatePath,
                tiledTemplate,
                object,
                tileset
            });
        }
        catch (e) {
            console.error(`Could not load template at ${this.templatePath}, check to see if your pathMap is correct or if you're Tiled map is corrupted`);
            throw e;
        }
    }
}


/***/ }),

/***/ "./src/resource/template.ts":
/*!**********************************!*\
  !*** ./src/resource/template.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Template: () => (/* binding */ Template)
/* harmony export */ });
/**
 * Templates are basically a mini tiled resource, they have a self contained object and optionally a tileset
 *
 * They can be used to instance objects in ObjectLayers, or as part of Tile Collider definitions
 */
class Template {
    constructor(options) {
        const { templatePath, object, tiledTemplate, tileset } = options;
        this.templatePath = templatePath;
        this.object = object;
        this.tiledTemplate = tiledTemplate;
        this.tileset = tileset;
    }
}


/***/ }),

/***/ "./src/resource/tile-layer.ts":
/*!************************************!*\
  !*** ./src/resource/tile-layer.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TileLayer: () => (/* binding */ TileLayer)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./properties */ "./src/resource/properties.ts");
/* harmony import */ var _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/tiled-parser */ "./src/parser/tiled-parser.ts");
/* harmony import */ var _decoder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./decoder */ "./src/resource/decoder.ts");
/* harmony import */ var _gid_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gid-util */ "./src/resource/gid-util.ts");
/* harmony import */ var _excalibur_properties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./excalibur-properties */ "./src/resource/excalibur-properties.ts");
/* harmony import */ var _tiled_layer_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tiled-layer-component */ "./src/resource/tiled-layer-component.ts");
/* harmony import */ var _filter_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./filter-util */ "./src/resource/filter-util.ts");








class TileLayer {
    /**
     * Returns the excalibur tiles that match a tiled gid
     */
    getTilesByGid(gid) {
        var _a;
        return (_a = this._gidToTileInfo.get(gid)) !== null && _a !== void 0 ? _a : [];
    }
    /**
     * Returns the excalibur tiles that match a tiled class name
     * @param className
     */
    getTilesByClassName(className) {
        const tiles = this.tilemap.tiles.filter(t => {
            const maybeTiled = t.data.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled);
            if (maybeTiled) {
                return (0,_filter_util__WEBPACK_IMPORTED_MODULE_7__.byClassCaseInsensitive)(className)(maybeTiled);
            }
            return false;
        });
        return tiles.map(t => ({
            exTile: t,
            tiledTile: t.data.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled)
        }));
    }
    /**
     * Returns the excalibur tiles that match a tiled property and optional value
     * @param name
     * @param value
     */
    getTilesByProperty(name, value) {
        const tiles = this.tilemap.tiles.filter(t => {
            const maybeTiled = t.data.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled);
            if (maybeTiled) {
                return (0,_filter_util__WEBPACK_IMPORTED_MODULE_7__.byPropertyCaseInsensitive)(name, value)(maybeTiled);
            }
            return false;
        });
        return tiles.map(t => ({
            exTile: t,
            tiledTile: t.data.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled)
        }));
    }
    getTileByPoint(worldPos) {
        if (!this.tilemap) {
            this.logger.warn('Tilemap has not yet been loaded! getTileByPoint() will only return null');
            return null;
        }
        if (this.tilemap) {
            const exTile = this.tilemap.getTileByPoint(worldPos);
            if (!exTile)
                return null;
            const tileIndex = this.tilemap.tiles.indexOf(exTile);
            const gid = (0,_gid_util__WEBPACK_IMPORTED_MODULE_4__.getCanonicalGid)(this.data[tileIndex]);
            if (gid <= 0) {
                return null;
            }
            const tileset = this.resource.getTilesetForTileGid(gid);
            const tiledTile = tileset.getTileByGid(gid);
            return { tiledTile, exTile };
        }
        return null;
    }
    getTileByCoordinate(x, y) {
        if (!this.tilemap) {
            this.logger.warn('Tilemap has not yet been loaded! getTileByCoordinate() will only return null');
            return null;
        }
        if (this.tilemap) {
            const exTile = this.tilemap.getTile(x, y);
            const tileIndex = this.tilemap.tiles.indexOf(exTile);
            const gid = (0,_gid_util__WEBPACK_IMPORTED_MODULE_4__.getCanonicalGid)(this.data[tileIndex]);
            if (gid <= 0) {
                return null;
            }
            const tileset = this.resource.getTilesetForTileGid(gid);
            const tiledTile = tileset.getTileByGid(gid);
            return { tiledTile, exTile };
        }
        return null;
    }
    constructor(tiledTileLayer, resource, order) {
        this.tiledTileLayer = tiledTileLayer;
        this.resource = resource;
        this.order = order;
        this.logger = excalibur__WEBPACK_IMPORTED_MODULE_0__.Logger.getInstance();
        /**
         * Number of tiles wide
         */
        this.width = 0;
        /**
         * Number of tiles high
         */
        this.height = 0;
        this.properties = new Map();
        /**
         * Original list of gids for this layer from tiled
         */
        this.data = [];
        this._gidToTileInfo = new Map();
        this.name = tiledTileLayer.name;
        this.class = tiledTileLayer.class;
        this.width = tiledTileLayer.width;
        this.height = tiledTileLayer.height;
        (0,_properties__WEBPACK_IMPORTED_MODULE_1__.mapProps)(this, tiledTileLayer.properties);
    }
    _recordTileData(gid, tile) {
        let tiles = this._gidToTileInfo.get(gid);
        let tileset = this.resource.getTilesetForTileGid(gid);
        let maybeTile = tileset.getTileByGid(gid);
        if (!tiles) {
            tiles = [{ exTile: tile, tiledTile: maybeTile }];
        }
        else {
            tiles.push({ exTile: tile, tiledTile: maybeTile });
        }
        this._gidToTileInfo.set(gid, tiles);
        tile.data.set(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.TileData.Tiled, maybeTile);
    }
    updateTile(tile, gid, hasTint, tint, isSolidLayer) {
        this._recordTileData(gid, tile);
        if (this.resource.useExcaliburWiring && isSolidLayer) {
            tile.solid = true;
        }
        const tileset = this.resource.getTilesetForTileGid(gid);
        const headless = this.resource.headless;
        if (!headless) {
            let sprite = tileset.getSpriteForGid(gid);
            if (hasTint) {
                sprite = sprite.clone();
                sprite.tint = tint;
            }
            tile.addGraphic(sprite, { offset: tileset.tileOffset });
        }
        // the whole tilemap uses a giant composite collider relative to the Tilemap
        // not individual tiles
        const colliders = tileset.getCollidersForGid(gid);
        for (let collider of colliders) {
            tile.addCollider(collider);
        }
        let animation = headless ? null : tileset.getAnimationForGid(gid);
        if (animation) {
            if (hasTint) {
                animation = animation.clone();
                animation.tint = tint;
            }
            tile.clearGraphics();
            tile.addGraphic(animation, { offset: tileset.tileOffset });
            if (this.resource.useExcaliburWiring) {
                const tileObj = tileset.getTileByGid(gid);
                const strategy = tileObj === null || tileObj === void 0 ? void 0 : tileObj.properties.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.Animation.Strategy);
                if (strategy && typeof strategy === 'string') {
                    switch (strategy.toLowerCase()) {
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.End.toLowerCase(): {
                            animation.strategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.End;
                            break;
                        }
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Freeze.toLowerCase(): {
                            animation.strategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Freeze;
                            break;
                        }
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Loop.toLowerCase(): {
                            animation.strategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Loop;
                            break;
                        }
                        case excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.PingPong.toLowerCase(): {
                            animation.strategy = excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.PingPong;
                            break;
                        }
                        default: {
                            // unknown animation strategy
                            this.logger.warn(`Unknown animation strategy in tileset ${tileset.name} on tile gid ${gid}: ${strategy}`);
                            break;
                        }
                    }
                }
            }
        }
    }
    async load() {
        var _a, _b, _c, _d;
        const opacity = this.tiledTileLayer.opacity;
        const hasTint = !!this.tiledTileLayer.tintcolor;
        const tint = this.tiledTileLayer.tintcolor ? excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.fromHex(this.tiledTileLayer.tintcolor) : excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.Transparent;
        const isSolidLayer = !!this.properties.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.Layer.Solid);
        const layer = this.tiledTileLayer;
        const pos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((_a = layer.offsetx) !== null && _a !== void 0 ? _a : 0, (_b = layer.offsety) !== null && _b !== void 0 ? _b : 0);
        if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.needsDecoding)(this.tiledTileLayer)) {
            this.data = await _decoder__WEBPACK_IMPORTED_MODULE_3__.Decoder.decode(this.tiledTileLayer.data, this.tiledTileLayer.compression);
        }
        else if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isCSV)(this.tiledTileLayer)) {
            this.data = this.tiledTileLayer.data;
        }
        // Create tilemap infinite or not
        if (this.resource.map.infinite && (0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isInfiniteLayer)(this.tiledTileLayer)) {
            const infiniteStartPos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(this.tiledTileLayer.startx * this.resource.map.tilewidth, this.tiledTileLayer.starty * this.resource.map.tileheight);
            this.tilemap = new excalibur__WEBPACK_IMPORTED_MODULE_0__.TileMap({
                name: this.name,
                pos: pos.add(infiniteStartPos),
                tileHeight: this.resource.map.tileheight,
                tileWidth: this.resource.map.tilewidth,
                columns: layer.width,
                rows: layer.height
            });
        }
        else {
            this.tilemap = new excalibur__WEBPACK_IMPORTED_MODULE_0__.TileMap({
                name: this.name,
                pos,
                tileWidth: this.resource.map.tilewidth,
                tileHeight: this.resource.map.tileheight,
                columns: layer.width,
                rows: layer.height,
            });
        }
        // Common tilemap props
        this.tilemap.addComponent(new _tiled_layer_component__WEBPACK_IMPORTED_MODULE_6__.TiledLayerDataComponent({ tiledTileLayer: layer }));
        const tx = this.tilemap.get(excalibur__WEBPACK_IMPORTED_MODULE_0__.TransformComponent);
        if (tx) {
            tx.z = this.order;
            let zoverride = this.properties.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_5__.ExcaliburTiledProperties.ZIndex.ZIndex);
            if (typeof zoverride === 'number') {
                tx.z = zoverride;
            }
        }
        const graphics = this.tilemap.get(excalibur__WEBPACK_IMPORTED_MODULE_0__.GraphicsComponent);
        if (graphics) {
            graphics.visible = this.tiledTileLayer.visible;
            graphics.opacity = opacity;
        }
        if (layer.parallaxx || layer.parallaxy) {
            const factor = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((_c = layer.parallaxx) !== null && _c !== void 0 ? _c : 1, (_d = layer.parallaxy) !== null && _d !== void 0 ? _d : 1);
            this.tilemap.addComponent(new excalibur__WEBPACK_IMPORTED_MODULE_0__.ParallaxComponent(factor));
        }
        // Parse tilemap data infinit or not
        if (this.resource.map.infinite && (0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isInfiniteLayer)(this.tiledTileLayer)) {
            for (let chunk of this.tiledTileLayer.chunks) {
                for (let i = 0; i < chunk.data.length; i++) {
                    const gid = chunk.data[i];
                    if (gid != 0) {
                        // Map from chunk to big tile map
                        const tileX = (i % chunk.width) + (chunk.x - this.tiledTileLayer.startx);
                        const tileY = Math.floor(i / chunk.width) + (chunk.y - this.tiledTileLayer.starty);
                        const tile = this.tilemap.tiles[tileX + tileY * layer.width];
                        this.updateTile(tile, gid, hasTint, tint, isSolidLayer);
                    }
                }
            }
        }
        else {
            // Read tiled data into Excalibur's tilemap type
            for (let i = 0; i < this.data.length; i++) {
                let gid = this.data[i];
                if (gid !== 0) {
                    const tile = this.tilemap.tiles[i];
                    this.updateTile(tile, gid, hasTint, tint, isSolidLayer);
                }
            }
        }
    }
}


/***/ }),

/***/ "./src/resource/tiled-data-component.ts":
/*!**********************************************!*\
  !*** ./src/resource/tiled-data-component.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledDataComponent: () => (/* binding */ TiledDataComponent)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);

class TiledDataComponent extends excalibur__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(options) {
        super();
        const { tiledObject } = options;
        this.tiledObject = tiledObject;
    }
}


/***/ }),

/***/ "./src/resource/tiled-layer-component.ts":
/*!***********************************************!*\
  !*** ./src/resource/tiled-layer-component.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledLayerDataComponent: () => (/* binding */ TiledLayerDataComponent)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);

class TiledLayerDataComponent extends excalibur__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(options) {
        super();
        const { tiledTileLayer } = options;
        this.tiledTileLayer = tiledTileLayer;
    }
}


/***/ }),

/***/ "./src/resource/tiled-resource.ts":
/*!****************************************!*\
  !*** ./src/resource/tiled-resource.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TiledResource: () => (/* binding */ TiledResource)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/tiled-parser */ "./src/parser/tiled-parser.ts");
/* harmony import */ var _tileset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tileset */ "./src/resource/tileset.ts");
/* harmony import */ var _iso_tile_layer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iso-tile-layer */ "./src/resource/iso-tile-layer.ts");
/* harmony import */ var _tile_layer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tile-layer */ "./src/resource/tile-layer.ts");
/* harmony import */ var _object_layer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object-layer */ "./src/resource/object-layer.ts");
/* harmony import */ var compare_versions__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! compare-versions */ "./node_modules/compare-versions/lib/esm/compare.js");
/* harmony import */ var _gid_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gid-util */ "./src/resource/gid-util.ts");
/* harmony import */ var _path_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./path-util */ "./src/resource/path-util.ts");
/* harmony import */ var _filter_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./filter-util */ "./src/resource/filter-util.ts");
/* harmony import */ var _excalibur_properties__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./excalibur-properties */ "./src/resource/excalibur-properties.ts");
/* harmony import */ var _file_loader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./file-loader */ "./src/resource/file-loader.ts");
/* harmony import */ var _tileset_resource__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./tileset-resource */ "./src/resource/tileset-resource.ts");
/* harmony import */ var _loader_cache__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./loader-cache */ "./src/resource/loader-cache.ts");
/* harmony import */ var _template_resource__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./template-resource */ "./src/resource/template-resource.ts");
/* harmony import */ var _image_layer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./image-layer */ "./src/resource/image-layer.ts");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
















class TiledResource {
    constructor(path, options) {
        this.path = path;
        this.logger = excalibur__WEBPACK_IMPORTED_MODULE_0__.Logger.getInstance();
        /**
         * A list of Tilesets from Tiled in a friendly data structure (original TSX/TSJ is available on that type)
         */
        this.tilesets = [];
        /**
         * A list of Templates from Tiled in a friendly data structure (original TX/TJ is available on that type)
         */
        this.templates = [];
        /**
         * A list of Layers from Tiled in a friendly data structure (original layer format is available on that type)
         *
         * Layers can either be an ObjectLayer, TileLayer, or ImageLayer
         *
         * GroupLayers don't exist in the plugin, they are flattened and the proper order preserved.
         */
        this.layers = [];
        this.mapFormat = 'TMX';
        this.strict = true;
        this.factories = new Map();
        this.parser = new _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_1__.TiledParser();
        this.fileLoader = _file_loader__WEBPACK_IMPORTED_MODULE_10__.FetchLoader;
        this.startZIndex = 0;
        this.textQuality = 4;
        this.useExcaliburWiring = true;
        this.useMapBackgroundColor = false;
        this.useTilemapCameraStrategy = false;
        this.headless = false;
        this._imageLoader = new _loader_cache__WEBPACK_IMPORTED_MODULE_12__.LoaderCache(excalibur__WEBPACK_IMPORTED_MODULE_0__.ImageSource);
        this._tilesetLoader = new _loader_cache__WEBPACK_IMPORTED_MODULE_12__.LoaderCache(_tileset_resource__WEBPACK_IMPORTED_MODULE_11__.TilesetResource);
        this._templateLoader = new _loader_cache__WEBPACK_IMPORTED_MODULE_12__.LoaderCache(_template_resource__WEBPACK_IMPORTED_MODULE_13__.TemplateResource);
        const { mapFormatOverride, textQuality, entityClassNameFactories, useExcaliburWiring, useTilemapCameraStrategy, useMapBackgroundColor, pathMap, fileLoader, strict, headless, startZIndex } = { ...options };
        this.strict = strict !== null && strict !== void 0 ? strict : this.strict;
        this.headless = headless !== null && headless !== void 0 ? headless : this.headless;
        this.useExcaliburWiring = useExcaliburWiring !== null && useExcaliburWiring !== void 0 ? useExcaliburWiring : this.useExcaliburWiring;
        this.useTilemapCameraStrategy = useTilemapCameraStrategy !== null && useTilemapCameraStrategy !== void 0 ? useTilemapCameraStrategy : this.useTilemapCameraStrategy;
        this.useMapBackgroundColor = useMapBackgroundColor !== null && useMapBackgroundColor !== void 0 ? useMapBackgroundColor : this.useMapBackgroundColor;
        this.textQuality = textQuality !== null && textQuality !== void 0 ? textQuality : this.textQuality;
        this.startZIndex = startZIndex !== null && startZIndex !== void 0 ? startZIndex : this.startZIndex;
        this.fileLoader = fileLoader !== null && fileLoader !== void 0 ? fileLoader : this.fileLoader;
        this.pathMap = pathMap;
        for (const key in entityClassNameFactories) {
            this.registerEntityFactory(key, entityClassNameFactories[key]);
        }
        this.mapFormat = mapFormatOverride !== null && mapFormatOverride !== void 0 ? mapFormatOverride : (path.includes('.tmx') ? 'TMX' : 'TMJ');
    }
    /**
     * Registers an entity factory to run on load, if added after load it will be run immediately
     * @param className
     * @param factory
     */
    registerEntityFactory(className, factory) {
        if (this.factories.has(className)) {
            console.warn(`Another factory has already been registered for tiled class/type "${className}", this is probably a bug.`);
        }
        this.factories.set(className, factory);
        if (this.isLoaded()) {
            for (let objectLayer of this.getObjectLayers()) {
                objectLayer.runFactory(className);
            }
        }
    }
    unregisterEntityFactory(className) {
        if (!this.factories.has(className)) {
            console.warn(`No factory has been registered for tiled class/type "${className}", cannot unregister!`);
        }
        this.factories.delete(className);
    }
    /**
     * Given a gid, find the Tileset it belongs to in the map!
     * @param gid
     * @returns
     */
    getTilesetForTileGid(gid) {
        const normalizedGid = (0,_gid_util__WEBPACK_IMPORTED_MODULE_6__.getCanonicalGid)(gid);
        if (this.tilesets) {
            for (let tileset of this.tilesets) {
                if (normalizedGid >= tileset.firstGid && normalizedGid <= tileset.firstGid + tileset.tileCount - 1) {
                    return tileset;
                }
            }
        }
        throw Error(`No tileset exists for tiled gid [${gid}] normalized [${normalizedGid}]!`);
    }
    /**
     * Queries for tilesets in the map by name (case insensitive)
     * @param name
     * @returns
     */
    getTilesetByName(name) {
        return this.tilesets.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byNameCaseInsensitive)(name));
    }
    /**
     * Queries for tilesets in the map by class name (case insensitive)
     * @param className
     * @returns
     */
    getTilesetByClassName(className) {
        return this.tilesets.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byClassCaseInsensitive)(className));
    }
    /**
     * Queries for tilesets in the map by property and an optional value (case insensitive)
     * @param propertyName
     * @param value
     * @returns
     */
    getTilesetByProperty(propertyName, value) {
        return this.tilesets.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byPropertyCaseInsensitive)(propertyName, value));
    }
    /**
     * Queries ALL tilesets tile data in the map for a specific class name (case insensitive)
     * @param className
     * @returns
     */
    getTileMetadataByClassName(className) {
        let results = [];
        for (let tileset of this.tilesets) {
            results = results.concat(tileset.tiles.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byClassCaseInsensitive)(className)));
        }
        return results;
    }
    /**
     * Queries ALL tilesets tile data in the map for a specific property and an optional value (case insensitive)
     * @param name
     * @param value
     * @returns
     */
    getTileMetadataByProperty(name, value) {
        let results = [];
        for (let tileset of this.tilesets) {
            results = results.concat(tileset.tiles.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byPropertyCaseInsensitive)(name, value)));
        }
        return results;
    }
    /**
     * Queries ALL tile layers tile instances in the map for a specific gid
     * @param className
     * @returns
     */
    getTilesByGid(gid) {
        if (this.map.orientation === 'orthogonal') {
            let results = [];
            for (let layer of this.getTileLayers()) {
                results = results.concat(layer.getTilesByGid(gid));
            }
            return results;
        }
        else {
            let results = [];
            for (let layer of this.getIsoTileLayers()) {
                results = results.concat(layer.getTilesByGid(gid));
            }
            return results;
        }
    }
    /**
     * Queries ALL tile layers tile instances in the map for a specific class name (case insensitive)
     * @param className
     * @returns
     */
    getTilesByClassName(className) {
        if (this.map.orientation === 'orthogonal') {
            let results = [];
            for (let layer of this.getTileLayers()) {
                results = results.concat(layer.getTilesByClassName(className));
            }
            return results;
        }
        else {
            let results = [];
            for (let layer of this.getIsoTileLayers()) {
                results = results.concat(layer.getTilesByClassName(className));
            }
            return results;
        }
    }
    /**
     *  Queries ALL tile layers tile instances in the map for a specific property and an optional value (case insensitive)
     * @param name
     * @param value
     * @returns
     */
    getTilesByProperty(name, value) {
        if (this.map.orientation === 'orthogonal') {
            let results = [];
            for (let layer of this.getTileLayers()) {
                results = results.concat(layer.getTilesByProperty(name, value));
            }
            return results;
        }
        else {
            let results = [];
            for (let layer of this.getIsoTileLayers()) {
                results = results.concat(layer.getTilesByProperty(name, value));
            }
            return results;
        }
    }
    /**
     * Returns a tile by the world position from a layer. (Uses the first layer name that matches case insensitive).
     * @param layerName
     * @param worldPos
     * @returns
     */
    getTileByPoint(layerName, worldPos) {
        if (this.map.orientation === 'isometric') {
            const layer = this.getIsoTileLayers().find((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byNameCaseInsensitive)(layerName));
            if (layer) {
                return layer.getTileByPoint(worldPos);
            }
        }
        else {
            const layer = this.getTileLayers().find((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byNameCaseInsensitive)(layerName));
            if (layer) {
                return layer.getTileByPoint(worldPos);
            }
        }
        return null;
    }
    /**
     * Returns a tile by the world position from a layer. (Uses the first layer name that matches case insensitive).
     * @param layerName
     * @param worldPos
     * @returns
     */
    getTilesByPoint(worldPos) {
        if (this.map.orientation === 'orthogonal') {
            let results = [];
            for (let layer of this.getTileLayers()) {
                const maybeTile = layer.getTileByPoint(worldPos);
                if (maybeTile) {
                    results.push(maybeTile);
                }
            }
            return results;
        }
        else {
            let results = [];
            for (let layer of this.getIsoTileLayers()) {
                const maybeTile = layer.getTileByPoint(worldPos);
                if (maybeTile) {
                    results.push(maybeTile);
                }
            }
            return results;
        }
    }
    /**
     * Queries all layers for objects that match a name (case insensitive)
     * @param name
     * @returns
     */
    getObjectsByName(name) {
        let results = [];
        for (let objectlayer of this.getObjectLayers()) {
            results = results.concat(objectlayer.getObjectsByName(name));
        }
        return results;
    }
    getEntitiesByName(name) {
        let results = [];
        for (let objectlayer of this.getObjectLayers()) {
            results = results.concat(objectlayer.getEntitiesByName(name));
        }
        return results;
    }
    getEntityByObject(object) {
        for (let objectlayer of this.getObjectLayers()) {
            const entity = objectlayer.getEntityByObject(object);
            if (entity) {
                return entity;
            }
        }
        return;
    }
    getObjectByEntity(actor) {
        for (let objectlayer of this.getObjectLayers()) {
            const object = objectlayer.getObjectByEntity(actor);
            if (object) {
                return object;
            }
        }
        return;
    }
    /**
     * Search for a tiled object that has a property name, and optionally specify a value
     * @param propertyName
     * @param value
     * @returns
     */
    getObjectsByProperty(propertyName, value) {
        let results = [];
        for (let objectlayer of this.getObjectLayers()) {
            results = results.concat(objectlayer.getObjectsByProperty(propertyName, value));
        }
        return results;
    }
    /**
     * Search for actors that were created from tiled objects
     * @returns
     */
    getEntitiesByProperty(propertyName, value) {
        let results = [];
        for (let objectlayer of this.getObjectLayers()) {
            results = results.concat(objectlayer.getEntitiesByProperty(propertyName, value));
        }
        return results;
    }
    /**
     * Search for an Tiled object by it's Tiled class name
     * @returns
     */
    getObjectsByClassName(className) {
        let results = [];
        for (let objectlayer of this.getObjectLayers()) {
            results = results.concat(objectlayer.getObjectsByClassName(className));
        }
        return results;
    }
    /**
     * Search for an Actor created by the plugin by it's Tiled object
     * @param className
     * @returns
     */
    getEntitiesByClassName(className) {
        let results = [];
        for (let objectlayer of this.getObjectLayers()) {
            results = results.concat(objectlayer.getEntitiesByClassName(className));
        }
        return results;
    }
    /**
     * Returns a tile by x, y integer coordinate from a layer. (Uses the first layer name that matches case insensitive).
     * @param layerName
     * @param x
     * @param y
     * @returns
     */
    getTileByCoordinate(layerName, x, y) {
        const layer = this.getTileLayers().find((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byNameCaseInsensitive)(layerName));
        if (layer) {
            return layer.getTileByCoordinate(x, y);
        }
        return null;
    }
    getImageLayers(name) {
        const layers = this.layers.filter(l => l instanceof _image_layer__WEBPACK_IMPORTED_MODULE_14__.ImageLayer);
        if (name) {
            return layers.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byNameCaseInsensitive)(name));
        }
        return layers;
    }
    getTileLayers(name) {
        const layers = this.layers.filter(l => l instanceof _tile_layer__WEBPACK_IMPORTED_MODULE_4__.TileLayer);
        if (name) {
            return layers.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byNameCaseInsensitive)(name));
        }
        return layers;
    }
    getIsoTileLayers(name) {
        const layers = this.layers.filter(l => l instanceof _iso_tile_layer__WEBPACK_IMPORTED_MODULE_3__.IsoTileLayer);
        if (name) {
            return layers.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byNameCaseInsensitive)(name));
        }
        return layers;
    }
    getObjectLayers(name) {
        const layers = this.layers.filter(l => l instanceof _object_layer__WEBPACK_IMPORTED_MODULE_5__.ObjectLayer);
        if (name) {
            return layers.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byNameCaseInsensitive)(name));
        }
        return layers;
    }
    getLayersByName(name) {
        return this.layers.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byNameCaseInsensitive)(name));
    }
    getLayersByClassName(className) {
        return this.layers.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byClassCaseInsensitive)(className));
    }
    getLayersByProperty(propertyName, value) {
        return this.layers.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_8__.byPropertyCaseInsensitive)(propertyName, value));
    }
    _parseMap(data) {
        if (this.mapFormat === 'TMX') {
            return this.parser.parse(data, this.strict);
        }
        else {
            return data;
        }
    }
    async load() {
        var _a;
        const data = await this.fileLoader(this.path, this.mapFormat === 'TMX' ? 'xml' : 'json');
        // Parse initial Tiled map structure
        let map;
        if (this.strict) {
            try {
                map = this._parseMap(data);
            }
            catch (e) {
                console.error(`Could not parse tiled map from location ${this.path}, attempted to interpret as ${this.mapFormat}.\nExcalibur only supports the latest version of Tiled formats as of the plugin's release.`);
                console.error(`Is your map file corrupted or being interpreted as the wrong type?`);
                throw e;
            }
        }
        else {
            map = this._parseMap(data);
        }
        if ((0,compare_versions__WEBPACK_IMPORTED_MODULE_15__.compare)(TiledResource.supportedTiledVersion, (_a = map.tiledversion) !== null && _a !== void 0 ? _a : '0.0.0', ">")) {
            console.warn(`The excalibur tiled plugin officially supports ${TiledResource.supportedTiledVersion}+, the current map has tiled version ${map.tiledversion}`);
        }
        this.map = map;
        this._collectTilesets();
        this._collectTemplates();
        // Load all the stuff!
        await Promise.all([
            this._tilesetLoader.load(),
            (this.headless ? Promise.resolve() : this._imageLoader.load()),
            this._templateLoader.load()
        ]);
        // Friendly data structures are needed before layer parsing
        this.tilesets = [...this.tilesets, ...this._tilesetLoader.values().map(t => t.data)];
        this.templates = this._templateLoader.values().map(t => t.data);
        // Layers
        let friendlyLayers = [];
        let order = this.startZIndex;
        for (const layer of this.map.layers) {
            if (layer.type === 'tilelayer') {
                if (this.map.orientation === 'isometric') {
                    const isolayer = new _iso_tile_layer__WEBPACK_IMPORTED_MODULE_3__.IsoTileLayer(layer, this, order);
                    friendlyLayers.push(isolayer);
                }
                if (this.map.orientation === 'orthogonal') {
                    const tilelayer = new _tile_layer__WEBPACK_IMPORTED_MODULE_4__.TileLayer(layer, this, order);
                    friendlyLayers.push(tilelayer);
                }
            }
            if (layer.type === 'objectgroup') {
                const objectlayer = new _object_layer__WEBPACK_IMPORTED_MODULE_5__.ObjectLayer(layer, this, order);
                friendlyLayers.push(objectlayer);
            }
            if (layer.type === 'imagelayer') {
                const imagelayer = new _image_layer__WEBPACK_IMPORTED_MODULE_14__.ImageLayer(layer, this, order);
                friendlyLayers.push(imagelayer);
            }
            order++;
        }
        // Layer loading depends on data from previous load step
        await Promise.all(friendlyLayers.map(layer => layer.load()));
        this.layers = friendlyLayers;
    }
    _collectTilesets() {
        // Resolve initial tilesets either embedded or external
        for (const tileset of this.map.tilesets) {
            // Embedded are technically already loaded
            if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_1__.isTiledTilesetEmbedded)(tileset)) {
                if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_1__.isTiledTilesetSingleImage)(tileset)) {
                    const imagePath = (0,_path_util__WEBPACK_IMPORTED_MODULE_7__.pathRelativeToBase)(this.path, tileset.image, this.pathMap);
                    const image = this._imageLoader.getOrAdd(imagePath);
                    const friendlyTileset = new _tileset__WEBPACK_IMPORTED_MODULE_2__.Tileset({
                        name: tileset.name,
                        tiledTileset: tileset,
                        image,
                        firstGid: tileset.firstgid
                    });
                    this.tilesets.push(friendlyTileset);
                }
                if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_1__.isTiledTilesetCollectionOfImages)(tileset)) {
                    const tileToImage = new Map();
                    if (tileset.tiles) {
                        for (let tile of tileset.tiles) {
                            if (tile.image) {
                                const imagePath = (0,_path_util__WEBPACK_IMPORTED_MODULE_7__.pathRelativeToBase)(this.path, tile.image, this.pathMap);
                                const image = this._imageLoader.getOrAdd(imagePath);
                                tileToImage.set(tile, image);
                            }
                        }
                    }
                    const friendlyTileset = new _tileset__WEBPACK_IMPORTED_MODULE_2__.Tileset({
                        name: tileset.name,
                        tiledTileset: tileset,
                        tileToImage,
                        firstGid: tileset.firstgid
                    });
                    this.tilesets.push(friendlyTileset);
                }
            }
            if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_1__.isTiledTilesetExternal)(tileset)) {
                const sourcePath = (0,_path_util__WEBPACK_IMPORTED_MODULE_7__.pathRelativeToBase)(this.path, tileset.source, this.pathMap);
                this._tilesetLoader.getOrAdd(sourcePath, tileset.firstgid, {
                    strict: this.strict,
                    headless: this.headless,
                    parser: this.parser,
                    fileLoader: this.fileLoader,
                    imageLoader: this._imageLoader,
                    pathMap: this.pathMap
                });
            }
        }
    }
    _collectTemplates() {
        // Scan for template references in object files
        let templates = [];
        for (const layer of this.map.layers) {
            if (layer.type === 'objectgroup') {
                let templateObjects = layer.objects.filter(o => o.template).map(o => o.template);
                templates = templates.concat(templateObjects);
            }
        }
        // unique template paths
        const uniqueTemplatePaths = templates.filter((value, index, array) => {
            return array.findIndex(path => path === value) === index;
        });
        // Load Friendly templates
        for (const templatePath of uniqueTemplatePaths) {
            const mappedPath = (0,_path_util__WEBPACK_IMPORTED_MODULE_7__.pathRelativeToBase)(this.path, templatePath, this.pathMap);
            this._templateLoader.getOrAdd(mappedPath, {
                strict: this.strict,
                headless: this.headless,
                parser: this.parser,
                fileLoader: this.fileLoader,
                imageLoader: this._imageLoader,
                pathMap: this.pathMap
            });
        }
    }
    addToScene(scene, options) {
        if (!this.isLoaded()) {
            this.logger.warn(`TiledResource ${this.path} is not loaded! Nothing will be wired into excalibur!`);
            return;
        }
        const defaultOptions = {
            pos: (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 0)
        };
        const { pos } = { ...defaultOptions, ...options };
        for (const layer of this.layers) {
            if (layer instanceof _tile_layer__WEBPACK_IMPORTED_MODULE_4__.TileLayer) {
                layer.tilemap.pos = layer.tilemap.pos.add(pos);
                scene.add(layer.tilemap);
            }
            if (layer instanceof _iso_tile_layer__WEBPACK_IMPORTED_MODULE_3__.IsoTileLayer) {
                scene.add(layer.isometricMap);
            }
            if (layer instanceof _object_layer__WEBPACK_IMPORTED_MODULE_5__.ObjectLayer) {
                for (const entity of layer.entities) {
                    const tx = entity.get(excalibur__WEBPACK_IMPORTED_MODULE_0__.TransformComponent);
                    if (tx) {
                        tx.pos = tx.pos.add(pos);
                    }
                    scene.add(entity);
                }
            }
            if (layer instanceof _image_layer__WEBPACK_IMPORTED_MODULE_14__.ImageLayer) {
                if (layer.imageActor) {
                    layer.imageActor.pos = layer.imageActor.pos.add(pos);
                    scene.add(layer.imageActor);
                }
            }
        }
        if (this.useExcaliburWiring) {
            const objects = this.getObjectsByProperty(_excalibur_properties__WEBPACK_IMPORTED_MODULE_9__.ExcaliburTiledProperties.Camera.Camera, true);
            if (objects && objects.length) {
                const cameraObject = objects[0];
                let zoom = 1;
                const zoomProp = cameraObject.properties.get(_excalibur_properties__WEBPACK_IMPORTED_MODULE_9__.ExcaliburTiledProperties.Camera.Zoom);
                if (zoomProp && typeof zoomProp === 'number') {
                    zoom = zoomProp;
                }
                if (this.map.orientation === 'isometric') {
                    scene.camera.pos = this.isometricTiledCoordToWorld(cameraObject.x, cameraObject.y);
                }
                else {
                    scene.camera.pos = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(cameraObject.x, cameraObject.y);
                }
                scene.camera.zoom = zoom;
            }
        }
        if (this.useTilemapCameraStrategy) {
            const firstLayer = this.getTileLayers()[0];
            if (firstLayer) {
                const mapBounds = excalibur__WEBPACK_IMPORTED_MODULE_0__.BoundingBox.fromDimension(this.map.width * this.map.tilewidth, this.map.height * this.map.tileheight, excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero, pos.add(firstLayer.tilemap.pos));
                scene.camera.strategy.limitCameraBounds(mapBounds);
            }
        }
        if (this.useMapBackgroundColor) {
            if (this.map.backgroundcolor) {
                scene.backgroundColor = excalibur__WEBPACK_IMPORTED_MODULE_0__.Color.fromHex(this.map.backgroundcolor);
            }
        }
    }
    isometricTiledCoordToWorld(x, y) {
        // Transformation sourced from:
        // https://discourse.mapeditor.org/t/how-to-get-cartesian-coords-of-objects-from-tileds-isometric-map/4623/3
        const originX = 0;
        const tileWidth = this.map.tilewidth;
        const tileHeight = this.map.tileheight;
        const tileY = y / tileHeight;
        const tileX = x / tileHeight;
        return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((tileX - tileY) * tileWidth / 2 + originX, (tileX + tileY) * tileHeight / 2);
    }
    isLoaded() {
        return !!this.map;
    }
}
/**
 * Currently the latest tested and supported version of Tiled
 * with the Excalibur Tiled plugin
 */
TiledResource.supportedTiledVersion = '1.10.1';


/***/ }),

/***/ "./src/resource/tileset-resource.ts":
/*!******************************************!*\
  !*** ./src/resource/tileset-resource.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TilesetResource: () => (/* binding */ TilesetResource)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _tileset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tileset */ "./src/resource/tileset.ts");
/* harmony import */ var _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/tiled-parser */ "./src/parser/tiled-parser.ts");
/* harmony import */ var _file_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./file-loader */ "./src/resource/file-loader.ts");
/* harmony import */ var _path_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./path-util */ "./src/resource/path-util.ts");
/* harmony import */ var _loader_cache__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./loader-cache */ "./src/resource/loader-cache.ts");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");






class TilesetResource {
    constructor(path, firstGid, options) {
        this.path = path;
        this.strict = true;
        this.headless = false;
        this.orientation = 'orthogonal';
        this.fileLoader = _file_loader__WEBPACK_IMPORTED_MODULE_3__.FetchLoader;
        const { fileLoader, parser, pathMap, imageLoader, strict, headless, orientation } = { ...options };
        this.headless = headless !== null && headless !== void 0 ? headless : this.headless;
        this.orientation = orientation !== null && orientation !== void 0 ? orientation : this.orientation;
        this.strict = strict !== null && strict !== void 0 ? strict : this.strict;
        this.fileLoader = fileLoader !== null && fileLoader !== void 0 ? fileLoader : this.fileLoader;
        this.imageLoader = imageLoader !== null && imageLoader !== void 0 ? imageLoader : new _loader_cache__WEBPACK_IMPORTED_MODULE_5__.LoaderCache(excalibur__WEBPACK_IMPORTED_MODULE_0__.ImageSource);
        this.parser = parser !== null && parser !== void 0 ? parser : new _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.TiledParser();
        this.firstGid = firstGid;
        this.pathMap = pathMap;
    }
    async load() {
        const tilesetType = this.path.includes('.tsx') ? 'xml' : 'json';
        try {
            const tilesetData = await this.fileLoader(this.path, tilesetType);
            let tileset;
            if (tilesetType === 'json') {
                // Verify TMJ is correct
                if (this.strict) {
                    tileset = _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.TiledTilesetFile.parse(tilesetData);
                }
                else {
                    tileset = tilesetData;
                }
            }
            else {
                // Parse & Verify TMX tileset
                tileset = this.parser.parseExternalTileset(tilesetData, this.strict);
            }
            if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isTiledTilesetSingleImage)(tileset)) {
                const imagePath = (0,_path_util__WEBPACK_IMPORTED_MODULE_4__.pathRelativeToBase)(this.path, tileset.image, this.pathMap);
                const image = this.headless ? undefined : this.imageLoader.getOrAdd(imagePath);
                this.data = new _tileset__WEBPACK_IMPORTED_MODULE_1__.Tileset({
                    name: tileset.name,
                    tiledTileset: tileset,
                    firstGid: this.firstGid,
                    ...({ image }),
                });
            }
            if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isTiledTilesetCollectionOfImages)(tileset)) {
                const tileToImage = this.headless ? undefined : new Map();
                if (tileToImage) {
                    const images = [];
                    if (tileset.tiles) {
                        for (let tile of tileset.tiles) {
                            if (tile.image) {
                                const imagePath = (0,_path_util__WEBPACK_IMPORTED_MODULE_4__.pathRelativeToBase)(this.path, tile.image, this.pathMap);
                                const image = this.imageLoader.getOrAdd(imagePath);
                                tileToImage.set(tile, image);
                                images.push(image);
                            }
                        }
                    }
                }
                tileset.firstgid = this.firstGid;
                this.data = new _tileset__WEBPACK_IMPORTED_MODULE_1__.Tileset({
                    name: tileset.name,
                    tiledTileset: tileset,
                    firstGid: this.firstGid,
                    ...({ tileToImage }),
                });
            }
            if (!this.headless) {
                await this.imageLoader.load();
            }
            if (this.data) {
                return this.data;
            }
        }
        catch (e) {
            console.error(`Could not load tileset at path ${this.path}`);
            throw e;
        }
        throw new Error(`No tileset at path ${this.path}`);
    }
    isLoaded() {
        return !!this.data;
    }
}


/***/ }),

/***/ "./src/resource/tileset.ts":
/*!*********************************!*\
  !*** ./src/resource/tileset.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tile: () => (/* binding */ Tile),
/* harmony export */   Tileset: () => (/* binding */ Tileset)
/* harmony export */ });
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gid_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gid-util */ "./src/resource/gid-util.ts");
/* harmony import */ var _parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/tiled-parser */ "./src/parser/tiled-parser.ts");
/* harmony import */ var _objects__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./objects */ "./src/resource/objects.ts");
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./properties */ "./src/resource/properties.ts");
/* harmony import */ var _filter_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./filter-util */ "./src/resource/filter-util.ts");






/**
 * Friendly plugin representation of tiled Tile
 */
class Tile {
    constructor(options) {
        this.objects = [];
        this.colliders = [];
        this.animation = [];
        this.properties = new Map();
        const { id, tileset, tiledTile } = options;
        this.id = id;
        this.tileset = tileset;
        this.tiledTile = tiledTile;
        this.class = tiledTile.type;
        (0,_properties__WEBPACK_IMPORTED_MODULE_4__.mapProps)(this, tiledTile.properties);
        if (tiledTile.objectgroup && tiledTile.objectgroup.objects) {
            this.objects = (0,_objects__WEBPACK_IMPORTED_MODULE_3__.parseObjects)(tiledTile.objectgroup);
        }
        if (tiledTile.animation) {
            this.animation = tiledTile.animation;
        }
    }
}
/**
 * Friendly plugin representation of Tiled tilesets
 */
class Tileset {
    constructor(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        this.firstGid = -1;
        this.tileCount = 0;
        this.tileWidth = 0;
        this.tileHeight = 0;
        this.tileOffset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 0);
        this.tiles = [];
        this.objectalignment = 'bottomleft';
        this.orientation = 'orthogonal';
        this.properties = new Map();
        const { name, tiledTileset, image, tileToImage, firstGid } = options;
        this.name = name;
        this.tiledTileset = tiledTileset;
        this.firstGid = firstGid;
        if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isTiledTilesetSingleImage)(tiledTileset)) {
            (0,_properties__WEBPACK_IMPORTED_MODULE_4__.mapProps)(this, tiledTileset.properties);
            const spacing = tiledTileset.spacing;
            const columns = Math.floor((tiledTileset.imagewidth + spacing) / (tiledTileset.tilewidth + spacing));
            const rows = Math.floor((tiledTileset.imageheight + spacing) / (tiledTileset.tileheight + spacing));
            this.class = tiledTileset.class;
            this.orientation = (_b = (_a = tiledTileset.grid) === null || _a === void 0 ? void 0 : _a.orientation) !== null && _b !== void 0 ? _b : 'orthogonal';
            this.horizontalFlipTransform = excalibur__WEBPACK_IMPORTED_MODULE_0__.AffineMatrix.identity().translate(tiledTileset.tilewidth, 0).scale(-1, 1);
            this.verticalFlipTransform = excalibur__WEBPACK_IMPORTED_MODULE_0__.AffineMatrix.identity().translate(0, tiledTileset.tileheight).scale(1, -1);
            this.diagonalFlipTransform = excalibur__WEBPACK_IMPORTED_MODULE_0__.AffineMatrix.identity().translate(0, 0).rotate(-Math.PI / 2).scale(-1, 1);
            this.objectalignment = (_c = tiledTileset.objectalignment) !== null && _c !== void 0 ? _c : (this.orientation === 'orthogonal' ? 'bottomleft' : 'bottom');
            if (image) {
                this.spritesheet = excalibur__WEBPACK_IMPORTED_MODULE_0__.SpriteSheet.fromImageSource({
                    image,
                    grid: {
                        rows,
                        columns,
                        spriteWidth: tiledTileset.tilewidth,
                        spriteHeight: tiledTileset.tileheight
                    },
                    spacing: {
                        originOffset: {
                            x: (_d = tiledTileset.margin) !== null && _d !== void 0 ? _d : 0,
                            y: (_e = tiledTileset.margin) !== null && _e !== void 0 ? _e : 0
                        },
                        margin: {
                            x: (_f = tiledTileset.spacing) !== null && _f !== void 0 ? _f : 0,
                            y: (_g = tiledTileset.spacing) !== null && _g !== void 0 ? _g : 0
                        }
                    }
                });
            }
            this.tileCount = tiledTileset.tilecount;
            this.tileWidth = tiledTileset.tilewidth;
            this.tileHeight = tiledTileset.tileheight;
            if (tiledTileset.tileoffset) {
                this.tileOffset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(tiledTileset.tileoffset.x, tiledTileset.tileoffset.y);
            }
            if (tiledTileset.tiles) {
                for (const tile of tiledTileset.tiles) {
                    this.tiles.push(new Tile({
                        id: tile.id,
                        tileset: this,
                        tiledTile: tile,
                        ...({ image })
                    }));
                }
            }
        }
        if ((0,_parser_tiled_parser__WEBPACK_IMPORTED_MODULE_2__.isTiledTilesetCollectionOfImages)(tiledTileset) && tiledTileset.firstgid !== undefined) {
            this.horizontalFlipTransform = excalibur__WEBPACK_IMPORTED_MODULE_0__.AffineMatrix.identity().translate(tiledTileset.tilewidth, 0).scale(-1, 1);
            this.verticalFlipTransform = excalibur__WEBPACK_IMPORTED_MODULE_0__.AffineMatrix.identity().translate(0, tiledTileset.tileheight).scale(1, -1);
            this.diagonalFlipTransform = excalibur__WEBPACK_IMPORTED_MODULE_0__.AffineMatrix.identity().translate(0, 0).rotate(-Math.PI / 2).scale(-1, 1);
            this.objectalignment = (_h = tiledTileset.objectalignment) !== null && _h !== void 0 ? _h : (this.orientation === 'orthogonal' ? 'bottomleft' : 'bottom');
            this.orientation = (_k = (_j = tiledTileset.grid) === null || _j === void 0 ? void 0 : _j.orientation) !== null && _k !== void 0 ? _k : 'orthogonal';
            this.tileCount = tiledTileset.tilecount;
            this.tileWidth = tiledTileset.tilewidth;
            this.tileHeight = tiledTileset.tileheight;
            if (tiledTileset.tileoffset) {
                this.tileOffset = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(tiledTileset.tileoffset.x, tiledTileset.tileoffset.y);
            }
            let sprites = [];
            if (tiledTileset.tiles) {
                for (const tile of tiledTileset.tiles) {
                    const image = tileToImage === null || tileToImage === void 0 ? void 0 : tileToImage.get(tile);
                    if (image) {
                        sprites.push(image.toSprite());
                    }
                    this.tiles.push(new Tile({
                        id: tile.id,
                        tileset: this,
                        tiledTile: tile,
                        ...({ image })
                    }));
                }
            }
            if (tileToImage) {
                this.spritesheet = new excalibur__WEBPACK_IMPORTED_MODULE_0__.SpriteSheet({ sprites });
            }
        }
    }
    getTilesetAlignmentAnchor(overrideAlignment) {
        // https://doc.mapeditor.org/en/stable/manual/editing-tilesets/#tileset-properties
        switch (overrideAlignment !== null && overrideAlignment !== void 0 ? overrideAlignment : this.objectalignment) {
            case 'topleft': {
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 0);
            }
            case 'top': {
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0.5, 0);
            }
            case 'topright': {
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(1, 0);
            }
            case 'left': {
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, .5);
            }
            case 'center': {
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0.5, 0.5);
            }
            case 'right': {
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(1, .5);
            }
            case 'bottomleft': {
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 1);
            }
            case 'bottom': {
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0.5, 1);
            }
            case 'bottomright': {
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(1, 1);
            }
            default: { // default is bottom left
                return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(0, 1);
            }
        }
    }
    /**
     * Returns any specially configured tiles by gid, Tiled assigns a different id to tiles
     * this helps retrieve tiles by a more common id
     * @param gid
     */
    getTileByGid(gid) {
        const normalizedGid = (0,_gid_util__WEBPACK_IMPORTED_MODULE_1__.getCanonicalGid)(gid);
        const tileIndex = normalizedGid - this.firstGid;
        const tile = this.tiles.find(t => t.id === tileIndex);
        return tile;
    }
    getTilesByClassName(className) {
        return this.tiles.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_5__.byClassCaseInsensitive)(className));
    }
    getTilesByProperty(name, value) {
        return this.tiles.filter((0,_filter_util__WEBPACK_IMPORTED_MODULE_5__.byPropertyCaseInsensitive)(name, value));
    }
    getSpriteForGid(gid) {
        const h = (0,_gid_util__WEBPACK_IMPORTED_MODULE_1__.isFlippedHorizontally)(gid);
        const v = (0,_gid_util__WEBPACK_IMPORTED_MODULE_1__.isFlippedVertically)(gid);
        const d = (0,_gid_util__WEBPACK_IMPORTED_MODULE_1__.isFlippedDiagonally)(gid);
        const normalizedGid = (0,_gid_util__WEBPACK_IMPORTED_MODULE_1__.getCanonicalGid)(gid);
        const spriteIndex = normalizedGid - this.firstGid;
        if (this.spritesheet) {
            let sprite = this.spritesheet.sprites[spriteIndex];
            if (d || h || v) {
                sprite = sprite.clone();
            }
            // See https://github.com/mapeditor/tiled/issues/2119#issuecomment-491533214
            if (d) {
                sprite.rotation = -Math.PI / 2;
                sprite.scale = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(-1, 1);
            }
            if (h) {
                sprite.scale = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((d ? 1 : -1) * sprite.scale.x, (d ? -1 : 1) * sprite.scale.y);
            }
            if (v) {
                sprite.scale = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((d ? -1 : 1) * sprite.scale.x, (d ? 1 : -1) * sprite.scale.y);
            }
            return sprite;
        }
        throw new Error(`Tileset: [${this.name}] Could not find sprite for gid: [${gid}] normalized gid: [${normalizedGid}]`);
    }
    _isometricTiledCoordToWorld(isoCoord) {
        // Transformation sourced from:
        // https://discourse.mapeditor.org/t/how-to-get-cartesian-coords-of-objects-from-tileds-isometric-map/4623/3
        const originX = 0;
        const tileWidth = this.tileWidth;
        // This is slightly different in tilesets because the grid aligns with actual image rectangles
        // Tiled Resource DOES not, and aligns with the "logical" height
        const halftileHeight = this.tileHeight / 2;
        const tileY = isoCoord.y / halftileHeight;
        const tileX = isoCoord.x / halftileHeight;
        return (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)((tileX - tileY) * tileWidth / 2 + originX, (tileX + tileY) * halftileHeight / 2);
    }
    /**
     * Returns any excalibur colliders setup for a Tile by gid
     *
     * By default it returns the collider in local coordinates, but sometimes you might need the collider in world coordinates
     *
     * Currently only supports Polygons, Boxes, and Ellipses*
     *
     * - Note: Ellipses can only be circles, the minimum dimension will be used to make a circle.
     * @param gid
     */
    getCollidersForGid(gid, options) {
        let { anchor, scale, orientationOverride, offset } = {
            anchor: excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero,
            scale: excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.One,
            offset: excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero,
            orientationOverride: undefined,
            ...options
        };
        const orientation = orientationOverride !== null && orientationOverride !== void 0 ? orientationOverride : this.orientation;
        const tile = this.getTileByGid(gid);
        const result = [];
        if (tile && tile.objects) {
            for (let object of tile.objects) {
                if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_3__.Polygon) {
                    // This is the offset into the first point (local space)
                    let points = object.points.map(p => p.scale(scale));
                    points = this._applyFlipsToPoints(points, gid);
                    if (orientation === 'isometric') {
                        points = points.map(p => this._isometricTiledCoordToWorld(p));
                    }
                    points = points.map(p => p.add(offset));
                    let poly = excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Polygon(points, excalibur__WEBPACK_IMPORTED_MODULE_0__.Vector.Zero, true);
                    if (!poly.isConvex()) {
                        result.push(poly.triangulate());
                    }
                    else {
                        result.push(poly);
                    }
                }
                if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_3__.Rectangle) {
                    const bb = excalibur__WEBPACK_IMPORTED_MODULE_0__.BoundingBox.fromDimension(object.width * scale.x, object.height * scale.y, anchor);
                    let points = bb.getPoints().map(p => p.add((0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(object.x, object.y)));
                    if (orientation === 'isometric') {
                        points = points.map(p => this._isometricTiledCoordToWorld(p));
                    }
                    points = this._applyFlipsToPoints(points, gid);
                    points = points.map(p => p.add(offset));
                    const box = excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Polygon(points);
                    result.push(box);
                }
                if (object instanceof _objects__WEBPACK_IMPORTED_MODULE_3__.Ellipse) {
                    // This is the offset into the first point (local space)
                    let offsetPoint = (0,excalibur__WEBPACK_IMPORTED_MODULE_0__.vec)(object.x, object.y);
                    if (orientation === 'isometric') {
                        offsetPoint = this._isometricTiledCoordToWorld(offsetPoint);
                    }
                    offsetPoint = offsetPoint.add(offset);
                    const radius = Math.min(object.width / 2, object.height / 2);
                    const circle = excalibur__WEBPACK_IMPORTED_MODULE_0__.Shape.Circle(radius, offsetPoint.scale(scale));
                    result.push(circle);
                }
            }
        }
        return result;
    }
    /**
     * Transforms points based on any gid transformations
     * @param points
     * @param gid
     */
    _applyFlipsToPoints(points, gid) {
        const h = (0,_gid_util__WEBPACK_IMPORTED_MODULE_1__.isFlippedHorizontally)(gid);
        const v = (0,_gid_util__WEBPACK_IMPORTED_MODULE_1__.isFlippedVertically)(gid);
        const d = (0,_gid_util__WEBPACK_IMPORTED_MODULE_1__.isFlippedDiagonally)(gid);
        if (d) {
            points = points.map(p => this.diagonalFlipTransform.multiply(p));
        }
        if (h) {
            points = points.map(p => this.horizontalFlipTransform.multiply(p));
        }
        if (v) {
            points = points.map(p => this.verticalFlipTransform.multiply(p));
        }
        return points;
    }
    getAnimationForGid(gid) {
        var _a;
        const tile = this.getTileByGid(gid);
        if (tile && ((_a = tile.animation) === null || _a === void 0 ? void 0 : _a.length)) {
            let exFrames = [];
            for (let frame of tile.animation) {
                exFrames.push({
                    graphic: this.getSpriteForGid(frame.tileid + this.firstGid),
                    duration: frame.duration
                });
            }
            return new excalibur__WEBPACK_IMPORTED_MODULE_0__.Animation({
                frames: exFrames,
                strategy: excalibur__WEBPACK_IMPORTED_MODULE_0__.AnimationStrategy.Loop
            });
        }
        return null;
    }
}


/***/ }),

/***/ "./test/unit/_boot.ts":
/*!****************************!*\
  !*** ./test/unit/_boot.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const testsContext = __webpack_require__("./test/unit sync recursive spec$");
testsContext.keys().forEach(testsContext);


/***/ }),

/***/ "./test/unit/parser.spec.ts":
/*!**********************************!*\
  !*** ./test/unit/parser.spec.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @excalibur-tiled */ "./src/index.ts");
/* harmony import */ var _tiled_parser_spec_orthogonal_simple_tmx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tiled/parser-spec/orthogonal-simple.tmx */ "./test/unit/tiled/parser-spec/orthogonal-simple.tmx");
/* harmony import */ var _tiled_parser_spec_orthogonal_simple_tmj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tiled/parser-spec/orthogonal-simple.tmj */ "./test/unit/tiled/parser-spec/orthogonal-simple.tmj");
/* harmony import */ var _tiled_parser_spec_orthogonal_complex_tmx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tiled/parser-spec/orthogonal-complex.tmx */ "./test/unit/tiled/parser-spec/orthogonal-complex.tmx");
/* harmony import */ var _tiled_parser_spec_orthogonal_complex_tmj__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tiled/parser-spec/orthogonal-complex.tmj */ "./test/unit/tiled/parser-spec/orthogonal-complex.tmj");
/* harmony import */ var _tiled_parser_spec_orthogonal_infinite_tmx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tiled/parser-spec/orthogonal-infinite.tmx */ "./test/unit/tiled/parser-spec/orthogonal-infinite.tmx");
/* harmony import */ var _tiled_parser_spec_orthogonal_infinite_tmj__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tiled/parser-spec/orthogonal-infinite.tmj */ "./test/unit/tiled/parser-spec/orthogonal-infinite.tmj");
/* harmony import */ var _tiled_parser_spec_external_tsx__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tiled/parser-spec/external.tsx */ "./test/unit/tiled/parser-spec/external.tsx");
/* harmony import */ var _tiled_parser_spec_external_tsj__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tiled/parser-spec/external.tsj */ "./test/unit/tiled/parser-spec/external.tsj");
/* harmony import */ var _tiled_parser_spec_collection_tsx__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tiled/parser-spec/collection.tsx */ "./test/unit/tiled/parser-spec/collection.tsx");
/* harmony import */ var _tiled_parser_spec_collection_tsj__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tiled/parser-spec/collection.tsj */ "./test/unit/tiled/parser-spec/collection.tsj");
/* harmony import */ var _tiled_parser_spec_isometric_tsx__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./tiled/parser-spec/isometric.tsx */ "./test/unit/tiled/parser-spec/isometric.tsx");
/* harmony import */ var _tiled_parser_spec_isometric_tsj__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tiled/parser-spec/isometric.tsj */ "./test/unit/tiled/parser-spec/isometric.tsj");
/* harmony import */ var _tiled_parser_spec_iso_collection_tsx__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tiled/parser-spec/iso-collection.tsx */ "./test/unit/tiled/parser-spec/iso-collection.tsx");
/* harmony import */ var _tiled_parser_spec_iso_collection_tsj__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tiled/parser-spec/iso-collection.tsj */ "./test/unit/tiled/parser-spec/iso-collection.tsj");
/* harmony import */ var _tiled_tiled_resource_spec_invalid_tmx__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./tiled/tiled-resource-spec/invalid.tmx */ "./test/unit/tiled/tiled-resource-spec/invalid.tmx");
/* harmony import */ var json_diff__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! json-diff */ "./node_modules/json-diff/lib/index.js");
/* harmony import */ var json_diff__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(json_diff__WEBPACK_IMPORTED_MODULE_16__);

















describe('A Tiled xml parser', () => {
    it('should exist', () => {
        expect(_excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledParser).toBeDefined();
    });
    describe('Tiled map parser', () => {
        it('can parse an simple orthogonal tmx map file', () => {
            const parser = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledParser();
            const map = parser.parse(_tiled_parser_spec_orthogonal_simple_tmx__WEBPACK_IMPORTED_MODULE_1__["default"]);
            const diff = (0,json_diff__WEBPACK_IMPORTED_MODULE_16__.diffString)(map, JSON.parse(_tiled_parser_spec_orthogonal_simple_tmj__WEBPACK_IMPORTED_MODULE_2__["default"]), {
                excludeKeys: ['encoding'], // we do this encoding change on purpose, only spot we break spec
                precision: 3 // tmx numbers and tmj numbers have different precisions :(
            });
            expect(diff).toEqual('');
        });
        it('can parse a complex orthogonal tmx map file', () => {
            const parser = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledParser();
            const map = parser.parse(_tiled_parser_spec_orthogonal_complex_tmx__WEBPACK_IMPORTED_MODULE_3__["default"]);
            const diff = (0,json_diff__WEBPACK_IMPORTED_MODULE_16__.diffString)(map, JSON.parse(_tiled_parser_spec_orthogonal_complex_tmj__WEBPACK_IMPORTED_MODULE_4__["default"]), {
                excludeKeys: ['encoding'], // we do this encoding change on purpose, only spot we break spec
                precision: 3 // tmx numbers and tmj numbers have different precisions :(
            });
            expect(diff).toEqual('');
        });
        it('can parse a infinite orthogonal tmx map file', () => {
            // Infinite maps are a little inconsistent out of tiled the tmx and tmj don't always agree on bounds, seems like tmx is the correct one
            const parser = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledParser();
            const map = parser.parse(_tiled_parser_spec_orthogonal_infinite_tmx__WEBPACK_IMPORTED_MODULE_5__["default"]);
            const diff = (0,json_diff__WEBPACK_IMPORTED_MODULE_16__.diffString)(map, JSON.parse(_tiled_parser_spec_orthogonal_infinite_tmj__WEBPACK_IMPORTED_MODULE_6__["default"]), {
                excludeKeys: ['encoding'], // we do this encoding change on purpose, only spot we break spec
                precision: 3 // tmx numbers and tmj numbers have different precisions :(
            });
            expect(diff).toEqual('');
        });
        it('should not throw on parse in non-strict', () => {
            const parser = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledParser();
            // should not throw on parse
            parser.parse(_tiled_tiled_resource_spec_invalid_tmx__WEBPACK_IMPORTED_MODULE_15__["default"], false);
        });
    });
    describe('Tileset parser', () => {
        it('can parse a orthogonal external tsx tileset file', () => {
            const parser = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledParser();
            const tileset = parser.parseExternalTileset(_tiled_parser_spec_external_tsx__WEBPACK_IMPORTED_MODULE_7__["default"]);
            const diff = (0,json_diff__WEBPACK_IMPORTED_MODULE_16__.diffString)(tileset, JSON.parse(_tiled_parser_spec_external_tsj__WEBPACK_IMPORTED_MODULE_8__["default"]), {
                precision: 3 // tmx numbers and tmj numbers have different precisions :(
            });
            expect(diff).toEqual('');
        });
        it('can parse a orthogonal collection of images external tsx tileset file', () => {
            const parser = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledParser();
            const tileset = parser.parseExternalTileset(_tiled_parser_spec_collection_tsx__WEBPACK_IMPORTED_MODULE_9__["default"]);
            const diff = (0,json_diff__WEBPACK_IMPORTED_MODULE_16__.diffString)(tileset, JSON.parse(_tiled_parser_spec_collection_tsj__WEBPACK_IMPORTED_MODULE_10__["default"]), {
                precision: 3 // tmx numbers and tmj numbers have different precisions :(
            });
            expect(diff).toEqual('');
        });
        it('can parse a isometric external tsx tileset file', () => {
            const parser = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledParser();
            const tileset = parser.parseExternalTileset(_tiled_parser_spec_isometric_tsx__WEBPACK_IMPORTED_MODULE_11__["default"]);
            const diff = (0,json_diff__WEBPACK_IMPORTED_MODULE_16__.diffString)(tileset, JSON.parse(_tiled_parser_spec_isometric_tsj__WEBPACK_IMPORTED_MODULE_12__["default"]), {
                precision: 3 // tmx numbers and tmj numbers have different precisions :(
            });
            expect(diff).toEqual('');
        });
        it('can parse a isometric collection of images external tsx tileset file', () => {
            const parser = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledParser();
            const tileset = parser.parseExternalTileset(_tiled_parser_spec_iso_collection_tsx__WEBPACK_IMPORTED_MODULE_13__["default"]);
            const diff = (0,json_diff__WEBPACK_IMPORTED_MODULE_16__.diffString)(tileset, JSON.parse(_tiled_parser_spec_iso_collection_tsj__WEBPACK_IMPORTED_MODULE_14__["default"]), {
                precision: 2 // tmx numbers and tmj numbers have different precisions :(
            });
            expect(diff).toEqual('');
        });
    });
});


/***/ }),

/***/ "./test/unit/pathMap.spec.ts":
/*!***********************************!*\
  !*** ./test/unit/pathMap.spec.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_resource_path_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/resource/path-util */ "./src/resource/path-util.ts");

describe('A pathMap', () => {
    it('can map paths', () => {
        const pathMap = [
            { path: 'tilemap_packed.png', output: '/test/unit/tiled/template-resource-spec/tilemap_packed.png' }
        ];
        const path = (0,_src_resource_path_util__WEBPACK_IMPORTED_MODULE_0__.pathRelativeToBase)('.', '/some/path/with/tilemap_packed.png', pathMap);
        expect(path).toBe('/test/unit/tiled/template-resource-spec/tilemap_packed.png');
        const otherPath = (0,_src_resource_path_util__WEBPACK_IMPORTED_MODULE_0__.pathRelativeToBase)('.', 'some/path/with/tileset.tsx', pathMap);
        expect(otherPath).toBe('some/path/with/tileset.tsx');
    });
    it('can adjust relative to a base file', () => {
        const pathMap = [
            { path: 'tilemap_packed.png', output: '/test/unit/tiled/template-resource-spec/tilemap_packed.png' }
        ];
        const path = (0,_src_resource_path_util__WEBPACK_IMPORTED_MODULE_0__.pathRelativeToBase)('./some/base.file', '/some/path/with/tilemap_packed.png', pathMap);
        expect(path).toBe('/test/unit/tiled/template-resource-spec/tilemap_packed.png');
        const otherPath = (0,_src_resource_path_util__WEBPACK_IMPORTED_MODULE_0__.pathRelativeToBase)('./base/here/file.file', 'some/path/with/tileset.tsx', pathMap);
        expect(otherPath).toBe('./base/here/some/path/with/tileset.tsx');
    });
});


/***/ }),

/***/ "./test/unit/template-resource.spec.ts":
/*!*********************************************!*\
  !*** ./test/unit/template-resource.spec.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @excalibur-tiled */ "./src/index.ts");

describe('A Tiled template resource', () => {
    it('should exist', () => {
        expect(_excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TemplateResource).toBeDefined();
    });
    it('can load a template with data', async () => {
        var _a, _b, _c;
        const templateRes = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TemplateResource('/test/unit/tiled/template-resource-spec/template.tx');
        await templateRes.load();
        expect(templateRes.data).not.toBeNull();
        expect(templateRes.data).not.toBeUndefined();
        const template = templateRes.data;
        expect(template.tileset).not.toBeNull();
        expect(template.object).not.toBeNull();
        expect(template.tiledTemplate).not.toBeNull();
        expect((_a = template.tileset) === null || _a === void 0 ? void 0 : _a.class).toBe('TilesetClass');
        expect((_b = template.tileset) === null || _b === void 0 ? void 0 : _b.name).toBe('external-fantasy');
        const tile = (_c = template.tileset) === null || _c === void 0 ? void 0 : _c.getTileByGid(94);
        expect(tile === null || tile === void 0 ? void 0 : tile.class).toBe('TilesetClass');
        expect(tile === null || tile === void 0 ? void 0 : tile.properties).toEqual(new Map([
            ['item', 'test'],
            ['tileset', 'prop']
        ]));
        expect(tile === null || tile === void 0 ? void 0 : tile.objects.length).toBe(1);
        expect(template.object.name).toBe('Coin');
        expect(template.object.class).toBe('Collectable');
        expect(template.object).toBeInstanceOf(_excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.InsertedTile);
        const insertedTile = template.object;
        expect(insertedTile.gid).toBe(94);
        expect(insertedTile.width).toBe(16);
        expect(insertedTile.height).toBe(16);
        expect(insertedTile.properties).toEqual(new Map([
            ['item', 'coin']
        ]));
    });
    it('can redirect loading with pathmap', async () => {
        const templateResource = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TemplateResource('/test/unit/tiled/template-resource-spec/template.tx', {
            pathMap: [
                { path: 'tilemap_packed.png', output: '/test/unit/tiled/template-resource-spec/tilemap_packed.png' }
            ]
        });
        spyOn(templateResource.imageLoader, 'getOrAdd').and.callThrough();
        await templateResource.load();
        const template = templateResource.data;
        expect(template.tileset).toBeDefined();
        expect(templateResource.imageLoader.getOrAdd).toHaveBeenCalledWith('/test/unit/tiled/template-resource-spec/tilemap_packed.png');
    });
});


/***/ }),

/***/ "./test/unit/tiled-resource.spec.ts":
/*!******************************************!*\
  !*** ./test/unit/tiled-resource.spec.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @excalibur-tiled */ "./src/index.ts");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! excalibur */ "excalibur");
/* harmony import */ var excalibur__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(excalibur__WEBPACK_IMPORTED_MODULE_1__);
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");


describe('A Tiled map resource parser', () => {
    it('should exist', () => {
        expect(_excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource).toBeDefined();
    });
    it('can load a tiled map resource', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        expect(tiledMap.map).not.toBeNull();
        expect(tiledMap.map).not.toBeUndefined();
        expect(tiledMap.map.backgroundcolor).toBe('#2df6f9');
        expect(tiledMap.map.width).toBe(10);
        expect(tiledMap.map.height).toBe(10);
        expect(tiledMap.map.tileheight).toBe(16);
        expect(tiledMap.map.tilewidth).toBe(16);
        expect(tiledMap.getObjectLayers().length).toBe(2);
        expect(tiledMap.getTileLayers().length).toBe(3);
        expect(tiledMap.getImageLayers().length).toBe(1);
        expect(tiledMap.getIsoTileLayers().length).toBe(0);
    });
    it('should warn on bad version', async () => {
        spyOn(console, 'warn').and.callThrough();
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/badversion.tmx');
        await tiledMap.load();
        expect(console.warn).toHaveBeenCalledWith('The excalibur tiled plugin officially supports 1.10.1+, the current map has tiled version 1.1.0');
    });
    it('should not warn on newer version', async () => {
        spyOn(console, 'warn').and.callThrough();
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/newversion.tmx');
        await tiledMap.load();
        expect(console.warn).not.toHaveBeenCalled();
    });
    it('can redirect loading with pathmap', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx', {
            pathMap: [
                { path: 'tilemap_packed.png', output: '/test/unit/tiled/template-resource-spec/tilemap_packed.png' },
                { path: 'coin.tx', output: '/test/unit/tiled/template-resource-spec/coin.tx' },
                { path: 'external-fantasy.tsx', output: '/test/unit/tiled/template-resource-spec/external-fantasy.tsx' },
            ]
        });
        spyOn(tiledMap._imageLoader, 'getOrAdd').and.callThrough();
        spyOn(tiledMap._tilesetLoader, 'getOrAdd').and.callThrough();
        spyOn(tiledMap._templateLoader, 'getOrAdd').and.callThrough();
        await tiledMap.load();
        expect(tiledMap._imageLoader.getOrAdd).toHaveBeenCalledWith('/test/unit/tiled/template-resource-spec/tilemap_packed.png');
        expect(tiledMap._templateLoader.getOrAdd).toHaveBeenCalledWith('/test/unit/tiled/template-resource-spec/coin.tx', jasmine.any(Object));
        expect(tiledMap._tilesetLoader.getOrAdd).toHaveBeenCalledWith('/test/unit/tiled/template-resource-spec/external-fantasy.tsx', jasmine.any(Number), jasmine.any(Object));
    });
    it('can set a start z index', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx', {
            startZIndex: 10
        });
        await tiledMap.load();
        expect(tiledMap.layers[0].order).toBe(10);
        expect(tiledMap.layers[1].order).toBe(11);
        expect(tiledMap.layers[2].order).toBe(12);
        expect(tiledMap.layers[3].order).toBe(13);
        expect(tiledMap.layers[4].order).toBe(14);
        const tileLayers = tiledMap.getTileLayers();
        expect(tileLayers[0].tilemap.z).toBe(10);
        expect(tileLayers[1].tilemap.z).toBe(11);
        expect(tileLayers[2].tilemap.z).toBe(12);
    });
    it('can load headless', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx', {
            headless: true
        });
        spyOn(tiledMap._imageLoader, 'load').and.callThrough();
        await tiledMap.load();
        expect(tiledMap._imageLoader.load).not.toHaveBeenCalled();
    });
    it('can with custom file loader', async () => {
        const spiedLoader = jasmine.createSpy('spiedLoader', _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.FetchLoader).and.callThrough();
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx', {
            headless: true,
            fileLoader: spiedLoader
        });
        await tiledMap.load();
        expect(spiedLoader).toHaveBeenCalledTimes(5);
        expect(spiedLoader.calls.argsFor(0)).toEqual(['/test/unit/tiled/tiled-resource-spec/orthogonal.tmx', 'xml']);
        expect(spiedLoader.calls.argsFor(1)).toEqual(['/test/unit/tiled/tiled-resource-spec/external-fantasy.tsx', 'xml']);
        expect(spiedLoader.calls.argsFor(2)).toEqual(['/test/unit/tiled/tiled-resource-spec/external-fantasy.tsj', 'json']);
        expect(spiedLoader.calls.argsFor(3)).toEqual(['/test/unit/tiled/tiled-resource-spec/coin.tx', 'xml']);
        expect(spiedLoader.calls.argsFor(4)).toEqual(['/test/unit/tiled/tiled-resource-spec/external-fantasy.tsx', 'xml']);
    });
    it('can find layers by name (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const objects = tiledMap.getLayersByName('objects');
        expect(objects.length).toBe(1);
        expect(objects[0].name).toBe('Objects');
        const imagelayers = tiledMap.getLayersByName('imagelayer');
        expect(imagelayers.length).toBe(1);
        expect(imagelayers[0].name).toBe('ImageLayer');
        const tilelayers = tiledMap.getLayersByName('above');
        expect(tilelayers.length).toBe(1);
        expect(tilelayers[0].name).toBe('Above');
    });
    it('can find layers by property name/value (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const objects = tiledMap.getLayersByProperty('object', true);
        expect(objects.length).toBe(1);
        expect(objects[0].name).toBe('Objects');
        const imagelayers = tiledMap.getLayersByProperty('answer');
        expect(imagelayers.length).toBe(1);
        expect(imagelayers[0].name).toBe('ImageLayer');
        const tilelayers = tiledMap.getLayersByProperty('above', 'HERE');
        expect(tilelayers.length).toBe(1);
        expect(tilelayers[0].name).toBe('Above');
    });
    it('can find layers by class name (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const objects = tiledMap.getLayersByClassName('someobjectlayer');
        expect(objects.length).toBe(1);
        expect(objects[0].name).toBe('Objects');
        const imagelayers = tiledMap.getLayersByClassName('someimagelayer');
        expect(imagelayers.length).toBe(1);
        expect(imagelayers[0].name).toBe('ImageLayer');
        const tilelayers = tiledMap.getLayersByClassName('SomeTileLayer');
        expect(tilelayers.length).toBe(1);
        expect(tilelayers[0].name).toBe('Above');
    });
    it('can register entity factories', async () => {
        const factorySpy = jasmine.createSpy('factorySpy', (props) => {
            return new excalibur__WEBPACK_IMPORTED_MODULE_1__.Actor({
                name: props.name,
                pos: props.worldPos
            });
        }).and.callThrough();
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx', {
            entityClassNameFactories: {
                'Collectable': factorySpy
            }
        });
        await tiledMap.load();
        const lateFactorySpy = jasmine.createSpy('lateFactorySpy', (props) => {
            return new excalibur__WEBPACK_IMPORTED_MODULE_1__.Actor({
                pos: props.worldPos
            });
        }).and.callThrough();
        // will construct if registered after load
        tiledMap.registerEntityFactory('player-start', lateFactorySpy);
        expect(factorySpy).toHaveBeenCalledTimes(2);
        expect(lateFactorySpy).toHaveBeenCalledTimes(1);
        const entities = tiledMap.getEntitiesByClassName('Collectable');
        expect(entities.length).toBe(2);
        expect(entities[0].name).toBe('Coin');
        expect(entities[1].name).toBe('Arrow');
        const playerStart = tiledMap.getEntitiesByClassName('player-start');
        expect(playerStart).toBeDefined();
    });
    it('can get entities by name (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const entities = tiledMap.getEntitiesByName('arrow');
        expect(entities.length).toBe(1);
    });
    it('can get objects by name (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const objects = tiledMap.getObjectsByName('Camera');
        expect(objects.length).toBe(1);
        expect(objects[0].name).toBe('camera');
    });
    it('can get objects by class name (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        // inherited!
        const objects = tiledMap.getObjectsByClassName('collectable');
        expect(objects.length).toBe(2);
        expect(objects[0].name).toBe('Coin');
        expect(objects[1].name).toBe('Arrow');
    });
    it('can get objects by property name/value (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        // inherited!
        const objects = tiledMap.getObjectsByProperty('item');
        expect(objects.length).toBe(2);
        expect(objects[0].name).toBe('Coin');
        expect(objects[1].name).toBe('Arrow');
        const arrow = tiledMap.getObjectsByProperty('item', 'arrow');
        expect(arrow[0].name).toBe('Arrow');
        const coin = tiledMap.getObjectsByProperty('item', 'coin');
        expect(coin[0].name).toBe('Coin');
    });
    it('can get tilesets by name (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const fantasy = tiledMap.getTilesetByName('Fantasy');
        expect(fantasy[0].name).toBe('fantasy');
        const externalfantasy = tiledMap.getTilesetByName('external-Fantasy');
        expect(externalfantasy[0].name).toBe('external-fantasy');
        const externalfantasytmj = tiledMap.getTilesetByName('external-Fantasy-tmj');
        expect(externalfantasytmj[0].name).toBe('external-fantasy-tmj');
    });
    it('can get tilesets by class name (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const tileset = tiledMap.getTilesetByClassName('External');
        expect(tileset[0].name).toBe('external-fantasy-tmj');
    });
    it('can get tilesets by property name/value (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const tileset = tiledMap.getTilesetByProperty('someprop', 'somevalue');
        expect(tileset[0].name).toBe('external-fantasy-tmj');
    });
    it('can get tilesets by property name/value (case insensitive)', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const tileset = tiledMap.getTilesetByProperty('someprop', 'somevalue');
        expect(tileset[0].name).toBe('external-fantasy-tmj');
    });
    it('can get tileset by gid', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const fantasy = tiledMap.getTilesetForTileGid(1);
        expect(fantasy.name).toBe('fantasy');
        const fantasyexternal = tiledMap.getTilesetForTileGid(133);
        expect(fantasyexternal.name).toBe('external-fantasy');
        const fantasyexternaltmj = tiledMap.getTilesetForTileGid(265);
        expect(fantasyexternaltmj.name).toBe('external-fantasy-tmj');
    });
    it('can get tile by layer and coord', async () => {
        var _a, _b, _c;
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const tile = tiledMap.getTileByCoordinate('ground', 0, 0);
        expect(tile === null || tile === void 0 ? void 0 : tile.exTile.x).toBe(0);
        expect(tile === null || tile === void 0 ? void 0 : tile.exTile.y).toBe(0);
        expect((_a = tile === null || tile === void 0 ? void 0 : tile.tiledTile) === null || _a === void 0 ? void 0 : _a.id).toBe(2);
        expect((_b = tile === null || tile === void 0 ? void 0 : tile.tiledTile) === null || _b === void 0 ? void 0 : _b.properties.get('tileprop')).toBe('someprop');
        expect((_c = tile === null || tile === void 0 ? void 0 : tile.tiledTile) === null || _c === void 0 ? void 0 : _c.class).toBe('tileclass');
        const othertile = tiledMap.getTileByCoordinate('ground', 4, 0);
        expect(othertile === null || othertile === void 0 ? void 0 : othertile.exTile.x).toBe(4);
        expect(othertile === null || othertile === void 0 ? void 0 : othertile.exTile.y).toBe(0);
        expect(othertile === null || othertile === void 0 ? void 0 : othertile.tiledTile).toBe(undefined);
    });
    it('can get tile by layer and world pos', async () => {
        var _a, _b, _c;
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const tile = tiledMap.getTileByPoint('ground', (0,excalibur__WEBPACK_IMPORTED_MODULE_1__.vec)(8, 8));
        expect(tile === null || tile === void 0 ? void 0 : tile.exTile.x).toBe(0);
        expect(tile === null || tile === void 0 ? void 0 : tile.exTile.y).toBe(0);
        expect((_a = tile === null || tile === void 0 ? void 0 : tile.tiledTile) === null || _a === void 0 ? void 0 : _a.id).toBe(2);
        expect((_b = tile === null || tile === void 0 ? void 0 : tile.tiledTile) === null || _b === void 0 ? void 0 : _b.properties.get('tileprop')).toBe('someprop');
        expect((_c = tile === null || tile === void 0 ? void 0 : tile.tiledTile) === null || _c === void 0 ? void 0 : _c.class).toBe('tileclass');
        const othertile = tiledMap.getTileByPoint('ground', (0,excalibur__WEBPACK_IMPORTED_MODULE_1__.vec)(16 * 4 + 8, 8));
        expect(othertile === null || othertile === void 0 ? void 0 : othertile.exTile.x).toBe(4);
        expect(othertile === null || othertile === void 0 ? void 0 : othertile.exTile.y).toBe(0);
        expect(othertile === null || othertile === void 0 ? void 0 : othertile.tiledTile).toBe(undefined);
    });
    it('can get tile by class name', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const tile = tiledMap.getTileMetadataByClassName('tileclass');
        expect(tile[0].id).toBe(2);
        expect(tile[0].properties.get('tileprop')).toBe('someprop');
        expect(tile[0].class).toBe('tileclass');
    });
    it('can get tile by class name', async () => {
        const tiledMap = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TiledResource('/test/unit/tiled/tiled-resource-spec/orthogonal.tmx');
        await tiledMap.load();
        const tile = tiledMap.getTileMetadataByProperty('tileprop');
        expect(tile[0].id).toBe(2);
        expect(tile[0].properties.get('tileprop')).toBe('someprop');
        expect(tile[0].class).toBe('tileclass');
    });
});


/***/ }),

/***/ "./test/unit/tileset-resource.spec.ts":
/*!********************************************!*\
  !*** ./test/unit/tileset-resource.spec.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @excalibur-tiled */ "./src/index.ts");

describe('A Tiled tileset resource parser', () => {
    it('should exist', () => {
        expect(_excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TilesetResource).toBeDefined();
    });
    it('can load a tileset tmx', async () => {
        const tilesetResource = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TilesetResource('/test/unit/tiled/tileset-resource-spec/external-fantasy.tsx', 1);
        await tilesetResource.load();
        const tileset = tilesetResource.data;
        expect(tileset.name).toBe('external-fantasy');
    });
    it('can load a tileset tmj', async () => {
        const tilesetResource = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TilesetResource('/test/unit/tiled/tileset-resource-spec/external-fantasy.tsj', 1);
        await tilesetResource.load();
        const tileset = tilesetResource.data;
        expect(tileset.name).toBe('external-fantasy-tmj');
    });
    it('can redirect loading with pathmap', async () => {
        const tilesetResource = new _excalibur_tiled__WEBPACK_IMPORTED_MODULE_0__.TilesetResource('/test/unit/tiled/tileset-resource-spec/external-fantasy.tsj', 1, {
            pathMap: [
                { path: 'tilemap_packed.png', output: '/test/unit/tiled/template-resource-spec/tilemap_packed.png' }
            ]
        });
        spyOn(tilesetResource.imageLoader, 'getOrAdd').and.callThrough();
        await tilesetResource.load();
        const tileset = tilesetResource.data;
        expect(tileset.name).toBe('external-fantasy-tmj');
        expect(tilesetResource.imageLoader.getOrAdd).toHaveBeenCalledWith('/test/unit/tiled/template-resource-spec/tilemap_packed.png');
    });
});


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/support/types.js":
/*!********************************************!*\
  !*** ./node_modules/util/support/types.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__(/*! is-arguments */ "./node_modules/is-arguments/index.js");
var isGeneratorFunction = __webpack_require__(/*! is-generator-function */ "./node_modules/is-generator-function/index.js");
var whichTypedArray = __webpack_require__(/*! which-typed-array */ "./node_modules/which-typed-array/index.js");
var isTypedArray = __webpack_require__(/*! is-typed-array */ "./node_modules/is-typed-array/index.js");

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').slice(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.slice(1, -1);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__(/*! ./support/types */ "./node_modules/util/support/types.js");

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ "./node_modules/which-typed-array/index.js":
/*!*************************************************!*\
  !*** ./node_modules/which-typed-array/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(/*! for-each */ "./node_modules/for-each/index.js");
var availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ "./node_modules/available-typed-arrays/index.js");
var callBind = __webpack_require__(/*! call-bind */ "./node_modules/call-bind/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var cache = { __proto__: null };
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			cache['$' + typedArray] = callBind(descriptor.get);
		}
	});
} else {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		var fn = arr.slice || arr.set;
		if (fn) {
			cache['$' + typedArray] = callBind(fn);
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var found = false;
	forEach(cache, function (getter, typedArray) {
		if (!found) {
			try {
				if ('$' + getter(value) === typedArray) {
					found = $slice(typedArray, 1);
				}
			} catch (e) { /**/ }
		}
	});
	return found;
};

var trySlices = function tryAllSlices(value) {
	var found = false;
	forEach(cache, function (getter, name) {
		if (!found) {
			try {
				getter(value);
				found = $slice(name, 1);
			} catch (e) { /**/ }
		}
	});
	return found;
};

module.exports = function whichTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) {
		var tag = $slice($toString(value), 8, -1);
		if ($indexOf(typedArrays, tag) > -1) {
			return tag;
		}
		if (tag !== 'Object') {
			return false;
		}
		// node < 0.6 hits here on real Typed Arrays
		return trySlices(value);
	}
	if (!gOPD) { return null; } // unknown engine
	return tryTypedArrays(value);
};


/***/ }),

/***/ "./test/unit sync recursive spec$":
/*!*******************************!*\
  !*** ./test/unit/ sync spec$ ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./parser.spec": "./test/unit/parser.spec.ts",
	"./pathMap.spec": "./test/unit/pathMap.spec.ts",
	"./template-resource.spec": "./test/unit/template-resource.spec.ts",
	"./tiled-resource.spec": "./test/unit/tiled-resource.spec.ts",
	"./tileset-resource.spec": "./test/unit/tileset-resource.spec.ts"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./test/unit sync recursive spec$";

/***/ }),

/***/ "./node_modules/available-typed-arrays/index.js":
/*!******************************************************!*\
  !*** ./node_modules/available-typed-arrays/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


/***/ }),

/***/ "./node_modules/zod/lib/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/zod/lib/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BRAND: () => (/* binding */ BRAND),
/* harmony export */   DIRTY: () => (/* binding */ DIRTY),
/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),
/* harmony export */   INVALID: () => (/* binding */ INVALID),
/* harmony export */   NEVER: () => (/* binding */ NEVER),
/* harmony export */   OK: () => (/* binding */ OK),
/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),
/* harmony export */   Schema: () => (/* binding */ ZodType),
/* harmony export */   ZodAny: () => (/* binding */ ZodAny),
/* harmony export */   ZodArray: () => (/* binding */ ZodArray),
/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),
/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),
/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),
/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),
/* harmony export */   ZodDate: () => (/* binding */ ZodDate),
/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),
/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),
/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),
/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),
/* harmony export */   ZodError: () => (/* binding */ ZodError),
/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),
/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),
/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),
/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),
/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),
/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),
/* harmony export */   ZodMap: () => (/* binding */ ZodMap),
/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),
/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),
/* harmony export */   ZodNever: () => (/* binding */ ZodNever),
/* harmony export */   ZodNull: () => (/* binding */ ZodNull),
/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),
/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),
/* harmony export */   ZodObject: () => (/* binding */ ZodObject),
/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),
/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),
/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),
/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),
/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),
/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),
/* harmony export */   ZodSchema: () => (/* binding */ ZodType),
/* harmony export */   ZodSet: () => (/* binding */ ZodSet),
/* harmony export */   ZodString: () => (/* binding */ ZodString),
/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),
/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),
/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),
/* harmony export */   ZodType: () => (/* binding */ ZodType),
/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),
/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),
/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),
/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),
/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),
/* harmony export */   any: () => (/* binding */ anyType),
/* harmony export */   array: () => (/* binding */ arrayType),
/* harmony export */   bigint: () => (/* binding */ bigIntType),
/* harmony export */   boolean: () => (/* binding */ booleanType),
/* harmony export */   coerce: () => (/* binding */ coerce),
/* harmony export */   custom: () => (/* binding */ custom),
/* harmony export */   date: () => (/* binding */ dateType),
/* harmony export */   "default": () => (/* binding */ z),
/* harmony export */   defaultErrorMap: () => (/* binding */ errorMap),
/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),
/* harmony export */   effect: () => (/* binding */ effectsType),
/* harmony export */   "enum": () => (/* binding */ enumType),
/* harmony export */   "function": () => (/* binding */ functionType),
/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),
/* harmony export */   getParsedType: () => (/* binding */ getParsedType),
/* harmony export */   "instanceof": () => (/* binding */ instanceOfType),
/* harmony export */   intersection: () => (/* binding */ intersectionType),
/* harmony export */   isAborted: () => (/* binding */ isAborted),
/* harmony export */   isAsync: () => (/* binding */ isAsync),
/* harmony export */   isDirty: () => (/* binding */ isDirty),
/* harmony export */   isValid: () => (/* binding */ isValid),
/* harmony export */   late: () => (/* binding */ late),
/* harmony export */   lazy: () => (/* binding */ lazyType),
/* harmony export */   literal: () => (/* binding */ literalType),
/* harmony export */   makeIssue: () => (/* binding */ makeIssue),
/* harmony export */   map: () => (/* binding */ mapType),
/* harmony export */   nan: () => (/* binding */ nanType),
/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),
/* harmony export */   never: () => (/* binding */ neverType),
/* harmony export */   "null": () => (/* binding */ nullType),
/* harmony export */   nullable: () => (/* binding */ nullableType),
/* harmony export */   number: () => (/* binding */ numberType),
/* harmony export */   object: () => (/* binding */ objectType),
/* harmony export */   objectUtil: () => (/* binding */ objectUtil),
/* harmony export */   oboolean: () => (/* binding */ oboolean),
/* harmony export */   onumber: () => (/* binding */ onumber),
/* harmony export */   optional: () => (/* binding */ optionalType),
/* harmony export */   ostring: () => (/* binding */ ostring),
/* harmony export */   pipeline: () => (/* binding */ pipelineType),
/* harmony export */   preprocess: () => (/* binding */ preprocessType),
/* harmony export */   promise: () => (/* binding */ promiseType),
/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson),
/* harmony export */   record: () => (/* binding */ recordType),
/* harmony export */   set: () => (/* binding */ setType),
/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap),
/* harmony export */   strictObject: () => (/* binding */ strictObjectType),
/* harmony export */   string: () => (/* binding */ stringType),
/* harmony export */   symbol: () => (/* binding */ symbolType),
/* harmony export */   transformer: () => (/* binding */ effectsType),
/* harmony export */   tuple: () => (/* binding */ tupleType),
/* harmony export */   undefined: () => (/* binding */ undefinedType),
/* harmony export */   union: () => (/* binding */ unionType),
/* harmony export */   unknown: () => (/* binding */ unknownType),
/* harmony export */   util: () => (/* binding */ util),
/* harmony export */   "void": () => (/* binding */ voidType),
/* harmony export */   z: () => (/* binding */ z)
/* harmony export */ });
var util;
(function (util) {
    util.assertEqual = (val) => val;
    function assertIs(_arg) { }
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = (obj) => {
        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
            filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
    };
    util.objectValues = (obj) => {
        return util.objectKeys(obj).map(function (e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
        : (object) => {
            const keys = [];
            for (const key in object) {
                if (Object.prototype.hasOwnProperty.call(object, key)) {
                    keys.push(key);
                }
            }
            return keys;
        };
    util.find = (arr, checker) => {
        for (const item of arr) {
            if (checker(item))
                return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function"
        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
        : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array
            .map((val) => (typeof val === "string" ? `'${val}'` : val))
            .join(separator);
    }
    util.joinValues = joinValues;
    util.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
            return value.toString();
        }
        return value;
    };
})(util || (util = {}));
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = (first, second) => {
        return {
            ...first,
            ...second, // second overwrites first
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set",
]);
const getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then &&
                typeof data.then === "function" &&
                data.catch &&
                typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};

const ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite",
]);
const quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            // eslint-disable-next-line ban/ban
            Object.setPrototypeOf(this, actualProto);
        }
        else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper ||
            function (issue) {
                return issue.message;
            };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
            for (const issue of error.issues) {
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                }
                else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                }
                else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                }
                else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                }
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while (i < issue.path.length) {
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || { _errors: [] };
                            // if (typeof el === "string") {
                            //   curr[el] = curr[el] || { _errors: [] };
                            // } else if (typeof el === "number") {
                            //   const errorArray: any = [];
                            //   errorArray._errors = [];
                            //   curr[el] = curr[el] || errorArray;
                            // }
                        }
                        else {
                            curr[el] = curr[el] || { _errors: [] };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            }
            else {
                formErrors.push(mapper(sub));
            }
        }
        return { formErrors, fieldErrors };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
};

const errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
                message = "Required";
            }
            else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") {
                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                    }
                }
                else if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                }
                else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                }
                else {
                    util.assertNever(issue.validation);
                }
            }
            else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            }
            else {
                message = "Invalid";
            }
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${new Date(Number(issue.minimum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
                message = `BigInt must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `smaller than or equal to`
                        : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return { message };
};

let overrideErrorMap = errorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}

const makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...(issueData.path || [])];
    const fullIssue = {
        ...issueData,
        path: fullPath,
    };
    let errorMessage = "";
    const maps = errorMaps
        .filter((m) => !!m)
        .slice()
        .reverse();
    for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage,
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap, // then global default map
        ].filter((x) => !!x),
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor() {
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid")
            this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted")
            this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
            if (s.status === "aborted")
                return INVALID;
            if (s.status === "dirty")
                status.dirty();
            arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
            syncPairs.push({
                key: await pair.key,
                value: await pair.value,
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
                return INVALID;
            if (value.status === "aborted")
                return INVALID;
            if (key.status === "dirty")
                status.dirty();
            if (value.status === "dirty")
                status.dirty();
            if (key.value !== "__proto__" &&
                (typeof value.value !== "undefined" || pair.alwaysSet)) {
                finalObject[key.value] = value.value;
            }
        }
        return { status: status.value, value: finalObject };
    }
}
const INVALID = Object.freeze({
    status: "aborted",
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

var errorUtil;
(function (errorUtil) {
    errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));

class ParseInputLazyPath {
    constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
                this._cachedPath.push(...this._path, ...this._key);
            }
            else {
                this._cachedPath.push(...this._path, this._key);
            }
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result) => {
    if (isValid(result)) {
        return { success: true, data: result.value };
    }
    else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        return {
            success: false,
            get error() {
                if (this._error)
                    return this._error;
                const error = new ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            },
        };
    }
};
function processCreateParams(params) {
    if (!params)
        return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap)
        return { errorMap: errorMap, description };
    const customMap = (iss, ctx) => {
        if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
        if (typeof ctx.data === "undefined") {
            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
        }
        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
}
class ZodType {
    constructor(def) {
        /** Alias of safeParseAsync */
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return (ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent,
        });
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent,
            },
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult)
            ? maybeAsyncResult
            : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
                return { message };
            }
            else if (typeof message === "function") {
                return message(val);
            }
            else {
                return message;
            }
        };
        return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
                code: ZodIssueCode.custom,
                ...getIssueProperties(val),
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data) => {
                    if (!data) {
                        setError();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            }
            else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function"
                    ? refinementData(val, ctx)
                    : refinementData);
                return false;
            }
            else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement },
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this, this._def);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform },
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def),
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch,
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description,
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    readonly() {
        return ZodReadonly.create(this);
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[a-z][a-z0-9]*$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
// const uuidRegex =
//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
//old email regex
// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
// eslint-disable-next-line
// const emailRegex =
//   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
// const emailRegex =
//   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
// const emailRegex =
//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
// const emailRegex =
//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
// Adapted from https://stackoverflow.com/a/3143231
const datetimeRegex = (args) => {
    if (args.precision) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
        }
    }
    else if (args.precision === 0) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
        }
    }
    else {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
        }
    }
};
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
    }
    return false;
}
class ZodString extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType,
            }
            //
            );
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    else if (tooSmall) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    status.dirty();
                }
            }
            else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "emoji") {
                if (!emojiRegex) {
                    emojiRegex = new RegExp(_emojiRegex, "u");
                }
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "emoji",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ulid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "url") {
                try {
                    new URL(input.data);
                }
                catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "trim") {
                input.data = input.data.trim();
            }
            else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { includes: check.value, position: check.position },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "toLowerCase") {
                input.data = input.data.toLowerCase();
            }
            else if (check.kind === "toUpperCase") {
                input.data = input.data.toUpperCase();
            }
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { startsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { endsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ip",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message),
        });
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
        var _a;
        if (typeof options === "string") {
            return this._addCheck({
                kind: "datetime",
                precision: null,
                offset: false,
                message: options,
            });
        }
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil.errToObj(message),
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message),
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message),
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message),
        });
    }
    /**
     * @deprecated Use z.string().min(1) instead.
     * @see {@link ZodString.min}
     */
    nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }],
        });
    }
    toLowerCase() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toLowerCase" }],
        });
    }
    toUpperCase() {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toUpperCase" }],
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params) => {
    var _a;
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return (valInt % stepInt) / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_finite,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message),
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil.toString(message),
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message),
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message),
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" ||
            (ch.kind === "multipleOf" && util.isInteger(ch.value)));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "finite" ||
                ch.kind === "int" ||
                ch.kind === "multipleOf") {
                return true;
            }
            else if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
            else if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params) => {
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodBigInt extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = BigInt(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.bigint,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params) => {
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date,
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime()),
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params) => {
    return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params),
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.symbol,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodSymbol.create = (params) => {
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params),
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params) => {
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params),
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params) => {
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params),
    });
};
class ZodAny extends ZodType {
    constructor() {
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params) => {
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params),
    });
};
class ZodUnknown extends ZodType {
    constructor() {
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params) => {
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params),
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType,
        });
        return INVALID;
    }
}
ZodNever.create = (params) => {
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params),
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params) => {
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params),
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                addIssueToContext(ctx, {
                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                    minimum: (tooSmall ? def.exactLength.value : undefined),
                    maximum: (tooBig ? def.exactLength.value : undefined),
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message,
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message,
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message,
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result) => {
                return ParseStatus.mergeArray(status, result);
            });
        }
        const result = [...ctx.data].map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil.toString(message) },
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil.toString(message) },
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: { value: len, message: errorUtil.toString(message) },
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params) => {
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params),
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: () => newShape,
        });
    }
    else if (schema instanceof ZodArray) {
        return new ZodArray({
            ...schema._def,
            type: deepPartialify(schema.element),
        });
    }
    else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    }
    else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor() {
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */
        this.nonstrict = this.passthrough;
        // extend<
        //   Augmentation extends ZodRawShape,
        //   NewOutput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   }>,
        //   NewInput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }>
        // >(
        //   augmentation: Augmentation
        // ): ZodObject<
        //   extendShape<T, Augmentation>,
        //   UnknownKeys,
        //   Catchall,
        //   NewOutput,
        //   NewInput
        // > {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: () => ({
        //       ...this._def.shape(),
        //       ...augmentation,
        //     }),
        //   }) as any;
        // }
        /**
         * @deprecated Use `.extend` instead
         *  */
        this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null)
            return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return (this._cached = { shape, keys });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever &&
            this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
                if (!shapeKeys.includes(key)) {
                    extraKeys.push(key);
                }
            }
        }
        const pairs = [];
        for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: { status: "valid", value: key },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data,
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys) {
                    pairs.push({
                        key: { status: "valid", value: key },
                        value: { status: "valid", value: ctx.data[key] },
                    });
                }
            }
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys,
                    });
                    status.dirty();
                }
            }
            else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        }
        else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
                const value = ctx.data[key];
                pairs.push({
                    key: { status: "valid", value: key },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data,
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve()
                .then(async () => {
                const syncPairs = [];
                for (const pair of pairs) {
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet,
                    });
                }
                return syncPairs;
            })
                .then((syncPairs) => {
                return ParseStatus.mergeObjectSync(status, syncPairs);
            });
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...(message !== undefined
                ? {
                    errorMap: (issue, ctx) => {
                        var _a, _b, _c, _d;
                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                        if (issue.code === "unrecognized_keys")
                            return {
                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                            };
                        return {
                            message: defaultError,
                        };
                    },
                }
                : {}),
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip",
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough",
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: () => ({
                ...this._def.shape(),
                ...augmentation,
            }),
        });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => ({
                ...this._def.shape(),
                ...merging._def.shape(),
            }),
            typeName: ZodFirstPartyTypeKind.ZodObject,
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index,
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key) => {
            if (mask[key] && this.shape[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (!mask[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    /**
     * @deprecated
     */
    deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
                newShape[key] = fieldSchema;
            }
            else {
                newShape[key] = fieldSchema.optional();
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (mask && !mask[key]) {
                newShape[key] = this.shape[key];
            }
            else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while (newField instanceof ZodOptional) {
                    newField = newField._def.innerType;
                }
                newShape[key] = newField;
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    keyof() {
        return createZodEnum(util.objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results) {
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results) {
                if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            // return invalid
            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx,
                    }),
                    ctx: childCtx,
                };
            })).then(handleResults);
        }
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options) {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx,
                });
                if (result.status === "valid") {
                    return result;
                }
                else if (result.status === "dirty" && !dirty) {
                    dirty = { result, ctx: childCtx };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues) => new ZodError(issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params) => {
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params),
    });
};
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////                                 //////////
//////////      ZodDiscriminatedUnion      //////////
//////////                                 //////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
const getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
    }
    else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
    }
    else if (type instanceof ZodLiteral) {
        return [type.value];
    }
    else if (type instanceof ZodEnum) {
        return type.options;
    }
    else if (type instanceof ZodNativeEnum) {
        // eslint-disable-next-line ban/ban
        return Object.keys(type.enum);
    }
    else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
    }
    else if (type instanceof ZodUndefined) {
        return [undefined];
    }
    else if (type instanceof ZodNull) {
        return [null];
    }
    else {
        return null;
    }
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [discriminator],
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
        else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
        // Get all the valid discriminator values
        const optionsMap = new Map();
        // try {
        for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) {
                throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
                if (optionsMap.has(value)) {
                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                }
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params),
        });
    }
}
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
        return { valid: true, data: a };
    }
    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util
            .objectKeys(a)
            .filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
    }
    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) {
            return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
    }
    else if (aType === ZodParsedType.date &&
        bType === ZodParsedType.date &&
        +a === +b) {
        return { valid: true, data: a };
    }
    else {
        return { valid: false };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types,
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                status.dirty();
            }
            return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
            ]).then(([left, right]) => handleParsed(left, right));
        }
        else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }));
        }
    }
}
ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params),
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            status.dirty();
        }
        const items = [...ctx.data]
            .map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
                return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        })
            .filter((x) => !!x); // filter nulls
        if (ctx.common.async) {
            return Promise.all(items).then((results) => {
                return ParseStatus.mergeArray(status, results);
            });
        }
        else {
            return ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest,
        });
    }
}
ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params),
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            });
        }
        if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third),
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second),
        });
    }
}
class ZodMap extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async () => {
                for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return { status: status.value, value: finalMap };
            });
        }
        else {
            const finalMap = new Map();
            for (const pair of pairs) {
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
        }
    }
}
ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params),
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message,
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message,
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements) {
                if (element.status === "aborted")
                    return INVALID;
                if (element.status === "dirty")
                    status.dirty();
                parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements) => finalizeSet(elements));
        }
        else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil.toString(message) },
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil.toString(message) },
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params) => {
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params),
    });
};
class ZodFunction extends ZodType {
    constructor() {
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error,
                },
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error,
                },
            });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(async function (...args) {
                const error = new ZodError([]);
                const parsedArgs = await me._def.args
                    .parseAsync(args, params)
                    .catch((e) => {
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await Reflect.apply(fn, this, parsedArgs);
                const parsedReturns = await me._def.returns._def.type
                    .parseAsync(result, params)
                    .catch((e) => {
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        }
        else {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(function (...args) {
                const parsedArgs = me._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
                }
                const result = Reflect.apply(fn, this, parsedArgs.data);
                const parsedReturns = me._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create()),
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType,
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: (args
                ? args
                : ZodTuple.create([]).rest(ZodUnknown.create())),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params),
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
}
ZodLazy.create = (getter, params) => {
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params),
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params),
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params),
    });
}
class ZodEnum extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    extract(values) {
        return ZodEnum.create(values);
    }
    exclude(values) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
    }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string &&
            ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params),
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise &&
            ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise
            ? ctx.data
            : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap,
            });
        }));
    }
}
ZodPromise.create = (schema, params) => {
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params),
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects
            ? this._def.schema.sourceType()
            : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
            addIssue: (arg) => {
                addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                }
                else {
                    status.dirty();
                }
            },
            get path() {
                return ctx.path;
            },
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.issues.length) {
                return {
                    status: "dirty",
                    value: ctx.data,
                };
            }
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed) => {
                    return this._def.schema._parseAsync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx,
                    });
                });
            }
            else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
        if (effect.type === "refinement") {
            const executeRefinement = (acc
            // effect: RefinementEffect<any>
            ) => {
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inner.status === "aborted")
                    return INVALID;
                if (inner.status === "dirty")
                    status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return { status: status.value, value: inner.value };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((inner) => {
                    if (inner.status === "aborted")
                        return INVALID;
                    if (inner.status === "dirty")
                        status.dirty();
                    return executeRefinement(inner.value).then(() => {
                        return { status: status.value, value: inner.value };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (!isValid(base))
                    return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return { status: status.value, value: result };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((base) => {
                    if (!isValid(base))
                        return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                });
            }
        }
        util.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params),
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params),
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
            return OK(undefined);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
            return OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params) => {
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params),
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params) => {
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function"
            ? params.default
            : () => params.default,
        ...processCreateParams(params),
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        // newCtx is used to not collect issues from inner types in ctx
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: [],
            },
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx,
            },
        });
        if (isAsync(result)) {
            return result.then((result) => {
                return {
                    status: "valid",
                    value: result.status === "valid"
                        ? result.value
                        : this._def.catchValue({
                            get error() {
                                return new ZodError(newCtx.common.issues);
                            },
                            input: newCtx.data,
                        }),
                };
            });
        }
        else {
            return {
                status: "valid",
                value: result.status === "valid"
                    ? result.value
                    : this._def.catchValue({
                        get error() {
                            return new ZodError(newCtx.common.issues);
                        },
                        input: newCtx.data,
                    }),
            };
        }
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params) => {
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params),
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
}
ZodNaN.create = (params) => {
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params),
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async () => {
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inResult.status === "aborted")
                    return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return DIRTY(inResult.value);
                }
                else {
                    return this._def.out._parseAsync({
                        data: inResult.value,
                        path: ctx.path,
                        parent: ctx,
                    });
                }
            };
            return handleAsync();
        }
        else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
            if (inResult.status === "aborted")
                return INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value,
                };
            }
            else {
                return this._def.out._parseSync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
    }
    static create(a, b) {
        return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline,
        });
    }
}
class ZodReadonly extends ZodType {
    _parse(input) {
        const result = this._def.innerType._parse(input);
        if (isValid(result)) {
            result.value = Object.freeze(result.value);
        }
        return result;
    }
}
ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params),
    });
};
const custom = (check, params = {}, 
/**
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */
fatal) => {
    if (check)
        return ZodAny.create().superRefine((data, ctx) => {
            var _a, _b;
            if (!check(data)) {
                const p = typeof params === "function"
                    ? params(data)
                    : typeof params === "string"
                        ? { message: params }
                        : params;
                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                const p2 = typeof p === "string" ? { message: p } : p;
                ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
            }
        });
    return ZodAny.create();
};
const late = {
    object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (
// const instanceOfType = <T extends new (...args: any[]) => any>(
cls, params = {
    message: `Input not instance of ${cls.name}`,
}) => custom((data) => data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
const coerce = {
    string: ((arg) => ZodString.create({ ...arg, coerce: true })),
    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
    boolean: ((arg) => ZodBoolean.create({
        ...arg,
        coerce: true,
    })),
    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),
};
const NEVER = INVALID;

var z = /*#__PURE__*/Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap: setErrorMap,
    getErrorMap: getErrorMap,
    makeIssue: makeIssue,
    EMPTY_PATH: EMPTY_PATH,
    addIssueToContext: addIssueToContext,
    ParseStatus: ParseStatus,
    INVALID: INVALID,
    DIRTY: DIRTY,
    OK: OK,
    isAborted: isAborted,
    isDirty: isDirty,
    isValid: isValid,
    isAsync: isAsync,
    get util () { return util; },
    get objectUtil () { return objectUtil; },
    ZodParsedType: ZodParsedType,
    getParsedType: getParsedType,
    ZodType: ZodType,
    ZodString: ZodString,
    ZodNumber: ZodNumber,
    ZodBigInt: ZodBigInt,
    ZodBoolean: ZodBoolean,
    ZodDate: ZodDate,
    ZodSymbol: ZodSymbol,
    ZodUndefined: ZodUndefined,
    ZodNull: ZodNull,
    ZodAny: ZodAny,
    ZodUnknown: ZodUnknown,
    ZodNever: ZodNever,
    ZodVoid: ZodVoid,
    ZodArray: ZodArray,
    ZodObject: ZodObject,
    ZodUnion: ZodUnion,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodIntersection: ZodIntersection,
    ZodTuple: ZodTuple,
    ZodRecord: ZodRecord,
    ZodMap: ZodMap,
    ZodSet: ZodSet,
    ZodFunction: ZodFunction,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodEnum: ZodEnum,
    ZodNativeEnum: ZodNativeEnum,
    ZodPromise: ZodPromise,
    ZodEffects: ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional: ZodOptional,
    ZodNullable: ZodNullable,
    ZodDefault: ZodDefault,
    ZodCatch: ZodCatch,
    ZodNaN: ZodNaN,
    BRAND: BRAND,
    ZodBranded: ZodBranded,
    ZodPipeline: ZodPipeline,
    ZodReadonly: ZodReadonly,
    custom: custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late: late,
    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
    coerce: coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    'enum': enumType,
    'function': functionType,
    'instanceof': instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    'null': nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean: oboolean,
    onumber: onumber,
    optional: optionalType,
    ostring: ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    'undefined': undefinedType,
    union: unionType,
    unknown: unknownType,
    'void': voidType,
    NEVER: NEVER,
    ZodIssueCode: ZodIssueCode,
    quotelessJson: quotelessJson,
    ZodError: ZodError
});




/***/ }),

/***/ "./node_modules/zstddec/dist/zstddec.modern.js":
/*!*****************************************************!*\
  !*** ./node_modules/zstddec/dist/zstddec.modern.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ZSTDDecoder: () => (/* binding */ ZSTDDecoder)
/* harmony export */ });
/* provided dependency */ var Buffer = __webpack_require__(/*! ./node_modules/buffer/index.js */ "./node_modules/buffer/index.js")["Buffer"];
let init;
let instance;
let heap;
const IMPORT_OBJECT = {
  env: {
    emscripten_notify_memory_growth: function (index) {
      heap = new Uint8Array(instance.exports.memory.buffer);
    }
  }
};
/**
 * ZSTD (Zstandard) decoder.
 */
class ZSTDDecoder {
  init() {
    if (init) return init;
    if (typeof fetch !== 'undefined') {
      // Web.
      init = fetch('data:application/wasm;base64,' + wasm).then(response => response.arrayBuffer()).then(arrayBuffer => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);
    } else {
      // Node.js.
      init = WebAssembly.instantiate(Buffer.from(wasm, 'base64'), IMPORT_OBJECT).then(this._init);
    }
    return init;
  }
  _init(result) {
    instance = result.instance;
    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0); // initialize heap.
  }

  decode(array, uncompressedSize = 0) {
    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);
    // Write compressed data into WASM memory.
    const compressedSize = array.byteLength;
    const compressedPtr = instance.exports.malloc(compressedSize);
    heap.set(array, compressedPtr);
    // Decompress into WASM memory.
    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));
    const uncompressedPtr = instance.exports.malloc(uncompressedSize);
    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);
    // Read decompressed data and free WASM memory.
    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);
    instance.exports.free(compressedPtr);
    instance.exports.free(uncompressedPtr);
    return dec;
  }
}
/**
 * BSD License
 *
 * For Zstandard software
 *
 * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  * Neither the name Facebook nor the names of its contributors may be used to
 *    endorse or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// wasm:begin
const wasm = '';
// wasm:end


//# sourceMappingURL=zstddec.modern.js.map


/***/ })

}]);
//# sourceMappingURL=commons.js.map