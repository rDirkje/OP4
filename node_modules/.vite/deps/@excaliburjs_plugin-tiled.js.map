{
  "version": 3,
  "sources": ["browser-external:jsdom", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/webpack/universalModuleDefinition", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/compare-versions/lib/esm/compare.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/compare-versions/lib/esm/compareVersions.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/compare-versions/lib/esm/utils.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/fast-xml-parser/src/json2xml.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/fast-xml-parser/src/nimndata.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/fast-xml-parser/src/node2json.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/fast-xml-parser/src/node2json_str.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/fast-xml-parser/src/parser.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/fast-xml-parser/src/util.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/fast-xml-parser/src/validator.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/fast-xml-parser/src/xmlNode.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/fast-xml-parser/src/xmlstr2xmlnode.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/index.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/deflate.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/inflate.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/utils/common.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/utils/strings.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/adler32.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/constants.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/crc32.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/deflate.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/gzheader.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/inffast.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/inflate.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/inftrees.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/messages.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/trees.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/pako/lib/zlib/zstream.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/strnum/strnum.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/deprecated/tiled-entity.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/deprecated/tiled-layer-component.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/deprecated/tiled-layer.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/deprecated/tiled-map-parser.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/deprecated/tiled-map-resource.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/deprecated/tiled-object-component.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/deprecated/tiled-object.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/deprecated/tiled-tileset.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/parser/tiled-parser.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/decoder.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/excalibur-properties.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/file-loader.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/filter-util.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/gid-util.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/image-layer.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/iso-tile-layer.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/loader-cache.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/object-layer.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/objects.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/path-util.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/properties.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/template-resource.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/template.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/tile-layer.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/tiled-data-component.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/tiled-layer-component.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/tiled-resource.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/tileset-resource.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/src/resource/tileset.ts", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/external umd {\"commonjs\":\"excalibur\",\"commonjs2\":\"excalibur\",\"amd\":\"excalibur\",\"root\":\"ex\"}", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/external umd {\"commonjs\":\"jsdom\",\"commonjs2\":\"jsdom\",\"amd\":\"jsdom\",\"umd\":\"jsdom\",\"root\":\"jsdom\"}", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/zod/lib/index.mjs", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/node_modules/zstddec/dist/zstddec.modern.js", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/webpack/bootstrap", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/webpack/runtime/compat get default export", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/webpack/runtime/define property getters", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/webpack/runtime/hasOwnProperty shorthand", "../../@excaliburjs/plugin-tiled/dist/webpack:/ex.Plugin.Tiled/webpack/runtime/make namespace object"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"jsdom\" has been externalized for browser compatibility. Cannot access \"jsdom.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory((function webpackLoadOptionalExternalModule() { try { return require(\"jsdom\"); } catch(e) {} }()), require(\"excalibur\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jsdom\", \"excalibur\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ex\"] = factory((function webpackLoadOptionalExternalModule() { try { return require(\"jsdom\"); } catch(e) {} }()), require(\"excalibur\"));\n\telse\n\t\troot[\"ex\"] = root[\"ex\"] || {}, root[\"ex\"][\"Plugin\"] = root[\"ex\"][\"Plugin\"] || {}, root[\"ex\"][\"Plugin\"][\"Tiled\"] = factory(root[\"jsdom\"], root[\"ex\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE_jsdom__, __WEBPACK_EXTERNAL_MODULE_excalibur__) => {\nreturn ", "import { compareVersions } from './compareVersions';\n/**\n * Compare [semver](https://semver.org/) version strings using the specified operator.\n *\n * @param v1 First version to compare\n * @param v2 Second version to compare\n * @param operator Allowed arithmetic operator to use\n * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.\n *\n * @example\n * ```\n * compare('10.1.8', '10.0.4', '>'); // return true\n * compare('10.0.1', '10.0.1', '='); // return true\n * compare('10.1.1', '10.2.2', '<'); // return true\n * compare('10.1.1', '10.2.2', '<='); // return true\n * compare('10.1.1', '10.2.2', '>='); // return false\n * ```\n */\nexport const compare = (v1, v2, operator) => {\n    // validate input operator\n    assertValidOperator(operator);\n    // since result of compareVersions can only be -1 or 0 or 1\n    // a simple map can be used to replace switch\n    const res = compareVersions(v1, v2);\n    return operatorResMap[operator].includes(res);\n};\nconst operatorResMap = {\n    '>': [1],\n    '>=': [0, 1],\n    '=': [0],\n    '<=': [-1, 0],\n    '<': [-1],\n    '!=': [-1, 1],\n};\nconst allowedOperators = Object.keys(operatorResMap);\nconst assertValidOperator = (op) => {\n    if (typeof op !== 'string') {\n        throw new TypeError(`Invalid operator type, expected string but got ${typeof op}`);\n    }\n    if (allowedOperators.indexOf(op) === -1) {\n        throw new Error(`Invalid operator, expected one of ${allowedOperators.join('|')}`);\n    }\n};\n//# sourceMappingURL=compare.js.map", "import { compareSegments, validateAndParse } from './utils';\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nexport const compareVersions = (v1, v2) => {\n    // validate input and split into segments\n    const n1 = validateAndParse(v1);\n    const n2 = validateAndParse(v2);\n    // pop off the patch\n    const p1 = n1.pop();\n    const p2 = n2.pop();\n    // validate numbers\n    const r = compareSegments(n1, n2);\n    if (r !== 0)\n        return r;\n    // validate pre-release\n    if (p1 && p2) {\n        return compareSegments(p1.split('.'), p2.split('.'));\n    }\n    else if (p1 || p2) {\n        return p1 ? -1 : 1;\n    }\n    return 0;\n};\n//# sourceMappingURL=compareVersions.js.map", "export const semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\nexport const validateAndParse = (version) => {\n    if (typeof version !== 'string') {\n        throw new TypeError('Invalid argument expected string');\n    }\n    const match = version.match(semver);\n    if (!match) {\n        throw new Error(`Invalid argument not valid semver ('${version}' received)`);\n    }\n    match.shift();\n    return match;\n};\nconst isWildcard = (s) => s === '*' || s === 'x' || s === 'X';\nconst tryParse = (v) => {\n    const n = parseInt(v, 10);\n    return isNaN(n) ? v : n;\n};\nconst forceType = (a, b) => typeof a !== typeof b ? [String(a), String(b)] : [a, b];\nconst compareStrings = (a, b) => {\n    if (isWildcard(a) || isWildcard(b))\n        return 0;\n    const [ap, bp] = forceType(tryParse(a), tryParse(b));\n    if (ap > bp)\n        return 1;\n    if (ap < bp)\n        return -1;\n    return 0;\n};\nexport const compareSegments = (a, b) => {\n    for (let i = 0; i < Math.max(a.length, b.length); i++) {\n        const r = compareStrings(a[i] || '0', b[i] || '0');\n        if (r !== 0)\n            return r;\n    }\n    return 0;\n};\n//# sourceMappingURL=utils.js.map", "'use strict';\n//parse Empty Node as self closing node\nconst buildOptions = require('./util').buildOptions;\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  format: false,\n  indentBy: '  ',\n  supressEmptyNode: false,\n  tagValueProcessor: function(a) {\n    return a;\n  },\n  attrValueProcessor: function(a) {\n    return a;\n  },\n};\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'cdataTagName',\n  'cdataPositionChar',\n  'format',\n  'indentBy',\n  'supressEmptyNode',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'rootNodeName', //when array as root\n];\n\nfunction Parser(options) {\n  this.options = buildOptions(options, defaultOptions, props);\n  if (this.options.ignoreAttributes || this.options.attrNodeName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n  if (this.options.cdataTagName) {\n    this.isCDATA = isCDATA;\n  } else {\n    this.isCDATA = function(/*a*/) {\n      return false;\n    };\n  }\n  this.replaceCDATAstr = replaceCDATAstr;\n  this.replaceCDATAarr = replaceCDATAarr;\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.supressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n}\n\nParser.prototype.parse = function(jObj) {\n  if(Array.isArray(jObj) && this.options.rootNodeName && this.options.rootNodeName.length > 1){\n    jObj = {\n      [this.options.rootNodeName] : jObj\n    }\n  }\n  return this.j2x(jObj, 0).val;\n};\n\nParser.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += ' ' + attr + '=\"' + this.options.attrValueProcessor('' + jObj[key]) + '\"';\n      } else if (this.isCDATA(key)) {\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAstr('', jObj[key]);\n        }\n      } else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          if (jObj[this.options.cdataTagName]) {\n            //value will added while processing cdata\n          } else {\n            val += this.options.tagValueProcessor('' + jObj[key]);\n          }\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      if (this.isCDATA(key)) {\n        val += this.indentate(level);\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAarr('', jObj[key]);\n        }\n      } else {\n        //nested nodes\n        const arrLen = jObj[key].length;\n        for (let j = 0; j < arrLen; j++) {\n          const item = jObj[key][j];\n          if (typeof item === 'undefined') {\n            // supress undefined node\n          } else if (item === null) {\n            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          } else if (typeof item === 'object') {\n            val += this.processTextOrObjNode(item, key, level)\n          } else {\n            val += this.buildTextNode(item, key, '', level);\n          }\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attrNodeName && key === this.options.attrNodeName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += ' ' + Ks[j] + '=\"' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '\"';\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(result.val, key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction replaceCDATAstr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;\n  } else {\n    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);\n  }\n}\n\nfunction replaceCDATAarr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;\n  } else {\n    for (let v in cdata) {\n      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');\n    }\n    return str + this.newLine;\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  if (attrStr && val.indexOf('<') === -1) {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      '>' +\n      val +\n      //+ this.newLine\n      // + this.indentate(level)\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  } else {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      this.tagEndChar +\n      val +\n      //+ this.newLine\n      this.indentate(level) +\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n    //+ this.newLine\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  return (\n    this.indentate(level) +\n    '<' +\n    key +\n    attrStr +\n    '>' +\n    this.options.tagValueProcessor(val) +\n    '</' +\n    key +\n    this.tagEndChar\n  );\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nfunction isCDATA(name) {\n  return name === this.options.cdataTagName;\n}\n\n//formatting\n//indentation\n//\\n after each closing or self closing tag\n\nmodule.exports = Parser;\n", "'use strict';\nconst char = function(a) {\n  return String.fromCharCode(a);\n};\n\nconst chars = {\n  nilChar: char(176),\n  missingChar: char(201),\n  nilPremitive: char(175),\n  missingPremitive: char(200),\n\n  emptyChar: char(178),\n  emptyValue: char(177), //empty Premitive\n\n  boundryChar: char(179),\n\n  objStart: char(198),\n  arrStart: char(204),\n  arrayEnd: char(185),\n};\n\nconst charsArr = [\n  chars.nilChar,\n  chars.nilPremitive,\n  chars.missingChar,\n  chars.missingPremitive,\n  chars.boundryChar,\n  chars.emptyChar,\n  chars.emptyValue,\n  chars.arrayEnd,\n  chars.objStart,\n  chars.arrStart,\n];\n\nconst _e = function(node, e_schema, options) {\n  if (typeof e_schema === 'string') {\n    //premitive\n    if (node && node[0] && node[0].val !== undefined) {\n      return getValue(node[0].val, e_schema);\n    } else {\n      return getValue(node, e_schema);\n    }\n  } else {\n    const hasValidData = hasData(node);\n    if (hasValidData === true) {\n      let str = '';\n      if (Array.isArray(e_schema)) {\n        //attributes can't be repeated. hence check in children tags only\n        str += chars.arrStart;\n        const itemSchema = e_schema[0];\n        //const itemSchemaType = itemSchema;\n        const arr_len = node.length;\n\n        if (typeof itemSchema === 'string') {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = getValue(node[arr_i].val, itemSchema);\n            str = processValue(str, r);\n          }\n        } else {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = _e(node[arr_i], itemSchema, options);\n            str = processValue(str, r);\n          }\n        }\n        str += chars.arrayEnd; //indicates that next item is not array item\n      } else {\n        //object\n        str += chars.objStart;\n        const keys = Object.keys(e_schema);\n        if (Array.isArray(node)) {\n          node = node[0];\n        }\n        for (let i in keys) {\n          const key = keys[i];\n          //a property defined in schema can be present either in attrsMap or children tags\n          //options.textNodeName will not present in both maps, take it's value from val\n          //options.attrNodeName will be present in attrsMap\n          let r;\n          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {\n            r = _e(node.attrsMap[key], e_schema[key], options);\n          } else if (key === options.textNodeName) {\n            r = _e(node.val, e_schema[key], options);\n          } else {\n            r = _e(node.child[key], e_schema[key], options);\n          }\n          str = processValue(str, r);\n        }\n      }\n      return str;\n    } else {\n      return hasValidData;\n    }\n  }\n};\n\nconst getValue = function(a /*, type*/) {\n  switch (a) {\n    case undefined:\n      return chars.missingPremitive;\n    case null:\n      return chars.nilPremitive;\n    case '':\n      return chars.emptyValue;\n    default:\n      return a;\n  }\n};\n\nconst processValue = function(str, r) {\n  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {\n    str += chars.boundryChar;\n  }\n  return str + r;\n};\n\nconst isAppChar = function(ch) {\n  return charsArr.indexOf(ch) !== -1;\n};\n\nfunction hasData(jObj) {\n  if (jObj === undefined) {\n    return chars.missingChar;\n  } else if (jObj === null) {\n    return chars.nilChar;\n  } else if (\n    jObj.child &&\n    Object.keys(jObj.child).length === 0 &&\n    (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)\n  ) {\n    return chars.emptyChar;\n  } else {\n    return true;\n  }\n}\n\nconst x2j = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\n\nconst convert2nimn = function(node, e_schema, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n  return _e(node, e_schema, options);\n};\n\nexports.convert2nimn = convert2nimn;\n", "'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function(node, options, parentTagName) {\n  const jObj = {};\n\n  // when no child node or attr is present\n  if (!options.alwaysCreateTextNode && (!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  }\n\n  // otherwise create a textnode if node has some text\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    const tagName = keys[index];\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n      for (let tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      const result = convertToJson(node.child[tagName][0], options, tagName);\n      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n      jObj[tagName] = asArray ? [result] : result;\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n", "'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst x2j = require('./xmlstr2xmlnode');\n\n//TODO: do it later\nconst convertToJsonString = function(node, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n\n  options.indentBy = options.indentBy || '';\n  return _cToJsonStr(node, options, 0);\n};\n\nconst _cToJsonStr = function(node, options, level) {\n  let jObj = '{';\n\n  //traver through all the children\n  const keys = Object.keys(node.child);\n\n  for (let index = 0; index < keys.length; index++) {\n    const tagname = keys[index];\n    if (node.child[tagname] && node.child[tagname].length > 1) {\n      jObj += '\"' + tagname + '\" : [ ';\n      for (let tag in node.child[tagname]) {\n        jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';\n      }\n      jObj = jObj.substr(0, jObj.length - 1) + ' ] '; //remove extra comma in last\n    } else {\n      jObj += '\"' + tagname + '\" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';\n    }\n  }\n  util.merge(jObj, node.attrsMap);\n  //add attrsMap as new children\n  if (util.isEmptyObject(jObj)) {\n    return util.isExist(node.val) ? node.val : '';\n  } else {\n    if (util.isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        jObj += '\"' + options.textNodeName + '\" : ' + stringval(node.val);\n      }\n    }\n  }\n  //add value\n  if (jObj[jObj.length - 1] === ',') {\n    jObj = jObj.substr(0, jObj.length - 2);\n  }\n  return jObj + '}';\n};\n\nfunction stringval(v) {\n  if (v === true || v === false || !isNaN(v)) {\n    return v;\n  } else {\n    return '\"' + v + '\"';\n  }\n}\n\nfunction indentate(options, level) {\n  return options.indentBy.repeat(level);\n}\n\nexports.convertToJsonString = convertToJsonString;\n", "'use strict';\n\nconst nodeToJson = require('./node2json');\nconst xmlToNodeobj = require('./xmlstr2xmlnode');\nconst x2xmlnode = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\nconst validator = require('./validator');\n\nexports.parse = function(xmlData, givenOptions = {}, validationOption) {\n  if( validationOption){\n    if(validationOption === true) validationOption = {}\n    \n    const result = validator.validate(xmlData, validationOption);\n    if (result !== true) {\n      throw Error( result.err.msg)\n    }\n  }\n  if(givenOptions.parseTrueNumberOnly \n    && givenOptions.parseNodeValue !== false\n    && !givenOptions.numParseOptions){\n    \n      givenOptions.numParseOptions = {\n        leadingZeros: false,\n      }\n  }\n  let options = buildOptions(givenOptions, x2xmlnode.defaultOptions, x2xmlnode.props);\n\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)\n  //print(traversableObj, \"  \");\n  return nodeToJson.convertToJson(traversableObj, options);\n};\nexports.convertTonimn = require('./nimndata').convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = require('./node2json_str').convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = require('./json2xml');\nexports.parseToNimn = function(xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\n\n\nfunction print(xmlNode, indentation){\n  if(xmlNode){\n    console.log(indentation + \"{\")\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n    if(xmlNode.parent){\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname  + \"\\\", \");\n    }\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val  + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap,null,4)  + \", \");\n\n    if(xmlNode.child){\n      console.log(indentation + \"\\\"child\\\": {\")\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach( function(key) {\n        const node = xmlNode.child[key];\n\n        if(Array.isArray(node)){\n          console.log(indentation +  \"\\\"\"+key+\"\\\" :[\")\n          node.forEach( function(item,index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          })\n          console.log(indentation + \"],\")  \n        }else{\n          console.log(indentation + \" \\\"\"+key+\"\\\" : {\")\n          print(node, indentation2);\n          console.log(indentation + \"},\")  \n        }\n      });\n      console.log(indentation + \"},\")\n    }\n    console.log(indentation + \"},\")\n  }\n}\n", "'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.buildOptions = function(options, defaultOptions, props) {\n  let newOptions = {};\n  if (!options) {\n    return defaultOptions; //if there are not options\n  }\n\n  for (let i = 0; i < props.length; i++) {\n    if (options[props[i]] !== undefined) {\n      newOptions[props[i]] = options[props[i]];\n    } else {\n      newOptions[props[i]] = defaultOptions[props[i]];\n    }\n  }\n  return newOptions;\n};\n\n/**\n * Check if a tag name should be treated as array\n *\n * @param tagName the node tagname\n * @param arrayMode the array mode option\n * @param parentTagName the parent tag name\n * @returns {boolean} true if node should be parsed as array\n */\nexports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {\n  if (arrayMode === false) {\n    return false;\n  } else if (arrayMode instanceof RegExp) {\n    return arrayMode.test(tagName);\n  } else if (typeof arrayMode === 'function') {\n    return !!arrayMode(tagName, parentTagName);\n  }\n\n  return arrayMode === \"strict\";\n}\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n", "'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n", "'use strict';\n\nmodule.exports = function(tagname, parent, val) {\n  this.tagname = tagname;\n  this.parent = parent;\n  this.child = {}; //child tags\n  this.attrsMap = {}; //attributes map\n  this.val = val; //text only\n  this.addChild = function(child) {\n    if (Array.isArray(this.child[child.tagname])) {\n      //already presents\n      this.child[child.tagname].push(child);\n    } else {\n      this.child[child.tagname] = [child];\n    }\n  };\n};\n", "'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst xmlNode = require('./xmlNode');\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false, //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true, //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  numParseOptions: {\n    hex: true,\n    leadingZeros: true\n  },\n  tagValueProcessor: function(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function(a, attrName) {\n    return a;\n  },\n  stopNodes: [],\n  alwaysCreateTextNode: false\n  //decodeStrict: false,\n};\n\nexports.defaultOptions = defaultOptions;\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'ignoreNameSpace',\n  'allowBooleanAttributes',\n  'parseNodeValue',\n  'parseAttributeValue',\n  'arrayMode',\n  'trimValues',\n  'cdataTagName',\n  'cdataPositionChar',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'parseTrueNumberOnly',\n  'numParseOptions',\n  'stopNodes',\n  'alwaysCreateTextNode'\n];\nexports.props = props;\n\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.numParseOptions);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue,\n            options.numParseOptions\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData){\n  for(let i=0; i< xmlData.length; i++){\n    const ch = xmlData[i];\n    if(ch === '<'){\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n        if(currentNode){\n          if(currentNode.val){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          }else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = []\n          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData){\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        let shouldBuildAttributesMap = true;\n        if(separatorIndex !== -1){\n          tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        }else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode );\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex=closeIndex;\n          }\n          if(tagName !== tagExp && shouldBuildAttributesMap){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction closingIndexForOpeningTag(data, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;\n", "// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n", "'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n", "'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n", "'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n", "// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n", "'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n", "'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n", "'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n", "const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n", "import { TiledProperty } from \"./tiled-types\";\r\n\r\n/**\r\n * Get tile entry property by property name\r\n * @param properties \r\n * @param prop \r\n * @returns \r\n * @deprecated\r\n */\r\nexport const getProperty = <T = unknown>(properties: TiledProperty[], prop: string): TiledProperty<T> | undefined => {\r\n   if (Array.isArray(properties)) {\r\n      return properties?.filter(p => p.name?.toLocaleLowerCase() === prop.toLocaleLowerCase())[0] as TiledProperty<T>;\r\n   }\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport class TiledEntity {\r\n   public id!: number;\r\n   public name?: string;\r\n   public properties: TiledProperty[] = [];\r\n   public getProperty<T = unknown>(prop: string): TiledProperty<T> | undefined {\r\n      return getProperty<T>(this.properties, prop);\r\n   }\r\n}", "import { Component } from \"excalibur\";\r\nimport { TiledLayer } from \"./tiled-layer\";\r\n\r\n/**\r\n * @deprecated\r\n */\r\n// @ts-ignore\r\nexport class TiledLayerComponent extends Component<'ex.tiledlayer'> {\r\n   public readonly type = \"ex.tiledlayer\";\r\n   constructor(public layer: TiledLayer) {\r\n      super();\r\n   }\r\n}", "import { TiledCompression, TiledEncoding } from \"./tiled-types\";\r\nimport { TiledEntity } from \"./tiled-entity\";\r\nimport { RawTiledLayer } from \"./raw-tiled-layer\";\r\nimport { vec, Vector } from \"excalibur\";\r\n\r\n// Most significant byte of 32 bit id contains flags for flipping\r\n// See https://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tile-flipping\r\nexport const FLIPPED_HORIZONTALLY_FLAG = 0x80000000;\r\nexport const FLIPPED_VERTICALLY_FLAG   = 0x40000000;\r\nexport const FLIPPED_DIAGONALLY_FLAG   = 0x20000000;\r\n\r\n/**\r\n * Inspects gid for horizontal flag\r\n * @param gid \r\n * @deprecated\r\n */\r\nexport const isFlippedHorizontally = (gid: number): boolean => {\r\n   return !!(gid & FLIPPED_HORIZONTALLY_FLAG);\r\n}\r\n\r\n/**\r\n * Inspects gid for vertical flag\r\n * @param gid \r\n * @deprecated\r\n */\r\nexport const isFlippedVertically = (gid: number): boolean => {\r\n   return !!(gid & FLIPPED_VERTICALLY_FLAG);\r\n}\r\n\r\n/**\r\n * Inspects gid for diagonal flag (anti-diagonal flip enables tile rotation)\r\n * @param gid \r\n * @deprecated\r\n */\r\nexport const isFlippedDiagonally = (gid: number): boolean => {\r\n   return !!(gid & FLIPPED_DIAGONALLY_FLAG);\r\n}\r\n\r\n\r\n/**\r\n * Removes bit flags from gid\r\n * @param gid \r\n * @deprecated\r\n */\r\nexport const getCanonicalGid = (gid: number): number => {\r\n   return gid & ~(FLIPPED_HORIZONTALLY_FLAG |\r\n                       FLIPPED_VERTICALLY_FLAG |\r\n                       FLIPPED_DIAGONALLY_FLAG);\r\n\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport class TiledLayer extends TiledEntity {\r\n   /**\r\n    * Array of gid's (global Tiled identifiers) that point to a unique tile\r\n    * \r\n    * Note: the most significant byte may have flipped data encoded making the gid appear like a negative\r\n    * integer.\r\n    * \r\n    * * Use `getCanonicalGid(gid)` to strip the bit flags from the high order byte\r\n    * * Check flipped flags with:\r\n    *   * `isFlippedDiagonally(gid)`\r\n    *   * `isFlippedVertically(gid)`\r\n    *   * `isFlippedHorizontally(gid)`\r\n    */\r\n   public data!: number[];\r\n\r\n   /**\r\n    * Offset of the tile map\r\n    */\r\n   public offset: Vector = Vector.Zero;\r\n\r\n   /**\r\n    * Parallax Factor\r\n    */\r\n   public parallaxFactor: Vector | null = null;\r\n\r\n   /**\r\n    * Width of layer in tiles\r\n    */\r\n   public width!: number;\r\n\r\n   /**\r\n    * Height of layer in tiles\r\n    */\r\n   public height!: number;\r\n   /**\r\n    * Original encoding of the Tiled layer\r\n    */\r\n   public encoding: TiledEncoding = 'csv';\r\n   /**\r\n    * Original compression of the Tiled layer if any\r\n    */\r\n   public compression?: TiledCompression;\r\n\r\n   /**\r\n    * Original order of the Tiled layer\r\n    */\r\n   public order!: number;\r\n\r\n   /**\r\n    * Reference to the raw tiled layer data\r\n    */\r\n   public rawLayer!: RawTiledLayer;\r\n\r\n   public static parse(layer: RawTiledLayer): TiledLayer {\r\n      if (layer.type !== 'tilelayer') throw Error('Cannot parse a non tilelayer type layer');\r\n      const resultLayer = new TiledLayer();\r\n      resultLayer.id = +layer.id;\r\n      resultLayer.name = layer.name;\r\n      resultLayer.data = (layer.data as number[]);\r\n      resultLayer.offset = vec(layer.offsetx ?? 0, layer.offsety ?? 0);\r\n      resultLayer.parallaxFactor = (layer.parallaxx || layer.parallaxy) ? vec(layer.parallaxx ?? 1, layer.parallaxy ?? 1) : null;\r\n      resultLayer.width = layer.width;\r\n      resultLayer.height = layer.height;\r\n      resultLayer.encoding = layer.encoding ?? 'csv';\r\n      resultLayer.compression = layer.compression;\r\n      resultLayer.order = layer.order;\r\n      resultLayer.properties = layer.properties ?? [];\r\n      resultLayer.rawLayer = layer;\r\n      return resultLayer\r\n   }\r\n}", "// tmx xml parsing\r\nimport * as parser from 'fast-xml-parser'\r\n// gzip & zlib\r\nimport { inflate as pakoInflate } from 'pako';\r\n// zstd\r\nimport { ZSTDDecoder } from 'zstddec';\r\n\r\nimport { RawTiledMap } from \"./raw-tiled-map\";\r\nimport { TiledLayer } from \"./tiled-layer\";\r\nimport { TiledObjectGroup } from \"./tiled-object\";\r\nimport { TiledTileset } from './tiled-tileset';\r\n\r\n/**\r\n * Responsible for representing the Tiled TileMap in total and parsing from the source Tiled files (tmx)\r\n * @deprecated\r\n */\r\nexport class TiledMap {\r\n   /**\r\n    * Raw tilemap data\r\n    */\r\n   rawMap!: RawTiledMap;\r\n   orientation!: \"isometric\" | \"orthogonal\" | \"staggered\" | \"hexagonal\";\r\n   /**\r\n    * Width of the Tiled Map in tiles\r\n    */\r\n   width!: number;\r\n   /**\r\n    * Height of the Tiled Map in tiles\r\n    */\r\n   height!: number;\r\n   /**\r\n    * Width of an individual tile in pixels\r\n    */\r\n   tileWidth!: number;\r\n   /**\r\n    * Height of an individual tile in pixels\r\n    */\r\n   tileHeight!: number;\r\n   /**\r\n    * Tile layers in paint order, first layer in the list is drawn first and so forth\r\n    */\r\n   layers: TiledLayer[] = [];\r\n   /**\r\n    * Tile set definition for this Tiled map\r\n    */\r\n   tileSets: TiledTileset[] = [];\r\n   /**\r\n    * Tiled Objects in this tiled map, used for storing \r\n    */\r\n   objectGroups: TiledObjectGroup[] = [];\r\n\r\n   /**\r\n    * @deprecated Will be removed in v0.29.0\r\n    */\r\n   public getExcaliburObjects(): TiledObjectGroup[] {\r\n      return this.getObjectLayerByProperty('excalibur', true);\r\n   }\r\n\r\n   public getObjects(): TiledObjectGroup[] {\r\n      return this.objectGroups.filter(l => !l.getProperty('excalibur-exclude')?.value) ?? [];\r\n   }\r\n\r\n   public getObjectLayerByName(name: string): TiledObjectGroup {\r\n      return this.objectGroups.filter(l => l.name === name)[0];\r\n   }\r\n\r\n   public getObjectLayerByProperty(name: string, value: any): TiledObjectGroup[] {\r\n      return this.objectGroups.filter(l => l.getProperty(name)?.value === value);\r\n   }\r\n\r\n   public getTileLayerByName(name: string): TiledLayer {\r\n      return this.layers.filter(l => l.name === name)[0];\r\n   }\r\n\r\n   public getTileLayersByProperty(name: string, value: any): TiledLayer[] {\r\n      return this.layers.filter(l => l.getProperty(name)?.value === value);\r\n   }\r\n\r\n   public static async fromTmx(tmxData: string): Promise<TiledMap> {\r\n      const _convertToArray = (obj: any, prop: string, plurlalize = false) => {\r\n         if (!obj[prop]) {\r\n            obj[prop + (plurlalize ? 's' : '')] = [];\r\n            return;\r\n         }\r\n   \r\n         obj[prop + (plurlalize ? 's' : '')] = Array.isArray(obj[prop]) ? obj[prop] : [obj[prop]];\r\n         if (plurlalize) {\r\n            delete obj[prop];\r\n         }\r\n      }\r\n\r\n      const options: parser.X2jOptionsOptional = {\r\n         attributeNamePrefix : \"\",\r\n         textNodeName : \"#text\",\r\n         ignoreAttributes : false,\r\n         ignoreNameSpace : false,\r\n         allowBooleanAttributes : true,\r\n         parseNodeValue : true,\r\n         parseAttributeValue : true,\r\n         trimValues: true,\r\n         parseTrueNumberOnly: false,\r\n         arrayMode: false,\r\n         stopNodes: [\"parse-me-as-string\"]\r\n     };\r\n\r\n     const rawMap = parser.parse(tmxData, options).map;\r\n\r\n     _convertToArray(rawMap, 'layer', true);\r\n     for (let layer of rawMap.layers) {\r\n        layer.type = layer.type ?? 'tilelayer';\r\n        layer.encoding = layer.data.encoding;\r\n        layer.compression = layer.data.compression;\r\n        if (layer.encoding === 'csv') {\r\n           layer.data = layer.data['#text'].split(',').map((id: any) => +id);\r\n        } else {\r\n           layer.data = layer.data['#text'];\r\n        }\r\n        layer.properties = layer.properties?.property ?? [];\r\n        _convertToArray(layer, 'properties');\r\n     }\r\n\r\n     rawMap.objectgroup = rawMap.objectgroup ?? [];\r\n     let objectlayers = Array.isArray(rawMap.objectgroup) ? rawMap.objectgroup : [rawMap.objectgroup];\r\n     for (let objectlayer of objectlayers) {\r\n         objectlayer.type = objectlayer.type ?? 'objectgroup';\r\n         objectlayer.properties = objectlayer.properties?.property ?? [];\r\n         _convertToArray(objectlayer, 'properties');\r\n         if (objectlayer.object) {\r\n            objectlayer.objects = Array.isArray(objectlayer.object) ? objectlayer.object : [objectlayer.object];\r\n            objectlayer.objects.forEach((o: any) => o.properties = o.properties?.property ?? []);\r\n            objectlayer.objects.forEach((o: any) => _convertToArray(o, 'properties'));\r\n            delete objectlayer.object;\r\n         } else { \r\n            continue;\r\n         }\r\n\r\n         for (let object of objectlayer.objects) {\r\n            if (object.text) {\r\n               object.text.text = object.text['#text'];\r\n               object.text.halign = object.text.halign ?? 'left';\r\n               object.text.valign = object.text.valign ?? 'top';\r\n               object.text.fontfamily = object.text.fontfamily ?? 'sans-serif'\r\n               object.text.pixelsize = +(object.text.pixelsize ?? 16);\r\n               object.text.kerning = !!object.text.kerning;\r\n               object.text.italic = !!object.text.italic;\r\n               object.text.bold = !!object.text.bold;\r\n               object.text.underline = !!object.text.underline;\r\n               object.text.strikeout = !!object.text.strikeout;\r\n               object.text.color = object.text.color ?? '#000000';\r\n            }\r\n            if (object.point === '') {\r\n               object.point = true;\r\n            }\r\n            if (object.ellipse === '') {\r\n               object.ellipse = true;\r\n            }\r\n            if (object.polyline) {\r\n               object.polyline = object.polyline.points.split(' ').map((p: string) => {\r\n                  const point = p.split(',')\r\n                  return {x: +point[0], y: +point[1]}\r\n               });\r\n            }\r\n            if (object.polygon) {\r\n               object.polygon = object.polygon.points.split(' ').map((p: string) => {\r\n                  const point = p.split(',')\r\n                  return {x: +point[0], y: +point[1]}\r\n               });\r\n            }\r\n         }\r\n         rawMap.layers.push(objectlayer);\r\n     }\r\n     delete rawMap.objectgroup;\r\n\r\n     _convertToArray(rawMap, 'imagelayer', true);\r\n     for (let imagelayer of rawMap.imagelayers) {\r\n       imagelayer.type = imagelayer.type ?? 'imagelayer';\r\n       imagelayer.image = imagelayer.image.source;\r\n       imagelayer.properties = imagelayer.properties?.property ?? [];\r\n       _convertToArray(imagelayer, 'properties');\r\n       rawMap.layers.push(imagelayer);\r\n     }\r\n     delete rawMap.imagelayer\r\n\r\n     _convertToArray(rawMap, 'tileset', true);\r\n     for(let tileset of rawMap.tilesets) {\r\n        // Map non-embedded tilesets\r\n        if (!tileset.source) {\r\n           if (tileset.image) {\r\n              tileset.imagewidth = tileset.image.width;\r\n              tileset.imageheight = tileset.image.height;\r\n              tileset.image = tileset.image.source;\r\n            }\r\n           tileset.objectalignment = tileset.objectalignment ?? 'unspecified';\r\n           _convertToArray(tileset, 'tile', true);\r\n           tileset.tiles.forEach((t: any) => { \r\n              if (t.image?.source) {\r\n                t.image = t.image.source;\r\n              }\r\n              if (t.objectgroup){\r\n                 t.objectgroup.type = 'objectgroup';\r\n                 _convertToArray(t.objectgroup, 'object', true);\r\n               }\r\n           });\r\n         }\r\n     }\r\n\r\n     return await TiledMap._fromRawTiledMap(rawMap);\r\n   }\r\n\r\n   public static async fromJson(rawJson: RawTiledMap): Promise<TiledMap> {\r\n      return await TiledMap._fromRawTiledMap(rawJson);\r\n   }\r\n\r\n   private static async _fromRawTiledMap(rawMap: RawTiledMap): Promise<TiledMap> {\r\n      await TiledMap._decompresslayers(rawMap);\r\n      const resultMap = new TiledMap();\r\n      resultMap.orientation = rawMap.orientation;\r\n      resultMap.rawMap = rawMap;\r\n      resultMap.width = +rawMap.width;\r\n      resultMap.height = +rawMap.height;\r\n      resultMap.tileWidth = +rawMap.tilewidth;\r\n      resultMap.tileHeight = +rawMap.tileheight;\r\n\r\n      tagLayerWithOriginalOrder(rawMap);\r\n\r\n      for (let layer of rawMap.layers) {\r\n         if (layer.type == 'tilelayer') {\r\n            resultMap.layers.push(TiledLayer.parse(layer));\r\n         }\r\n\r\n         if (layer.type == 'objectgroup') {\r\n            resultMap.objectGroups.push(TiledObjectGroup.parse(layer));\r\n         };\r\n      }\r\n\r\n      for(let tileset of rawMap.tilesets) {\r\n         // Map non-embedded tilesets\r\n         if (!tileset.source) {\r\n            resultMap.tileSets.push(TiledTileset.parse(tileset));\r\n         }\r\n      }\r\n\r\n      return resultMap;\r\n   }\r\n\r\n   private static async _decompresslayers(rawJson: RawTiledMap): Promise<RawTiledMap> {\r\n      // Decompress layers\r\n      if (rawJson.layers) {\r\n         for (var layer of rawJson.layers) {\r\n\r\n            if (typeof layer.data === \"string\") {\r\n\r\n               if (layer.encoding === \"base64\") {\r\n                  layer.data = await decompressors.decompressBase64(\r\n                     layer.data as string,\r\n                     layer.encoding,\r\n                     layer.compression ?? ''\r\n                  );\r\n               }\r\n\r\n            } else {\r\n               layer.data = decompressors.decompressCsv(layer.data as number[]);\r\n            }\r\n\r\n         }\r\n      }\r\n\r\n      return rawJson;\r\n   }\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nconst tagLayerWithOriginalOrder = (rawMap: RawTiledMap) => {\r\n   let order = 0; \r\n   for (let layer of rawMap.layers) {\r\n      layer.order = order++;\r\n   }\r\n}\r\n\r\n/**\r\n * Decompression implementations\r\n * @deprecated\r\n */\r\nconst decompressors = {\r\n\r\n   /**\r\n    * Simplest (passes data through since it's uncompressed)\r\n    */\r\n   decompressCsv: (data: number[]) => {\r\n      return data;\r\n   },\r\n\r\n   /**\r\n    * Uses base64.js implementation to decode string into byte array\r\n    * and then converts (with/without compression) to array of numbers\r\n    */\r\n   decompressBase64: (b64: string, encoding: string, compression: string): Promise<number[]> => {\r\n      var i: number,\r\n         j: number,\r\n         l: number,\r\n         tmp: number,\r\n         placeHolders: number,\r\n         arr: Uint8Array;\r\n\r\n      if (b64.length % 4 > 0) {\r\n         throw new Error('Invalid string. Length must be a multiple of 4')\r\n      }\r\n\r\n      var PLUS = '+'.charCodeAt(0);\r\n      var SLASH = '/'.charCodeAt(0);\r\n      var NUMBER = '0'.charCodeAt(0);\r\n      var LOWER = 'a'.charCodeAt(0);\r\n      var UPPER = 'A'.charCodeAt(0);\r\n      var PLUS_URL_SAFE = '-'.charCodeAt(0);\r\n      var SLASH_URL_SAFE = '_'.charCodeAt(0);\r\n\r\n      function decode(elt: string): number {\r\n         var code = elt.charCodeAt(0)\r\n         if (code === PLUS || code === PLUS_URL_SAFE) return 62 // '+'\r\n         if (code === SLASH || code === SLASH_URL_SAFE) return 63 // '/'\r\n         if (code < NUMBER) return -1 // no match\r\n         if (code < NUMBER + 10) return code - NUMBER + 26 + 26\r\n         if (code < UPPER + 26) return code - UPPER\r\n         if (code < LOWER + 26) return code - LOWER + 26\r\n         throw Error('Could not decode elt');\r\n      }\r\n\r\n      // the number of equal signs (place holders)\r\n      // if there are two placeholders, than the two characters before it\r\n      // represent one byte\r\n      // if there is only one, then the three characters before it represent 2 bytes\r\n      // this is just a cheap hack to not do indexOf twice\r\n      var len = b64.length\r\n      placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0\r\n\r\n      // base64 is 4/3 + up to two characters of the original data\r\n      arr = new Uint8Array(b64.length * 3 / 4 - placeHolders)\r\n\r\n      // if there are placeholders, only get up to the last complete 4 chars\r\n      l = placeHolders > 0 ? b64.length - 4 : b64.length\r\n\r\n      var L = 0\r\n\r\n      function push(v: number) {\r\n         arr[L++] = v\r\n      }\r\n\r\n      for (i = 0, j = 0; i < l; i += 4, j += 3) {\r\n         tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\r\n         push((tmp & 0xFF0000) >> 16)\r\n         push((tmp & 0xFF00) >> 8)\r\n         push(tmp & 0xFF)\r\n      }\r\n\r\n      if (placeHolders === 2) {\r\n         tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\r\n         push(tmp & 0xFF)\r\n      } else if (placeHolders === 1) {\r\n         tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\r\n         push((tmp >> 8) & 0xFF)\r\n         push(tmp & 0xFF)\r\n      }\r\n\r\n      return new Promise(resolve => {\r\n         const toNumber = function (byteArray: number[] | Uint8Array) {\r\n            var value = 0;\r\n\r\n            for (var i = byteArray.length - 1; i >= 0; i--) {\r\n               value = (value * 256) + byteArray[i] * 1;\r\n            }\r\n\r\n            return value;\r\n         };\r\n\r\n         // Byte array\r\n         // handle compression\r\n         if (\"zlib\" === compression || \"gzip\" === compression) {\r\n            arr = pakoInflate( arr );\r\n\r\n            var resultLen = arr.length / 4;\r\n            var result = new Array<number>(resultLen);\r\n\r\n            for (i = 0; i < resultLen; i++) {\r\n               result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));\r\n            }\r\n            resolve(result);\r\n         }\r\n\r\n         if (\"zstd\" === compression) {\r\n            const decoder = new ZSTDDecoder();\r\n            decoder.init().then(() => {\r\n               arr = decoder.decode(arr);\r\n               var resultLen = arr.length / 4;\r\n               var result = new Array<number>(resultLen);\r\n\r\n               for (i = 0; i < resultLen; i++) {\r\n                  result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));\r\n               }\r\n               resolve(result);\r\n            });\r\n         }\r\n\r\n         if (!compression) {\r\n            var resultLen = arr.length / 4;\r\n            var result = new Array<number>(resultLen);\r\n            for (i = 0; i < resultLen; i++) {\r\n               result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));\r\n            }\r\n            resolve(result);\r\n         }\r\n      });\r\n   }\r\n}", "import {\r\n   Resource,\r\n   TileMap,\r\n   SpriteSheet,\r\n   Logger,\r\n   CollisionType,\r\n   vec,\r\n   Actor,\r\n   Color,\r\n   Vector,\r\n   Scene,\r\n   FontUnit,\r\n   Label,\r\n   Sprite,\r\n   Loadable,\r\n   TextAlign,\r\n   BaseAlign,\r\n   Flags,\r\n   Shape,\r\n   TransformComponent,\r\n   ImageSource,\r\n   Font,\r\n   Collider,\r\n   CompositeCollider,\r\n   IsometricMap,\r\n   IsometricEntityComponent,\r\n   Animation,\r\n   ParallaxComponent,\r\n   Tile,\r\n   Text,\r\n   BoundingBox\r\n} from 'excalibur';\r\nimport { ExcaliburData } from './tiled-types';\r\nimport { RawTiledTileset } from \"./raw-tiled-tileset\";\r\nimport { RawTiledLayer } from \"./raw-tiled-layer\";\r\nimport { RawTiledMap } from \"./raw-tiled-map\";\r\nimport { TiledMap } from './tiled-map-parser';\r\nimport { parseExternalJson, parseExternalTsx, TiledTileset, TiledTilesetTile } from './tiled-tileset';\r\nimport { getCanonicalGid, isFlippedDiagonally, isFlippedHorizontally, isFlippedVertically } from './tiled-layer';\r\nimport { getProperty, TiledEntity } from './tiled-entity';\r\nimport { TiledObjectComponent } from './tiled-object-component';\r\nimport { TiledLayerComponent } from './tiled-layer-component';\r\nimport { RawTilesetTile } from './raw-tileset-tile';\r\nimport { TiledLayer } from './tiled-layer';\r\nimport { TiledObjectGroup } from './tiled-object';\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport enum TiledMapFormat {\r\n\r\n   /**\r\n    * TMX map layer format\r\n    */\r\n   TMX = 'TMX',\r\n\r\n   /**\r\n    * JSON map layer format\r\n    */\r\n   JSON = 'JSON'\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface TiledMapOptions {\r\n   /**\r\n    * By default files ending in .tmx are treated as TMX format, otherwise treated as JSON format\r\n    */\r\n   mapFormatOverride?: TiledMapFormat;\r\n\r\n   /**\r\n    * Override the starting auto-incrementing z-index value (default: `-1`). Each layer will increment this number by 1 unless the layer specifies it's own custom `z-index` property.\r\n    */\r\n   startingLayerZIndex?: number;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport class TiledMapResource implements Loadable<TiledMap> {\r\n   private _resource: Resource<string | RawTiledMap>;\r\n   public data!: TiledMap;\r\n\r\n   readonly mapFormat: TiledMapFormat;\r\n   public ex: ExcaliburData;\r\n   public imageMap: Record<string, ImageSource>;\r\n   public tileImageMap: Record<string, [tile: RawTilesetTile, image: ImageSource][]>;\r\n   public sheetMap: Record<string, SpriteSheet>;\r\n   public layers?: TileMap[] = [];\r\n   public isoLayers: IsometricMap[] = [];\r\n   private _layerZIndexStart = -1;\r\n\r\n   private _mapToRawLayer = new Map<TileMap|IsometricMap, RawTiledLayer>();\r\n\r\n   /**\r\n    * Given an origin file path, converts a file relative to that origin to a full path accessible from excalibur\r\n    */\r\n   public convertPath: (originPath: string, relativePath: string) => string;\r\n\r\n   /**\r\n    * \r\n    * @param path Specify a path to your Tiled map source files (usually path/to/my_map.tmx)\r\n    * @param options Optionally configure other aspects of the tilemap like start layer z-index and map format \r\n    */\r\n   constructor(public path: string, options?: TiledMapOptions) {\r\n      const { mapFormatOverride, startingLayerZIndex } = { ...options };\r\n      this._layerZIndexStart = startingLayerZIndex ?? this._layerZIndexStart;\r\n      const detectedType = mapFormatOverride ?? (path.includes('.tmx') ? TiledMapFormat.TMX : TiledMapFormat.JSON);\r\n      switch (detectedType) {\r\n         case TiledMapFormat.TMX:\r\n            this._resource = new Resource(path, 'text');\r\n            break;\r\n         case TiledMapFormat.JSON:\r\n            this._resource = new Resource(path, 'json');\r\n            break;\r\n         default:\r\n            throw `The format ${detectedType} is not currently supported. Please export Tiled map as JSON.`;\r\n      }\r\n      this.mapFormat = detectedType;\r\n      this.ex = {};\r\n      this.imageMap = {};\r\n      this.sheetMap = {};\r\n      this.tileImageMap = {};\r\n      this.convertPath = (originPath: string, relativePath: string) => {\r\n         // Use absolute path if specified\r\n         if (relativePath.indexOf('/') === 0) {\r\n            return relativePath;\r\n         }\r\n\r\n         const originSplit = originPath.split('/');\r\n         const relativeSplit = relativePath.split('/');\r\n         // if origin path is a file, remove it so it's a directory\r\n         if (originSplit[originSplit.length - 1].includes('.')) {\r\n            originSplit.pop();\r\n         }\r\n         return originSplit.concat(relativeSplit).join('/');\r\n      }\r\n   }\r\n\r\n   private _addTiledCamera(scene: Scene) {\r\n      const camera = this.ex.camera;\r\n      if (camera) {\r\n         let cameraPos = vec(camera.x, camera.y);\r\n         if (this.isIsometric()) {\r\n            cameraPos = this._isoTileToScreenCoords(camera.x, camera.y);\r\n         }\r\n         scene.camera.x = cameraPos.x;\r\n         scene.camera.y = cameraPos.y;\r\n         scene.camera.zoom = camera.zoom;\r\n      }\r\n   }\r\n\r\n   private _addTiledColliders(scene: Scene) {\r\n      const colliders = this.ex.colliders;\r\n      if (colliders) {\r\n         for (let collider of colliders) {\r\n            const actor = new Actor({\r\n               pos: vec(collider.x, collider.y),\r\n               name: collider.name,\r\n               collisionType: collider.collisionType ?? CollisionType.Fixed\r\n            });\r\n\r\n            if (collider.color) {\r\n               actor.color = Color.fromHex(collider.color.value);\r\n            }\r\n\r\n            if (collider.type === 'box') {\r\n               if (this.isIsometric()) {\r\n                  actor.pos = this._isoTileToScreenCoords(collider.x, collider.y);\r\n                  const bb = new BoundingBox({\r\n                     left: 0,\r\n                     top: 0,\r\n                     right: collider.width,\r\n                     bottom: collider.height\r\n                  });\r\n                  const points = bb.getPoints().map(p => this._isoTileToScreenCoords(p.x, p.y));\r\n                  actor.collider.usePolygonCollider(points, Vector.Zero);\r\n               } else {\r\n                  actor.collider.useBoxCollider(collider.width, collider.height, Vector.Zero);\r\n               }\r\n            }\r\n            if (collider.type === 'circle') {\r\n               // FIXME no ellipse support yet for colliders in isometric\r\n               actor.collider.useCircleCollider(collider.radius);\r\n            }\r\n            // @ts-ignore\r\n            actor.addComponent(new TiledObjectComponent(collider.tiled));\r\n            scene.add(actor);\r\n            if (collider.zIndex) {\r\n               actor.z = collider.zIndex;\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   private _isoTileToScreenCoords(x: number, y: number) {\r\n      // Transformation sourced from:\r\n      // https://discourse.mapeditor.org/t/how-to-get-cartesian-coords-of-objects-from-tileds-isometric-map/4623/3\r\n      if (this.isIsometric()) {\r\n         const map = this.isoLayers[0];\r\n         const tileWidth = map.tileWidth;\r\n         const tileHeight = map.tileHeight;\r\n         const originX = 0;\r\n         const tileY = y / tileHeight;\r\n         const tileX = x / tileHeight;\r\n         return vec(\r\n            (tileX - tileY) * tileWidth / 2 + originX,\r\n            (tileX + tileY) * tileHeight / 2);\r\n      }\r\n      return vec(x, y);\r\n   }\r\n\r\n   private _addTiledText(scene: Scene) {\r\n      const excaliburObjectLayers = this.data?.getObjects();\r\n      if (excaliburObjectLayers && excaliburObjectLayers.length > 0) {\r\n         for (const objectLayer of excaliburObjectLayers) {\r\n            const textObjects = objectLayer.getText();\r\n            for (const text of textObjects) {\r\n               let worldPos = vec(text.x, text.y + ((text.height ?? 0) - (text.text?.pixelSize ?? 0)));\r\n               if (this.isIsometric()) {\r\n                  worldPos = this._isoTileToScreenCoords(text.x, text.y);\r\n               }\r\n               const label = new Label({\r\n                  anchor: Vector.Zero,\r\n                  x: worldPos.x,\r\n                  y: worldPos.y,\r\n                  text: text.text?.text ?? '',\r\n                  name: this._getEntityName(text),\r\n                  font: new Font({\r\n                     family: text.text?.fontFamily,\r\n                     size: text.text?.pixelSize,\r\n                     unit: FontUnit.Px\r\n                  })\r\n               });\r\n               label.font.textAlign = TextAlign.Left;\r\n               label.font.baseAlign = BaseAlign.Top;\r\n               label.rotation = text.rotation;\r\n               label.color = Color.fromHex(text.text?.color ?? '#000000');\r\n               label.collider.set(Shape.Box(text.width ?? 0, text.height ?? 0));\r\n               label.body.collisionType = CollisionType.PreventCollision;\r\n               // @ts-ignore\r\n               label.addComponent(new TiledObjectComponent(text));\r\n\r\n               label.z = this._calculateZIndex(text, objectLayer);\r\n               if (this.isIsometric()) {\r\n                  // The component just needs the tile width/height and row/cols\r\n                  // all the layers are the same so we can just use the first\r\n                  const iso = new IsometricEntityComponent(this.isoLayers[0]);\r\n                  label.addComponent(iso);\r\n                  iso.elevation = objectLayer.order;\r\n               }\r\n               scene.add(label);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   private _addTiledInsertedTiles(scene: Scene) {\r\n      const excaliburObjectLayers = this.data?.getObjects();\r\n      if (excaliburObjectLayers && excaliburObjectLayers.length > 0) {\r\n         for (const objectLayer of excaliburObjectLayers) {\r\n            const inserted = objectLayer.getInsertedTiles();\r\n            for (const tile of inserted) {\r\n               const collisionTypeProp = tile.getProperty<CollisionType>('collisionType');\r\n               let collisionType = CollisionType.PreventCollision;\r\n               if (collisionTypeProp) {\r\n                  collisionType = collisionTypeProp.value;\r\n               }\r\n               let worldPos = vec(tile.x, tile.y);\r\n               if (this.isIsometric()) {\r\n                  worldPos = this._isoTileToScreenCoords(tile.x, tile.y);\r\n               }\r\n\r\n               if (tile.gid) {\r\n                  const sprite = this.getSpriteForGid(tile.gid);\r\n                  const colliders = this.getCollidersForGid(tile.gid);\r\n                  const actor = new Actor({\r\n                     x: worldPos.x,\r\n                     y: worldPos.y,\r\n                     width: tile.width,\r\n                     height: tile.height,\r\n                     anchor: this.isIsometric() ? vec(.5, 1) : vec(0, 1),\r\n                     rotation: tile.rotation,\r\n                     collisionType,\r\n                     name: this._getEntityName(tile)\r\n                  });\r\n                  if (this.isIsometric()) {\r\n                     const map = this.isoLayers[0];\r\n                     for (let c of colliders) {\r\n                        c.offset = vec(-map.tileWidth / 2, -map.tileHeight * 2)\r\n                     }\r\n                  }\r\n                  if (colliders.length) {\r\n                     actor.collider.clear();\r\n                     actor.collider.set(new CompositeCollider(colliders));\r\n                  }\r\n                  // @ts-ignore\r\n                  actor.addComponent(new TiledObjectComponent(tile));\r\n                  actor.graphics.anchor = this.isIsometric() ? vec(.5, 1) : vec(0, 1);\r\n                  // respect tile size on sprite\r\n                  sprite.destSize.width = tile.width ?? sprite.destSize.width;\r\n                  sprite.destSize.height = tile.height ?? sprite.destSize.height;\r\n                  actor.graphics.use(sprite);\r\n                  if (this.isIsometric()) {\r\n                     // The component just needs the tile width/height and row/cols\r\n                     // all the layers are the same so we can just use the first\r\n                     const iso = new IsometricEntityComponent(this.isoLayers[0]);\r\n                     actor.addComponent(iso);\r\n                     iso.elevation = objectLayer.order;\r\n                  }\r\n                  scene.add(actor);\r\n                  actor.z = this._calculateZIndex(tile, objectLayer);\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Use any layers with the custom property \"solid\"= true, to mark the TileMap\r\n    * cells solid.\r\n    */\r\n   public useSolidLayers() {\r\n      let tms: (TileMap | IsometricMap)[] = this.getTileMapLayers();\r\n      tms = tms.concat(this.isoLayers);\r\n      for (const tm of tms) {\r\n         const rawLayer = this._mapToRawLayer.get(tm);\r\n         if (rawLayer) {\r\n            const solidLayer = getProperty<number>(rawLayer.properties, 'solid')?.value ?? false;\r\n            if (solidLayer) {\r\n               for (let i = 0; i < rawLayer.data.length; i++) {\r\n                  tm.tiles[i].solid ||= !!rawLayer.data[i];\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Adds the TileMap and any parsed objects from Tiled into the Scene\r\n    * @param scene \r\n    */\r\n   public addTiledMapToScene(scene: Scene) {\r\n      const tms = this.getTileMapLayers();\r\n      for (const tm of tms) {\r\n         scene.add(tm);\r\n      }\r\n\r\n      for (const iso of this.isoLayers) {\r\n         scene.add(iso);\r\n      }\r\n\r\n      // TODO tiled uses different coordinates for iso and iso staggered\r\n      this._addTiledCamera(scene);\r\n      this._addTiledColliders(scene);\r\n      this._addTiledText(scene);\r\n      this._addTiledInsertedTiles(scene);\r\n\r\n      this.useSolidLayers();\r\n   }\r\n\r\n   private _parseExcaliburInfo() {\r\n      // Tiled+Excalibur smarts\r\n      const excaliburObjectLayers = this.data?.getObjects();\r\n\r\n      const ex: ExcaliburData = {};\r\n      if (excaliburObjectLayers.length > 0) {\r\n         // Parse cameras find the first\r\n         ex.camera = excaliburObjectLayers.find(objectlayer => objectlayer.getObjectByClass('camera'))?.getCamera();\r\n         // Parse colliders\r\n         ex.colliders = [];\r\n         for (let objectLayer of excaliburObjectLayers) {\r\n\r\n            const boxColliders = objectLayer.getObjectsByClass('boxcollider');\r\n\r\n            for (let box of boxColliders) {\r\n               const collisionType = box.getProperty<CollisionType>('collisiontype');\r\n               const color = box.getProperty<string>('color');\r\n               const zIndex = this._calculateZIndex(box, objectLayer);\r\n               ex.colliders.push({\r\n                  ...box,\r\n                  width: +(box.width ?? 0),\r\n                  height: +(box.height ?? 0),\r\n                  collisionType: collisionType?.value ?? CollisionType.Fixed,\r\n                  color,\r\n                  zIndex: zIndex,\r\n                  radius: 0,\r\n                  type: 'box',\r\n                  tiled: box,\r\n                  name: this._getEntityName(box)\r\n               });\r\n            }\r\n\r\n            const circleColliders = objectLayer.getObjectsByClass('circlecollider');\r\n            for (let circle of circleColliders) {\r\n               const collisionType = circle.getProperty<CollisionType>('collisiontype');\r\n               const color = circle.getProperty<string>('color');\r\n               const zIndex = this._calculateZIndex(circle, objectLayer);\r\n               ex.colliders.push({\r\n                  x: circle.x,\r\n                  y: circle.y,\r\n                  radius: Math.max(circle.width ?? 0, circle.height ?? 0),\r\n                  collisionType: collisionType?.value ?? CollisionType.Fixed,\r\n                  color,\r\n                  zIndex: zIndex,\r\n                  width: circle.width ?? 0,\r\n                  height: circle.height ?? 0,\r\n                  type: 'circle',\r\n                  tiled: circle,\r\n                  name: this._getEntityName(circle)\r\n               })\r\n            }\r\n         }\r\n      }\r\n      this.ex = ex;\r\n   }\r\n\r\n   public isLoaded() {\r\n      return !!this.data;\r\n   }\r\n\r\n   public isIsometric() {\r\n      return !!this.isoLayers.length;\r\n   }\r\n\r\n   public async load(): Promise<TiledMap> {\r\n      const mapData = await this._resource.load();\r\n      const tiledMap = await this._importMapData(mapData);\r\n      let externalTilesets: Promise<any>[] = [];\r\n\r\n      // Loop through loaded tileset data\r\n      // If we find an image property, then\r\n      // load the image and sprite\r\n\r\n      tiledMap.rawMap.tilesets.forEach(ts => {\r\n         // If we find a source property, then\r\n         // load the tileset data, merge it with\r\n         // existing data, and load the image and sprite\r\n         if (ts.source) {\r\n            const type = ts.source.includes('.tsx') ? 'text' : 'json';\r\n            var tileset = new Resource<RawTiledTileset>(this.convertPath(this.path, ts.source), type);\r\n\r\n            externalTilesets.push(tileset.load().then((external: any) => {\r\n               if (type === 'text') {\r\n                  external = parseExternalTsx(external, ts.firstgid, ts.source);\r\n               } else {\r\n                  external = parseExternalJson(external, ts.firstgid, ts.source);\r\n               }\r\n               Object.assign(ts, external);\r\n               tiledMap.tileSets.push(external);\r\n            }, () => {\r\n               Logger.getInstance().error(`[Tiled] Error loading external tileset file ${tileset.path}`)\r\n            }));\r\n         }\r\n      });\r\n\r\n      // Load all tilesets if necessary\r\n      await Promise.all(externalTilesets).then(() => {\r\n\r\n         // external images\r\n         let externalImages: Promise<any>[] = [];\r\n\r\n         // retrieve images from tilesets and create textures\r\n         tiledMap.rawMap.tilesets.forEach(ts => {\r\n            let tileSetImages: string[] = [];\r\n            // if image is specified it's a single image tileset\r\n            if (ts.image) {\r\n               if (ts.source) {\r\n                  // if external tileset \"source\" is specified and images are relative to external tileset\r\n                  tileSetImages = [this.convertPath(ts.source, ts.image)];\r\n               } else {\r\n                  // otherwise for embedded tilesets, images are relative to the tmx (this.path)\r\n                  tileSetImages = [this.convertPath(this.path, ts.image)];\r\n               }\r\n               for (let image of tileSetImages) {\r\n                  const tx = new ImageSource(image);\r\n                  this.imageMap[ts.firstgid] = tx;\r\n                  externalImages.push(tx.load());\r\n                  Logger.getInstance().debug(\"[Tiled] Loading associated tileset image: \" + ts.image);\r\n               }\r\n            } else {\r\n               // otherwise it's a collection of images tileset\r\n               for (let tile of ts.tiles) {\r\n                  let tileImage: string;\r\n                  if (ts.source) {\r\n                     tileImage = this.convertPath(ts.source, tile.image);\r\n                  } else {\r\n                     tileImage = this.convertPath(this.path, tile.image);\r\n                  }\r\n                  const tx = new ImageSource(tileImage);\r\n                  externalImages.push(tx.load());\r\n                  if (!this.tileImageMap[ts.firstgid]) {\r\n                     this.tileImageMap[ts.firstgid] = [];\r\n                  }\r\n                  this.tileImageMap[ts.firstgid].push([tile, tx]);\r\n                  Logger.getInstance().debug(\"[Tiled] Loading associated tileset image: \" + tileImage);\r\n               }\r\n            }\r\n         });\r\n\r\n         return Promise.all(externalImages).then(() => {\r\n            this._createTileMap();\r\n         }, () => {\r\n            Logger.getInstance().error(\"[Tiled] Error loading tileset images\")\r\n         });\r\n      });\r\n\r\n      this._parseExcaliburInfo();\r\n      return tiledMap;\r\n   }\r\n\r\n   private async _importMapData(data: string | RawTiledMap): Promise<TiledMap> {\r\n      if (data === void 0) {\r\n         throw `Tiled map resource ${this.path} is empty`;\r\n      }\r\n\r\n      switch (this.mapFormat) {\r\n         case TiledMapFormat.TMX:\r\n            return this.data = await TiledMap.fromTmx(data as string);\r\n         case TiledMapFormat.JSON:\r\n            return this.data = await TiledMap.fromJson(data as RawTiledMap);\r\n         default:\r\n            throw new Error('Unknown map format: ' + this.mapFormat);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Given a Tiled gid (global identifier) return the Tiled tileset data\r\n    * @param gid \r\n    */\r\n   public getTilesetForTile(gid: number): TiledTileset {\r\n      if (this.data) {\r\n         for (var i = this.data.tileSets.length - 1; i >= 0; i--) {\r\n            var ts = this.data.tileSets[i];\r\n\r\n            if (gid >= ts.firstGid && gid <= ts.firstGid + ts.tileCount - 1) {\r\n               return ts;\r\n            }\r\n         }\r\n      }\r\n      throw Error(`No tileset exists for tiled gid [${gid}]!`);\r\n   }\r\n\r\n   /**\r\n    * Given a Tiled TileSet gid, return the equivalent Excalibur Sprite\r\n    * @param gid \r\n    */\r\n   public getSpriteForGid(gid: number): Sprite {\r\n      const h = isFlippedHorizontally(gid);\r\n      const v = isFlippedVertically(gid);\r\n      const d = isFlippedDiagonally(gid);\r\n      const normalizedGid = getCanonicalGid(gid);\r\n      const tileset = this.getTilesetForTile(normalizedGid);\r\n      const spriteIndex = normalizedGid - tileset.firstGid;\r\n      const spriteSheet = this.sheetMap[tileset.firstGid.toString()];\r\n      if (spriteSheet) {\r\n         let sprite = spriteSheet.sprites[spriteIndex];\r\n         if (d || h || v) {\r\n            sprite = sprite.clone();\r\n         }\r\n         // See https://github.com/mapeditor/tiled/issues/2119#issuecomment-491533214\r\n         if (d) {\r\n            sprite.rotation = -Math.PI / 2;\r\n            sprite.scale = vec(-1, 1);\r\n         }\r\n         if (h) {\r\n            sprite.scale = vec((d ? 1 : -1) * sprite.scale.x, (d ? -1 : 1) * sprite.scale.y);\r\n         }\r\n         if (v) {\r\n            sprite.scale = vec((d ? -1 : 1) * sprite.scale.x, (d ? 1 : -1) * sprite.scale.y);\r\n         }\r\n         return sprite;\r\n      }\r\n      throw new Error(`Could not find sprite for gid: [${gid}] normalized gid: [${normalizedGid}]`);\r\n   }\r\n\r\n   private _transformPoints(points: Vector[], tileset: TiledTileset, gid: number) {\r\n      const h = isFlippedHorizontally(gid);\r\n      const v = isFlippedVertically(gid);\r\n      const d = isFlippedDiagonally(gid);\r\n      if (d) {\r\n         points = points.map(p => tileset.diagonalFlipTransform.multiply(p));\r\n      }\r\n      if (h) {\r\n         points = points.map(p => tileset.horizontalFlipTransform.multiply(p));\r\n      }\r\n      if (v) {\r\n         points = points.map(p => tileset.verticalFlipTransform.multiply(p));\r\n      }\r\n      return points;\r\n   }\r\n\r\n   public getCollidersForGid(gid: number): Collider[] {\r\n      const normalizedGid = getCanonicalGid(gid);\r\n      const tileset = this.getTilesetForTile(normalizedGid);\r\n      const tileIndex = normalizedGid - tileset.firstGid;\r\n      const tileWithObjects = tileset.tiles.find(t => t.id === tileIndex);\r\n      if (tileWithObjects && tileWithObjects.objectgroup) {\r\n         const result = [];\r\n         for (const polygon of tileWithObjects.objectgroup.getPolygons()) {\r\n            const offset = vec(polygon.x, polygon.y);\r\n            const points = polygon.polygon.points;\r\n            const parsed = points.split(\" \")\r\n               .map((tp: string) => {\r\n                  const point = tp.split(\",\");\r\n                  return vec(Number.parseFloat(point[0]), Number.parseFloat(point[1])).add(offset)\r\n               });\r\n            const poly = Shape.Polygon(parsed);\r\n            poly.points = this._transformPoints(poly.points, tileset, gid);\r\n            result.push(poly);\r\n         }\r\n\r\n         for (const box of tileWithObjects.objectgroup.getBoxes()) {\r\n            const boxCollider = Shape.Box(box.width, box.height, Vector.Zero);\r\n            boxCollider.points = boxCollider.points.map(p => p.add(vec(box.x, box.y)));\r\n            boxCollider.points = this._transformPoints(boxCollider.points, tileset, gid);\r\n            result.push(boxCollider);\r\n         }\r\n\r\n         for (const circle of tileWithObjects.objectgroup.getEllipses()) {\r\n            const circleCollider = Shape.Circle(\r\n               Math.min(circle.width / 2, circle.height / 2),\r\n               vec(circle.width / 2, circle.height / 2).add(vec(circle.x, circle.y)));\r\n            result.push(circleCollider);\r\n         }\r\n\r\n         return result;\r\n      }\r\n      return [];\r\n   }\r\n\r\n   public getAnimationForGid(gid: number): Animation | null {\r\n      const normalizedGid = getCanonicalGid(gid);\r\n      const tileset = this.getTilesetForTile(normalizedGid);\r\n      const tileIndex = normalizedGid - tileset.firstGid;\r\n      const tileWithAnimation = tileset.tiles.find(t => t.id === tileIndex);\r\n      if (tileWithAnimation && tileWithAnimation.hasAnimation()) {\r\n         return tileWithAnimation.getAnimation(this);\r\n      }\r\n      return null;\r\n   }\r\n\r\n   private _calculateZIndex(entity: TiledEntity, tileLayerOrObjectGroup: TiledLayer | TiledObjectGroup): number {\r\n      let finalZ = entity.getProperty<number>('z')?.value ?? entity.getProperty<number>('zindex')?.value;\r\n\r\n      finalZ ??= (tileLayerOrObjectGroup.order + this._layerZIndexStart);\r\n\r\n      // coerce to integer\r\n      return +finalZ\r\n   }\r\n\r\n   private _getEntityName(entity: TiledEntity): string | undefined {\r\n      return entity.name;\r\n   }\r\n   /**\r\n    * Creates the Excalibur tile map representation\r\n    */\r\n   private _createTileMap() {\r\n      // register sprite sheets for each tileset in map\r\n      for (const tileset of this.data.rawMap.tilesets) {\r\n         const spacing = tileset.spacing ?? 0;\r\n         const cols = Math.floor((tileset.imagewidth + spacing) / (tileset.tilewidth + spacing));\r\n         const rows = Math.floor((tileset.imageheight + spacing) / (tileset.tileheight + spacing));\r\n         // Single image tilesets\r\n         if (this.imageMap[tileset.firstgid]) {\r\n            // Tiled and Excalibur use the same words for different things :facepalm:\r\n            // Tiled margin is the same as Excalibur originOffset\r\n            // Tiled spacing is the same as Excalibur margin\r\n            const ss = SpriteSheet.fromImageSource({\r\n               image: this.imageMap[tileset.firstgid],\r\n               grid: {\r\n                  columns: cols,\r\n                  rows: rows,\r\n                  spriteWidth: tileset.tilewidth,\r\n                  spriteHeight: tileset.tileheight\r\n               },\r\n               spacing: {\r\n                  originOffset: {\r\n                     x: tileset.margin ?? 0,\r\n                     y: tileset.margin ?? 0\r\n                  },\r\n                  margin: {\r\n                     x: tileset.spacing ?? 0,\r\n                     y: tileset.spacing ?? 0,\r\n                  }\r\n               }\r\n            });\r\n            this.sheetMap[tileset.firstgid.toString()] = ss;\r\n         // Image collection tilesets\r\n         } else {\r\n            const tiles = this.tileImageMap[tileset.firstgid];\r\n            const sprites = tiles.map(([tile, imageSource]) => {\r\n               const sprite = imageSource.toSprite();\r\n               return sprite;\r\n            })\r\n            const ss = new SpriteSheet({sprites});\r\n            this.sheetMap[tileset.firstgid.toString()] = ss;\r\n         }\r\n      }\r\n\r\n      // Create Excalibur sprites for each cell\r\n      for (var layer of this.data.layers) {\r\n         if (layer.rawLayer.type === \"tilelayer\") {\r\n            if (this.data.orientation === \"orthogonal\") {\r\n\r\n               const rawLayer = layer.rawLayer;\r\n               const tileMapLayer = new TileMap({\r\n                  name: layer.rawLayer.name,\r\n                  pos: vec(layer.offset.x, layer.offset.y),\r\n                  tileWidth: this.data.rawMap.tilewidth,\r\n                  tileHeight: this.data.rawMap.tileheight,\r\n                  columns: this.data.width,\r\n                  rows: this.data.height\r\n               });\r\n               // @ts-ignore\r\n               tileMapLayer.addComponent(new TiledLayerComponent(layer));\r\n               if (layer.rawLayer.parallaxx || layer.rawLayer.parallaxy) {\r\n                  const factor = vec(layer.rawLayer.parallaxx ?? 1.0, layer.rawLayer.parallaxy ?? 1.0);\r\n                  tileMapLayer.addComponent(new ParallaxComponent(factor));\r\n               }\r\n\r\n               // I know this looks goofy, but the entity and the layer \"it belongs\" to are the same here\r\n               tileMapLayer.z = this._calculateZIndex(layer, layer); \r\n               for (let i = 0; i < rawLayer.data.length; i++) {\r\n                  let gid = <number>rawLayer.data[i];\r\n                  if (gid !== 0) {\r\n                     const sprite = this.getSpriteForGid(gid);\r\n                     tileMapLayer.tiles[i].addGraphic(sprite);\r\n                     const colliders = this.getCollidersForGid(gid);\r\n                     for (let collider of colliders) {\r\n                        tileMapLayer.tiles[i].addCollider(collider);\r\n                     }\r\n                     const animation = this.getAnimationForGid(gid);\r\n                     if (animation) {\r\n                        tileMapLayer.tiles[i].clearGraphics();\r\n                        tileMapLayer.tiles[i].addGraphic(animation);\r\n                     }\r\n                  }\r\n               }\r\n               this._mapToRawLayer.set(tileMapLayer, rawLayer);\r\n               this.layers?.push(tileMapLayer);\r\n            }\r\n            if (this.data.orientation === \"isometric\") {\r\n               const rawLayer = layer.rawLayer;\r\n               const iso = new IsometricMap({\r\n                  name: layer.rawLayer.name,\r\n                  pos: vec(layer.offset.x, layer.offset.y),\r\n                  columns: this.data.width,\r\n                  rows: this.data.height,\r\n                  tileWidth: this.data.tileWidth,\r\n                  tileHeight: this.data.tileHeight\r\n               });\r\n               const tx = iso.get(TransformComponent);\r\n               if (tx) {\r\n                  tx.z = this._calculateZIndex(layer, layer);\r\n               }\r\n               for (let i = 0; i < rawLayer.data.length; i++) {\r\n                  let gid = <number>rawLayer.data[i];\r\n                  if (gid !== 0) {\r\n                     const sprite = this.getSpriteForGid(gid);\r\n                     iso.tiles[i].addGraphic(sprite);\r\n                     const colliders = this.getCollidersForGid(gid);\r\n                     for (let collider of colliders) {\r\n                        iso.tiles[i].addCollider(collider);\r\n                     }\r\n                     const isoComponent = iso.tiles[i].get(IsometricEntityComponent);\r\n                     if (isoComponent) {\r\n                        isoComponent.elevation = layer.order;\r\n                     }\r\n                  }\r\n               }\r\n               iso.updateColliders();\r\n               this._mapToRawLayer.set(iso, rawLayer);\r\n               this.isoLayers?.push(iso);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Return the TileMap layers for the parsed Tiled map\r\n    */\r\n   public getTileMapLayers(): TileMap[] {\r\n      if (this.layers?.length) {\r\n         return this.layers;\r\n      }\r\n      return [];\r\n   }\r\n\r\n   /**\r\n    * Return the IsometricMap layers for the parsed Tiled map\r\n    */\r\n   public getIsometricMapLayers(): IsometricMap[] {\r\n      if (this.isoLayers?.length) {\r\n         return this.isoLayers;\r\n      }\r\n      return [];\r\n   }\r\n\r\n   private _lookupTile(tilemap: TileMap, tile: Tile, layerName: string) {\r\n      const tileIndex = tilemap.tiles.indexOf(tile); // both ex and tiled share the same index\r\n\r\n      // Tiled data\r\n      // gid can be found by looking up the original data, locate layer by name\r\n      const tiledLayer = this.data.getTileLayerByName(layerName);\r\n      const tileGid = getCanonicalGid(tiledLayer.data[tileIndex]);\r\n\r\n      // No tile case\r\n      if (tileGid === 0) {\r\n         return null;\r\n      }\r\n\r\n      // Tiled tileset properties\r\n      const tiledTileset = this.getTilesetForTile(tileGid);\r\n      // odd quirk of Tiled's data the gid's here are off by 1 from the data array :/\r\n      const tiledTile = tiledTileset.tiles.find(t => t.id === (tileGid - 1));\r\n      if (!tiledTile) {\r\n         return {\r\n            id: tileGid - 1,\r\n            tileset: tiledTileset,\r\n            properties: {}\r\n         } as TiledTilesetTile\r\n      }\r\n      return tiledTile;\r\n   }\r\n\r\n   public getTileByPoint(layerName: string, worldPos: Vector): TiledTilesetTile | null {\r\n      // ex TileMap data structure by name\r\n      const tilemap = this.getTileMapLayers().find(tm => tm.name === layerName);\r\n      if (tilemap) {\r\n\r\n         const tile = tilemap.getTileByPoint(worldPos);\r\n         if (!tile) return null;\r\n         return this._lookupTile(tilemap, tile, layerName);\r\n      }\r\n      return null;\r\n   }\r\n\r\n   public getTileByCoordinate(layerName: string, x: number, y: number): TiledTilesetTile | null {\r\n      // ex TileMap data structure by name\r\n      const tilemap = this.getTileMapLayers().find(tm => tm.name === layerName);\r\n      if (tilemap) {\r\n\r\n         const tile = tilemap.getTile(x, y);\r\n         return this._lookupTile(tilemap, tile, layerName);\r\n      }\r\n      return null;\r\n   }\r\n}\r\n", "import { Component } from \"excalibur\";\r\nimport { TiledObject } from \"./tiled-object\";\r\n\r\n/**\r\n * @deprecated\r\n */\r\n// @ts-ignore\r\nexport class TiledObjectComponent extends Component<'ex.tiledobject'> {\r\n   public readonly type = \"ex.tiledobject\";\r\n   constructor(public object: TiledObject) {\r\n      super();\r\n   }\r\n}", "import { ExcaliburCamera, TiledPoint } from \"./tiled-types\";\r\nimport { TiledEntity } from \"./tiled-entity\";\r\nimport { RawTiledLayer } from \"./raw-tiled-layer\";\r\nimport { RawTiledObject } from \"./raw-tiled-object\";\r\nimport { toRadians } from \"excalibur\";\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface Polygon {\r\n   x: number;\r\n   y: number;\r\n   polygon: {\r\n      points: string;\r\n   }\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface Box {\r\n   x: number;\r\n   y: number;\r\n   width: number;\r\n   height: number;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface Ellipse {\r\n   x: number;\r\n   y: number;\r\n   width: number;\r\n   height: number;\r\n}\r\n\r\n/**\r\n * Tiled Object Layer\r\n * @deprecated\r\n */\r\nexport class TiledObjectGroup extends TiledEntity {\r\n   public objects: TiledObject[] = [];\r\n\r\n   public rawObjectGroup!: RawTiledLayer;\r\n\r\n   public order!: number;\r\n\r\n   public getCamera(): ExcaliburCamera | undefined {\r\n      const camera = this.getObjectByClass('camera');\r\n      if (camera) {\r\n         const zoom = camera.getProperty<number>('zoom');\r\n         return ({\r\n            x: camera.x,\r\n            y: camera.y,\r\n            zoom: zoom ? +(zoom?.value ?? 1) : 1\r\n         })\r\n      }\r\n   }\r\n\r\n   public getObjectByType(type: string): TiledObject | undefined {\r\n      return this.getObjectsByType(type)[0];\r\n   }\r\n\r\n   public getObjectByClass(type: string): TiledObject | undefined {\r\n      return this.getObjectsByClass(type)[0];\r\n   }\r\n\r\n   public getObjectsByType(type: string): TiledObject[] {\r\n      return this.objects.filter(o => o.type?.toLocaleLowerCase() === type.toLocaleLowerCase());\r\n   }\r\n\r\n   /**\r\n    * Since Tiled 1.10 the property is called `type` again.\r\n    * We treat both properties here to be on the safe side.\r\n    * See https://doc.mapeditor.org/en/stable/reference/tmx-changelog/#tiled-1-10\r\n    */\r\n   public getObjectsByClass(type: string): TiledObject[] {\r\n      return this.objects.filter(o => o.class?.toLocaleLowerCase() === type.toLocaleLowerCase() || o.type?.toLocaleLowerCase() === type.toLocaleLowerCase());\r\n   }\r\n\r\n   public getObjectByName(name: string): TiledObject | undefined {\r\n      return this.getObjectsByName(name)[0];\r\n   }\r\n\r\n   public getObjectsByName(name: string): TiledObject[] {\r\n      return this.objects.filter(o => o.name?.toString().toLocaleLowerCase() === name.toString().toLocaleLowerCase());\r\n   }\r\n\r\n   public getPoints(): TiledObject[] {\r\n      return this.objects.filter(o => !!o.point);\r\n   }\r\n\r\n   public getEllipses(): (TiledObject & Ellipse)[] {\r\n      return this.objects.filter(o => !!o.ellipse) as (TiledObject & Ellipse)[];\r\n   }\r\n\r\n   public getText(): TiledObject[] {\r\n      return this.objects.filter(o => !!o.text);\r\n   }\r\n\r\n   public getPolyLines(): TiledObject[] {\r\n      return this.objects.filter(o => !!o.polyline);\r\n   }\r\n\r\n   public getPolygons(): (TiledObject & Polygon)[] {\r\n      return this.objects.filter(o => !!o.polygon) as (TiledObject & Polygon)[];\r\n   }\r\n\r\n   public getBoxes(): (TiledObject & Box)[] {\r\n      return this.objects.filter(o => !!o.width && !!o.height && !o.ellipse) as (TiledObject & Box)[];\r\n   }\r\n\r\n   public getInsertedTiles(): TiledObject[] {\r\n      return this.objects.filter(o => !!o.gid);\r\n   }\r\n\r\n   public static parse(objectGroup: RawTiledLayer): TiledObjectGroup {\r\n      if (objectGroup.type !== 'objectgroup') throw Error('Cannot parse non objectgroup type layer');\r\n      const resultObjectGroup = new TiledObjectGroup();\r\n      resultObjectGroup.id = +objectGroup.id;\r\n      resultObjectGroup.name = objectGroup.name;\r\n      resultObjectGroup.properties = objectGroup.properties ?? [];\r\n      resultObjectGroup.rawObjectGroup = objectGroup;\r\n      resultObjectGroup.order = objectGroup.order;\r\n      for (let object of objectGroup.objects) {\r\n         resultObjectGroup.objects.push(TiledObject.parse(object));\r\n      } \r\n      return resultObjectGroup;\r\n   }\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport class TiledObject extends TiledEntity {\r\n   public type?: string;\r\n   public class?: string;\r\n   public x!: number;\r\n   public y!: number;\r\n   public visible!: boolean;\r\n   public rotation!: number;\r\n   public width?: number;\r\n   public height?: number;\r\n\r\n   /**\r\n    * Present on point objects\r\n    */\r\n   public point?: boolean;\r\n\r\n   /**\r\n    * Present on ellipse objects\r\n    */\r\n   public ellipse?: boolean;\r\n\r\n   /**\r\n    * Present on text objects\r\n    */\r\n   public text?: TiledText;\r\n   /**\r\n    * Present on polyline objects\r\n    */\r\n   public polyline?: TiledPoint[];\r\n   /**\r\n    * Present on polygon objects\r\n    */\r\n   public polygon?: TiledPoint[];\r\n   /**\r\n    * Present on inserted tile objects\r\n    */\r\n   public gid?: number;\r\n\r\n   public rawObject!: RawTiledObject;\r\n\r\n   public static parse(object: RawTiledObject): TiledObject {\r\n      const resultObject = new TiledObject();\r\n      resultObject.id = +object.id;\r\n      resultObject.gid = object.gid;\r\n      resultObject.visible = object.visible ?? true;\r\n      resultObject.name = object.name;\r\n      resultObject.type = object.type;\r\n      resultObject.class = object.class;\r\n      resultObject.x = +object.x;\r\n      resultObject.y = +object.y;\r\n      resultObject.rotation = object.rotation ? toRadians(object.rotation) : 0;\r\n      resultObject.width = object.width ?? 0;\r\n      resultObject.height = object.height ?? 0;\r\n      resultObject.point = object.point;\r\n      resultObject.ellipse = object.ellipse === true || (object.ellipse as any === '');\r\n      resultObject.polyline = object.polyline;\r\n      resultObject.polygon = object.polygon;\r\n      resultObject.rawObject = object;\r\n      if (object.text) {\r\n         resultObject.text = {\r\n            ...object.text,\r\n            pixelSize: object.text.pixelsize,\r\n            fontFamily: object.text.fontfamily\r\n         }\r\n      }\r\n      resultObject.properties = object.properties ?? [];\r\n      return resultObject\r\n   }\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface TiledText {\r\n   text: string;\r\n   color?: string;\r\n   fontFamily: string;\r\n   pixelSize: number;\r\n   bold: boolean;\r\n   italic: boolean;\r\n   underline: boolean;\r\n   strikeout: boolean;\r\n   kerning: boolean;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface TiledInsertedTile extends TiledObject {\r\n   gid: number;\r\n}\r\n", "// tmx xml parsing\r\nimport { Matrix, vec, Animation, Sprite, Frame, AnimationStrategy } from 'excalibur';\r\nimport * as parser from 'fast-xml-parser'\r\nimport { TiledObjectGroup } from './tiled-object';\r\n\r\nimport { TiledFrame, TiledGrid, TiledMapTerrain, TiledProperty, TiledTileOffset, TiledWangSet } from \"./tiled-types\";\r\nimport { RawTiledTileset } from \"./raw-tiled-tileset\";\r\nimport { RawTilesetTile } from \"./raw-tileset-tile\";\r\nimport { TiledMapResource } from './tiled-map-resource';\r\nimport { getProperty } from './tiled-entity';\r\n/**\r\n * @deprecated\r\n */\r\nexport class TiledTileset {\r\n   /**\r\n    * The JSON format version\r\n    */\r\n   version!: number;\r\n\r\n   /**\r\n    * GID corresponding to the first tile in the set\r\n    */\r\n   firstGid!: number;\r\n\r\n   /**\r\n    * Path to the image used for tiles in this set\r\n    *\r\n    * If no image is specified this is a collection of images tileset and individual tiles have images\r\n    */\r\n   image?: string;\r\n\r\n   /**\r\n    * Height of source image in pixels\r\n    */\r\n   imageHeight!: number;\r\n   /**\r\n    * Width of source image in pixels\r\n    */\r\n   imageWidth!: number;\r\n   /**\r\n    * (optional)\r\n    */\r\n   grid?: TiledGrid;\r\n   /**\r\n    * Buffer between image edge and first tile (pixels)\r\n    */\r\n   margin!: number;\r\n   /**\r\n    * Alignment to use for tile objects (unspecified (default), topleft, top, topright, left, center, right, bottomleft, bottom or bottomright) (since 1.4)\r\n    */\r\n   objectAlignment!: 'unspecified' | 'topleft' | 'top' | 'topright' | 'left' | 'center' | 'right' | 'bottomleft' | 'bottom' | 'bottomright'\r\n   /**\r\n    * Refers to external tileset file\r\n    */\r\n   source!: string;\r\n   /**\r\n    * Spacing between adjacent tiles in image (pixels)\r\n    */\r\n   spacing!: number;\r\n\r\n   /**\r\n    * Maximum columns of tiles in this set\r\n    */\r\n   columns!: number;\r\n   /**\r\n    * Height of a tile in pixels\r\n    */\r\n   tileHeight!: number;\r\n   /**\r\n    * Width of a tile in pixels \r\n    */\r\n   tileWidth!: number;\r\n\r\n   /**\r\n    * Array of Tiles (optional)\r\n    */\r\n   tiles: TiledTilesetTile[] = [];\r\n\r\n   name!: string;\r\n   properties?: TiledProperty[];\r\n   /**\r\n    * The number of tiles in this tileset\r\n    */\r\n   tileCount!: number;\r\n   /**\r\n    * Optional\r\n    */\r\n   tileOffset?: TiledTileOffset;\r\n\r\n   /**\r\n    * The Tiled version used to save the file\r\n    */\r\n   tiledVersion!: string;\r\n   /**\r\n    * Hex-formatted color (#RRGGBB or #AARRGGBB) (optional)\r\n    */\r\n   backgroundColor?: string;\r\n   /**\r\n    * Hex-formatted color (#RRGGBB) (optional)\r\n    */\r\n   transparentColor?: string;\r\n   /**\r\n    * Array of Terrains (optional)\r\n    */\r\n   terrains?: TiledMapTerrain[];\r\n\r\n   /**\r\n    * Array of Wang sets (since 1.1.5)\r\n    */\r\n   wangSets?: TiledWangSet[]\r\n\r\n   horizontalFlipTransform!: Matrix;\r\n   verticalFlipTransform!: Matrix;\r\n   diagonalFlipTransform!: Matrix;\r\n\r\n   public static parse(rawTileSet: RawTiledTileset) {\r\n      const tileSet = new TiledTileset();\r\n      let tiles: TiledTilesetTile[] = []\r\n      if (!Array.isArray(rawTileSet.tiles)) {\r\n         for (let id in (rawTileSet.tiles as any)) {\r\n            tiles.push(TiledTilesetTile.parse({...(rawTileSet.tiles as any)[id], id: +id}, tileSet));\r\n         }\r\n      } else {\r\n         tiles = (rawTileSet.tiles ?? []).map(t => TiledTilesetTile.parse(t, tileSet));\r\n      }\r\n\r\n      tileSet.tiles = tiles;\r\n      tileSet.firstGid = rawTileSet.firstgid;\r\n      tileSet.tileWidth = rawTileSet.tilewidth;\r\n      tileSet.tileHeight = rawTileSet.tileheight;\r\n      tileSet.tileCount = rawTileSet.tilecount;\r\n      tileSet.tileOffset = rawTileSet.tileoffset;\r\n      tileSet.tiledVersion = rawTileSet.tiledversion;\r\n      tileSet.backgroundColor = rawTileSet.backgroundcolor;\r\n      tileSet.transparentColor = rawTileSet.transparentcolor;\r\n      tileSet.wangSets = rawTileSet.wangsets;\r\n      tileSet.imageWidth = rawTileSet.imagewidth;\r\n      tileSet.imageHeight = rawTileSet.imageheight;\r\n      tileSet.objectAlignment = rawTileSet.objectalignment ?? 'unspecified';\r\n      tileSet.image = rawTileSet.image;\r\n      tileSet.spacing = isNaN(rawTileSet.spacing) ? 0 : rawTileSet.spacing;\r\n\r\n      tileSet.horizontalFlipTransform = Matrix.identity().translate(tileSet.tileWidth, 0).scale(-1, 1);\r\n      tileSet.verticalFlipTransform = Matrix.identity().translate(0, tileSet.tileHeight).scale(1, -1);\r\n      tileSet.diagonalFlipTransform = Matrix.identity().translate(0, 0).rotate(-Math.PI/2).scale(-1, 1);\r\n\r\n      return tileSet;\r\n   }\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport class TiledTilesetTile {\r\n   id!: number;\r\n   tileset!: TiledTileset;\r\n   image?: string;\r\n   objectgroup?: TiledObjectGroup;\r\n   terrain?: number[];\r\n   animation?: TiledFrame[];\r\n   animationStrategy?: AnimationStrategy;\r\n   properties?: TiledProperty[];\r\n\r\n   hasAnimation() {\r\n      return !!this.animation;\r\n   }\r\n\r\n   getAnimation(map: TiledMapResource): Animation | null {\r\n      if (this.animation) {\r\n         let exFrames: Frame[] = [];\r\n         for (let frame of this.animation) {\r\n            exFrames.push({\r\n               graphic: map.getSpriteForGid(frame.tileid + this.tileset.firstGid),\r\n               duration: frame.duration\r\n            });\r\n         }\r\n         return new Animation({\r\n            frames: exFrames,\r\n            strategy: this.animationStrategy ?? AnimationStrategy.Loop\r\n         });\r\n      }\r\n      return null;\r\n   }\r\n\r\n   public static parse(rawTilesetTile: RawTilesetTile, tileset: TiledTileset): TiledTilesetTile {\r\n      const tile = new TiledTilesetTile();\r\n      tile.id = +rawTilesetTile.id;\r\n      tile.image = rawTilesetTile.image;\r\n      tile.tileset = tileset;\r\n      tile.properties = Array.isArray(rawTilesetTile.properties) ? rawTilesetTile.properties : (rawTilesetTile.properties as any)?.property ?? [];\r\n      if (rawTilesetTile.objectgroup) {\r\n         tile.objectgroup = TiledObjectGroup.parse(rawTilesetTile.objectgroup);\r\n      }\r\n      if (rawTilesetTile.terrain) {\r\n         tile.terrain = rawTilesetTile.terrain;\r\n      }\r\n      if (rawTilesetTile.animation) {\r\n         tile.animation = Array.isArray(rawTilesetTile.animation) ? rawTilesetTile.animation : [...(rawTilesetTile.animation as any).frame];\r\n         if (tile.properties) {\r\n            const maybeStrategy = getProperty<string>(tile.properties, \"animationstrategy\")?.value;\r\n            switch(maybeStrategy?.toLowerCase()) {\r\n               case AnimationStrategy.End.toLowerCase():\r\n                  tile.animationStrategy = AnimationStrategy.End;\r\n                  break;\r\n               case AnimationStrategy.Freeze.toLowerCase():\r\n                  tile.animationStrategy = AnimationStrategy.Freeze;\r\n                  break;\r\n               case AnimationStrategy.Loop.toLowerCase():\r\n                  tile.animationStrategy = AnimationStrategy.Loop;\r\n                  break;\r\n               case AnimationStrategy.PingPong.toLowerCase():\r\n                  tile.animationStrategy = AnimationStrategy.PingPong;\r\n                  break;\r\n               default:\r\n                  tile.animationStrategy = AnimationStrategy.Loop;\r\n            }\r\n         }\r\n      }\r\n      return tile;\r\n   }\r\n}\r\n// TODO merge this with the other parser\r\n/**\r\n * @deprecated\r\n */\r\nexport const parseExternalTsx = (tsxData: string, firstGid: number, source: string): TiledTileset => {\r\n   const _convertToArray = (obj: any, prop: string, plurlalize = false) => {\r\n      if (!obj[prop]) {\r\n         obj[prop + (plurlalize ? 's' : '')] = [];\r\n         return;\r\n      }\r\n\r\n      obj[prop + (plurlalize ? 's' : '')] = Array.isArray(obj[prop]) ? obj[prop] : [obj[prop]];\r\n      if (plurlalize) {\r\n         delete obj[prop];\r\n      }\r\n   }\r\n\r\n   const options: parser.X2jOptionsOptional = {\r\n      attributeNamePrefix : \"\",\r\n      textNodeName : \"#text\",\r\n      ignoreAttributes : false,\r\n      ignoreNameSpace : false,\r\n      allowBooleanAttributes : true,\r\n      parseNodeValue : true,\r\n      parseAttributeValue : true,\r\n      trimValues: true,\r\n      parseTrueNumberOnly: false,\r\n      arrayMode: false,\r\n      stopNodes: [\"parse-me-as-string\"]\r\n  };\r\n\r\n   const rawTsx = parser.parse(tsxData, options).tileset;\r\n   const rawTileset: RawTiledTileset = rawTsx;\r\n\r\n   rawTileset.firstgid = firstGid;\r\n   rawTileset.source = source;\r\n   rawTileset.imagewidth = rawTsx.image?.width;\r\n   rawTileset.imageheight = rawTsx.image?.height;\r\n   rawTileset.objectalignment = rawTsx.objectalignment ?? 'unspecified';\r\n   rawTileset.image = rawTsx.image?.source;\r\n   rawTileset.spacing = isNaN(rawTsx.spacing) ? 0 : rawTsx.spacing;\r\n   _convertToArray(rawTsx, \"tile\", true);\r\n   rawTsx.tiles.forEach((t: any) => { \r\n      if (t.image?.source) {\r\n        t.image = t.image.source;\r\n      }\r\n      if (t.objectgroup){\r\n         t.objectgroup.type = 'objectgroup';\r\n         _convertToArray(t.objectgroup, 'object', true);\r\n       }\r\n   });\r\n   rawTileset.tiles = rawTsx.tiles;\r\n\r\n   const result: TiledTileset = {\r\n      ...rawTileset,\r\n      tiles: [],\r\n      firstGid: rawTileset.firstgid,\r\n      tileWidth: rawTileset.tilewidth,\r\n      tileHeight: rawTileset.tileheight,\r\n      tileCount: rawTileset.tilecount,\r\n      tileOffset: rawTileset.tileoffset,\r\n      tiledVersion: rawTileset.tiledversion,\r\n      backgroundColor: rawTileset.backgroundcolor,\r\n      transparentColor: rawTileset.transparentcolor,\r\n      wangSets: rawTileset.wangsets,\r\n      imageWidth: rawTileset.imagewidth,\r\n      imageHeight: rawTileset.imageheight,\r\n      objectAlignment: rawTileset.objectalignment ?? 'unspecified',\r\n      image: rawTileset.image,\r\n      spacing: isNaN(rawTileset.spacing) ? 0 : rawTileset.spacing,\r\n      horizontalFlipTransform: Matrix.identity().translate(rawTileset.tilewidth, 0).scale(-1, 1),\r\n      verticalFlipTransform: Matrix.identity().translate(0, rawTileset.tileheight).scale(1, -1),\r\n      diagonalFlipTransform: Matrix.identity().translate(rawTileset.tilewidth, rawTileset.tileheight).rotate(-Math.PI/2).scale(-1, 1)\r\n   };\r\n\r\n   result.tiles = rawTileset.tiles.map(t => TiledTilesetTile.parse(t, result));\r\n\r\n   return result;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport const parseExternalJson = (rawTileset: RawTiledTileset, firstGid: number, source: string): TiledTileset => {\r\n   let tiles: TiledTilesetTile[] = [];\r\n\r\n   rawTileset.tiles = rawTileset.tiles ?? [];\r\n\r\n   const origin = vec(rawTileset.tilewidth / 2, rawTileset.tileheight / 2);\r\n   const result: TiledTileset = {\r\n      ...rawTileset,\r\n      source,\r\n      tiles,\r\n      firstGid: firstGid,\r\n      tileWidth: rawTileset.tilewidth,\r\n      tileHeight: rawTileset.tileheight,\r\n      tileCount: rawTileset.tilecount,\r\n      tileOffset: rawTileset.tileoffset,\r\n      tiledVersion: rawTileset.tiledversion,\r\n      backgroundColor: rawTileset.backgroundcolor,\r\n      transparentColor: rawTileset.transparentcolor,\r\n      wangSets: rawTileset.wangsets,\r\n      imageWidth: rawTileset.imagewidth,\r\n      imageHeight: rawTileset.imageheight,\r\n      spacing: isNaN(rawTileset.spacing) ? 0 : rawTileset.spacing,\r\n      objectAlignment: rawTileset.objectalignment ?? 'unspecified',\r\n      image: rawTileset.image,\r\n      horizontalFlipTransform: Matrix.identity().translate(rawTileset.tilewidth, 0).scale(-1, 1),\r\n      verticalFlipTransform: Matrix.identity().translate(0, rawTileset.tileheight).scale(1, -1),\r\n      diagonalFlipTransform: Matrix.identity().translate(rawTileset.tilewidth, rawTileset.tileheight).rotate(-Math.PI/2).scale(-1, 1)\r\n   };\r\n\r\n   for (let id in rawTileset.tiles) {\r\n      tiles.push(TiledTilesetTile.parse({...rawTileset.tiles[id], id: +id}, result));\r\n   }\r\n\r\n   return result;\r\n}\r\n", "import { z } from 'zod';\r\n\r\nconst TiledIntProperty = z.object({\r\n   name: z.string(),\r\n   type: z.literal('int'),\r\n   value: z.number().int()\r\n})\r\n\r\nconst TiledBoolProperty = z.object({\r\n   name: z.string(),\r\n   type: z.literal('bool'),\r\n   value: z.boolean()\r\n})\r\n\r\nconst TiledFloatProperty = z.object({\r\n   name: z.string(),\r\n   type: z.literal('float'),\r\n   value: z.number()\r\n})\r\n\r\nconst TiledStringProperty = z.object({\r\n   name: z.string(),\r\n   type: z.literal('string'),\r\n   value: z.string()\r\n})\r\n\r\nconst TiledFileProperty = z.object({\r\n   name: z.string(),\r\n   type: z.literal('file'),\r\n   value: z.string()\r\n})\r\n\r\nconst TiledColorProperty = z.object({\r\n   name: z.string(),\r\n   type: z.literal('color'),\r\n   value: z.string()\r\n})\r\n\r\nconst TiledObjectProperty = z.object({\r\n   name: z.string(),\r\n   type: z.literal('object'),\r\n   value: z.number()\r\n})\r\n\r\nconst TiledProperty = z.discriminatedUnion(\"type\", [\r\n   TiledIntProperty,\r\n   TiledBoolProperty,\r\n   TiledFloatProperty,\r\n   TiledStringProperty,\r\n   TiledFileProperty,\r\n   TiledColorProperty,\r\n   TiledObjectProperty\r\n]);\r\n\r\nconst TiledTileLayerBase = z.object({\r\n   name: z.string(),\r\n   type: z.literal(\"tilelayer\"),\r\n   class: z.string().optional(),\r\n   height: z.number(),\r\n   width: z.number(),\r\n   x: z.number(),\r\n   y: z.number(),\r\n   id: z.number(),\r\n   opacity: z.number(),\r\n   properties: z.array(TiledProperty).optional(),\r\n   visible: z.boolean(),\r\n   tintcolor: z.string().optional(),\r\n   parallaxx: z.number().optional(),\r\n   parallaxy: z.number().optional(),\r\n   offsetx: z.number().optional(),\r\n   offsety: z.number().optional(),\r\n});\r\n\r\nconst TiledTileLayerCSV = TiledTileLayerBase.extend({\r\n   data: z.array(z.number()),\r\n   encoding: z.literal('csv')\r\n})\r\n\r\nconst TiledTileLayerGZIP = TiledTileLayerBase.extend({\r\n   data: z.array(z.number()),\r\n   encoding: z.literal('base64'),\r\n   compression: z.literal('gzip'),\r\n})\r\n\r\nconst TiledTileLayerZLib = TiledTileLayerBase.extend({\r\n   data: z.array(z.number()),\r\n   encoding: z.literal('base64'),\r\n   compression: z.literal('zlib'),\r\n})\r\n\r\nconst TiledTileLayerZStandard = TiledTileLayerBase.extend({\r\n   data: z.array(z.number()),\r\n   encoding: z.literal('base64'),\r\n   compression: z.literal('zstandard'),\r\n})\r\n\r\nconst TiledTileLayerBase64 = TiledTileLayerBase.extend({\r\n   data: z.string(),\r\n   encoding: z.literal('base64'),\r\n   compression: z.string(),\r\n});\r\n\r\nconst TiledTileLayerChunk = z.object({\r\n   x: z.number(),\r\n   y: z.number(),\r\n   width: z.number(),\r\n   height: z.number(),\r\n   data: z.array(z.number()) // infinite chunks are only csv!\r\n});\r\n\r\nexport const TiledTileLayerInfinite = TiledTileLayerBase.extend({\r\n   startx: z.number(),\r\n   starty: z.number(),\r\n   chunks: z.array(TiledTileLayerChunk)\r\n});\r\n\r\nexport const TiledTileLayer = z.union([\r\n   TiledTileLayerBase64,\r\n   TiledTileLayerCSV,\r\n   TiledTileLayerGZIP,\r\n   TiledTileLayerZLib,\r\n   TiledTileLayerZStandard,\r\n   TiledTileLayerInfinite\r\n]);\r\n\r\nexport function needsDecoding(x: TiledTileLayer): x is TiledTileLayer & { encoding: 'base64', data: string, compression: string } {\r\n   return (x as any).encoding === 'base64';\r\n}\r\n\r\nexport function isCSV(x: TiledTileLayer): x is TiledTileLayer & { encoding: 'csv', data: number[] } {\r\n   return (x as any).encoding === 'csv' || Array.isArray((x as any).data);\r\n}\r\n\r\nconst TiledPoint = z.object({\r\n   x: z.number(),\r\n   y: z.number()\r\n});\r\n\r\nconst TiledPolygon = z.array(TiledPoint);\r\n\r\nexport const TiledText = z.object({\r\n   text: z.string(),\r\n   color: z.string().optional(),\r\n   fontfamily: z.string().optional(),\r\n   pixelsize: z.number().optional(),\r\n   wrap: z.boolean().optional(),\r\n   halign: z.union([z.literal('left'), z.literal('center'), z.literal('right'), z.literal('justify')]).optional(),\r\n   valign: z.union([z.literal('top'), z.literal('center'), z.literal('bottom')]).optional()\r\n})\r\n\r\nconst TiledObject = z.object({\r\n   id: z.number().optional(), // Template files might not have an id for some reason\r\n   name: z.string().optional(),\r\n   type: z.string().optional(),\r\n   x: z.number().optional(), // template files dont have x/y sometimes\r\n   y: z.number().optional(), // template files dont have x/y sometimes\r\n   rotation: z.number().optional(),\r\n   height: z.number().optional(),\r\n   width: z.number().optional(),\r\n   visible: z.boolean().optional(),\r\n   gid: z.number().optional(),\r\n   text: TiledText.optional(),\r\n   point: z.boolean().optional(),\r\n   ellipse: z.boolean().optional(),\r\n   polyline: z.array(TiledPoint).optional(),\r\n   polygon: TiledPolygon.optional(),\r\n   template: z.string().optional(),\r\n   properties: z.array(TiledProperty).optional(),\r\n});\r\n\r\nconst TiledAnimation = z.object({\r\n   duration: z.number(),\r\n   tileid: z.number()\r\n});\r\n\r\nconst TiledObjectLayer = z.object({\r\n   name: z.string(),\r\n   draworder: z.string(),\r\n   type: z.literal(\"objectgroup\"),\r\n   class: z.string().optional(),\r\n   x: z.number(),\r\n   y: z.number(),\r\n   id: z.number(),\r\n   color: z.string().optional(),\r\n   tintcolor: z.string().optional(),\r\n   parallaxx: z.number().optional(),\r\n   parallaxy: z.number().optional(),\r\n   offsetx: z.number().optional(),\r\n   offsety: z.number().optional(),\r\n   opacity: z.number(),\r\n   properties: z.array(TiledProperty).optional(),\r\n   visible: z.boolean(),\r\n   objects: z.array(TiledObject)\r\n});\r\n\r\nconst TiledImageLayer = z.object({\r\n   name: z.string(),\r\n   x: z.number(),\r\n   y: z.number(),\r\n   id: z.number(),\r\n   type: z.literal('imagelayer'),\r\n   class: z.string().optional(),\r\n   image: z.string().optional(),\r\n   opacity: z.number(),\r\n   properties: z.array(TiledProperty).optional(),\r\n   visible: z.boolean(),\r\n   tintcolor: z.string().optional(),\r\n   repeatx: z.boolean().optional(),\r\n   repeaty: z.boolean().optional(),\r\n   parallaxx: z.number().optional(),\r\n   parallaxy: z.number().optional(),\r\n   offsetx: z.number().optional(),\r\n   offsety: z.number().optional(),\r\n   transparentcolor: z.string().optional()\r\n});\r\n\r\n\r\n// FIXME recursive Group Layer definition\r\nconst TiledLayer = z.union([\r\n   TiledImageLayer,\r\n   TiledTileLayer,\r\n   TiledObjectLayer\r\n]);\r\n\r\n\r\nconst TiledObjectGroup = z.object({\r\n   draworder: z.string(),\r\n   id: z.number().optional(), // sometimes tiled doesn't put an id here :( inconsistent\r\n   name: z.string(),\r\n   x: z.number(),\r\n   y: z.number(),\r\n   opacity: z.number(),\r\n   tintcolor: z.string().optional(),\r\n   type: z.literal(\"objectgroup\"),\r\n   visible: z.boolean(),\r\n   objects: z.array(TiledObject),\r\n   properties: z.array(TiledProperty).optional()\r\n})\r\n\r\nexport const TiledTile = z.object({\r\n   id: z.number(),\r\n   type: z.string().optional(),\r\n   animation: z.array(TiledAnimation).optional(),\r\n   objectgroup: TiledObjectGroup.optional(),\r\n   probability: z.number().optional(),\r\n   properties: z.array(TiledProperty).optional(),\r\n   // Tiles can be collections of images\r\n   image: z.string().optional(),\r\n   imageheight: z.number().optional(),\r\n   imagewidth: z.number().optional()\r\n})\r\n\r\nconst TiledTilesetEmbedded = z.object({\r\n   name: z.string(),\r\n   firstgid: z.number().optional(),\r\n   class: z.string().optional(),\r\n   objectalignment: z.union([\r\n      z.literal('topleft'),\r\n      z.literal('top'),\r\n      z.literal('topright'),\r\n      z.literal('left'),\r\n      z.literal('center'),\r\n      z.literal('right'),\r\n      z.literal('bottomleft'),\r\n      z.literal('bottom'),\r\n      z.literal('bottomright'),\r\n   ]).optional(),\r\n   // optional image/width/height if collection of images\r\n   image: z.string().optional(),\r\n   imagewidth: z.number().optional(),\r\n   imageheight: z.number().optional(),\r\n   columns: z.number(),\r\n   tileheight: z.number(),\r\n   tilewidth: z.number(),\r\n   tilecount: z.number(),\r\n\r\n   grid: z.object({\r\n      height: z.number(),\r\n      width: z.number(),\r\n      orientation: z.union([z.literal('isometric'), z.literal('orthogonal')])\r\n   }).optional(),\r\n   // Can specify a drawing offset\r\n   tileoffset: TiledPoint.optional(),\r\n   spacing: z.number(),\r\n   margin: z.number(),\r\n   tiles: z.array(TiledTile).optional(),\r\n   properties: z.array(TiledProperty).optional()\r\n});\r\n\r\nexport function isTiledTilesetSingleImage(x: TiledTileset): x is TiledTilesetEmbedded & { image: string, imagewidth: number, imageheight: number } {\r\n   return !!(x as TiledTilesetEmbedded).image;\r\n}\r\n\r\nexport function isTiledTilesetCollectionOfImages(x: TiledTileset): x is Omit<TiledTilesetEmbedded, 'image' | 'imagewidth' | 'imageheight'> {\r\n   return !!!(x as TiledTilesetEmbedded).image;\r\n}\r\n\r\nexport const TiledTilesetFile = TiledTilesetEmbedded.extend({\r\n   tiledversion: z.string().optional(),\r\n   type: z.literal('tileset'),\r\n   version: z.string().optional()\r\n});\r\n\r\nconst TiledTilesetExternal = z.object({\r\n   firstgid: z.number(),\r\n   source: z.string()\r\n});\r\n\r\nexport const TiledTileset = z.union([TiledTilesetEmbedded, TiledTilesetExternal]);\r\n\r\nexport const TiledTemplate = z.object({\r\n   object: TiledObject.extend({ id: z.number().optional() }),\r\n   tileset: TiledTilesetExternal.optional(),\r\n   type: z.literal('template')\r\n});\r\n\r\nexport const TiledMap = z.object({\r\n   type: z.string(),\r\n   class: z.string().optional(),\r\n   tiledversion: z.string(),\r\n   version: z.string(),\r\n   width: z.number(),\r\n   height: z.number(),\r\n   tilewidth: z.number(),\r\n   tileheight: z.number(),\r\n   compressionlevel: z.number().optional(),\r\n   infinite: z.boolean(),\r\n   nextlayerid: z.number(),\r\n   nextobjectid: z.number(),\r\n   parallaxoriginx: z.number().optional(),\r\n   parallaxoriginy: z.number().optional(),\r\n   hexsidelength: z.number().optional(),\r\n   staggeraxis: z.literal('y').or(z.literal('x')).optional(),\r\n   staggerindex: z.literal('odd').or(z.literal('even')).optional(),\r\n   orientation: z.union([z.literal(\"isometric\"), z.literal(\"orthogonal\"), z.literal(\"staggered\"), z.literal(\"hexagonal\")]),\r\n   renderorder: z.union([z.literal(\"right-down\"), z.literal(\"right-up\"), z.literal(\"left-down\"), z.literal(\"left-up\")]),\r\n   backgroundcolor: z.string().optional(),\r\n   layers: z.array(TiledLayer),\r\n   tilesets: z.array(TiledTileset),\r\n   properties: z.array(TiledProperty).optional()\r\n})\r\n\r\nexport type TiledObjectGroup = z.infer<typeof TiledObjectGroup>;\r\nexport type TiledObject = z.infer<typeof TiledObject>;\r\nexport type TiledTile = z.infer<typeof TiledTile>;\r\nexport type TiledText = z.infer<typeof TiledText>;\r\n\r\nexport type TiledTileset = z.infer<typeof TiledTileset>;\r\nexport type TiledTilesetEmbedded = z.infer<typeof TiledTilesetEmbedded>;\r\nexport type TiledTilesetExternal = z.infer<typeof TiledTilesetExternal>;\r\nexport type TiledTilesetFile = z.infer<typeof TiledTilesetFile>;\r\n\r\nexport type TiledTemplate = z.infer<typeof TiledTemplate>;\r\n\r\nexport type TiledMap = z.infer<typeof TiledMap>;\r\nexport type TiledTileLayer = z.infer<typeof TiledTileLayer>;\r\nexport type TiledTileLayerInfinite = z.infer<typeof TiledTileLayerInfinite>;\r\nexport type TiledObjectLayer = z.infer<typeof TiledObjectLayer>;\r\nexport type TiledImageLayer = z.infer<typeof TiledImageLayer>;\r\nexport type TiledLayer = z.infer<typeof TiledLayer>;\r\nexport type TiledProperty = z.infer<typeof TiledProperty>;\r\nexport type TiledPropertyTypes = Pick<TiledProperty, 'type'>['type'];\r\n\r\nexport function isInfiniteLayer(tileLayer: TiledTileLayer): tileLayer is TiledTileLayerInfinite {\r\n   return !!(tileLayer as TiledTileLayerInfinite).chunks;\r\n}\r\n\r\nexport function isTiledTilesetEmbedded(ts: TiledTileset): ts is TiledTilesetEmbedded {\r\n   return !!!(ts as TiledTilesetExternal).source;\r\n}\r\n\r\nexport function isTiledTilesetExternal(ts: TiledTileset): ts is TiledTilesetExternal {\r\n   return !!(ts as TiledTilesetExternal).source;\r\n}\r\n\r\n\r\nclass BoundingBox {\r\n   constructor(public x: number, public y: number, public width: number, public height: number) { }\r\n\r\n   combine(other: BoundingBox) {\r\n\r\n      const right = this.x + this.width;\r\n      const bottom = this.y + this.height;\r\n\r\n      const otherRight = other.x + other.width;\r\n      const otherBottom = other.y + other.height;\r\n\r\n      const endRight = Math.max(right, otherRight);\r\n      const endBottom = Math.max(bottom, otherBottom);\r\n\r\n\r\n      const compositeBB = new BoundingBox(\r\n         Math.min(this.x, other.x),\r\n         Math.min(this.y, other.y),\r\n         endRight - Math.min(this.x, other.x),\r\n         endBottom - Math.min(this.y, other.y)\r\n      );\r\n      return compositeBB;\r\n   }\r\n\r\n}\r\n\r\nexport class TiledParser {\r\n\r\n   _coerceNumber(value: any) {\r\n      return +value;\r\n   }\r\n   _coerceBoolean(value: any) {\r\n      switch(value) {\r\n         case \"0\": return false;\r\n         case \"false\": return false;\r\n         case \"true\": return true;\r\n         default: return !!(Boolean(value));\r\n      }\r\n   }\r\n\r\n   _coerceType(type: TiledPropertyTypes, value: string) {\r\n      if (type === 'bool') {\r\n         return this._coerceBoolean(value);\r\n      }\r\n\r\n      if (type === 'int' || type === 'float') {\r\n         return this._coerceNumber(value);\r\n      }\r\n\r\n      if (type === 'object') {\r\n         return this._coerceNumber(value);\r\n      }\r\n      return value;\r\n   }\r\n\r\n   _parsePropertiesNode(propertiesNode: Element, target: any) {\r\n      const properties = [];\r\n      if (propertiesNode) {\r\n         for (let prop of propertiesNode.children) {\r\n            const type = prop.getAttribute('type') as TiledPropertyTypes ?? 'string'; // if no type is set it's string!\r\n            let value: any = prop.getAttribute('value');\r\n            if (!value) {\r\n               value = prop.innerHTML;\r\n            }\r\n            properties.push({\r\n               name: prop.getAttribute('name'),\r\n               type: type,\r\n               value: this._coerceType(type, value as string)\r\n            })\r\n         }\r\n      }\r\n      target.properties = properties;\r\n   }\r\n\r\n   _parseAttributes(node: Element, target: any) {\r\n      // attribute names to coerce into numbers\r\n      const numberProps = [\r\n         'width',\r\n         'height',\r\n         'columns',\r\n         'firstgid',\r\n         'spacing',\r\n         'margin',\r\n         'tilecount',\r\n         'tilewidth',\r\n         'tileheight',\r\n         'opacity',\r\n         'compressionlevel',\r\n         'nextlayerid',\r\n         'nextobjectid',\r\n         'parallaxoriginx',\r\n         'parallaxoriginy',\r\n         'parallaxx',\r\n         'parallaxy',\r\n         'hexsidelength',\r\n         'offsetx',\r\n         'offsety',\r\n         'id',\r\n         'gid',\r\n         'x',\r\n         'y',\r\n         'rotation',\r\n         'probability'\r\n      ];\r\n\r\n      // attribute names to coerce into booleans\r\n      const booleanProps = [\r\n         \"infinite\",\r\n         'visible',\r\n         'repeatx',\r\n         'repeaty',\r\n      ]\r\n\r\n      for (let attribute of node.attributes) {\r\n         if (numberProps.indexOf(attribute.name as any) > -1) {\r\n            target[attribute.name] = this._coerceNumber(attribute.value);\r\n         } else if (booleanProps.indexOf(attribute.name as any) > -1) {\r\n            target[attribute.name] = this._coerceBoolean(attribute.value);\r\n         } else {\r\n            target[attribute.name] = attribute.value;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Takes an xml string and uses an available parser (DOMParser in browser or JSDOM in Node.js)\r\n    * to produce a DOM object compatible with at least DOM Level 3.\r\n    * @param xml\r\n    * @returns\r\n    */\r\n   _parseToDocument(xml: string): Document {\r\n      if (typeof DOMParser !== 'undefined') {\r\n         const domParser = new DOMParser();\r\n         return domParser.parseFromString(xml, 'application/xml');\r\n      }\r\n\r\n      try {\r\n         const { JSDOM } = require('jsdom');\r\n         const dom = new JSDOM(xml, {\r\n            contentType: 'application/xml',\r\n            encoding: 'utf-8',\r\n         });\r\n         return dom.window.document as Document;\r\n      } catch (e) { /* ignored */ }\r\n\r\n      const error = new Error('Could not find DOM parser');\r\n      console.error(error.message, error);\r\n      throw error;\r\n   }\r\n\r\n   parseObject(objectNode: Element, strict = true): TiledObject {\r\n      const object: any = {};\r\n      object.type = '';\r\n      object.x = 0;\r\n      object.y = 0;\r\n\r\n      if (!objectNode.getAttribute('template')) {\r\n         object.visible = true;\r\n         object.name = '';\r\n         object.rotation = 0;\r\n         object.height = 0;\r\n         object.width = 0;\r\n      }\r\n\r\n      this._parseAttributes(objectNode, object);\r\n\r\n\r\n      const propertiesNode = objectNode.querySelector('properties') as Element;\r\n      if (propertiesNode) {\r\n         this._parsePropertiesNode(propertiesNode, object);\r\n      }\r\n\r\n      const text = objectNode.querySelector('text') as Element;\r\n      if (text) {\r\n         object.text = {\r\n            text: text.textContent\r\n         }\r\n\r\n         const fontfamily = text.getAttribute('fontfamily');\r\n         if (fontfamily) {\r\n            object.text.fontfamily = fontfamily;\r\n         }\r\n\r\n         const color = text.getAttribute('color');\r\n         if (color) {\r\n            object.text.color = color;\r\n         }\r\n\r\n         const pixelsize = text.getAttribute('pixelsize');\r\n         if (pixelsize) {\r\n            object.text.pixelsize = this._coerceNumber(pixelsize);\r\n         }\r\n\r\n         const wrap = text.getAttribute('wrap');\r\n         if (wrap) {\r\n            object.text.wrap = this._coerceBoolean(wrap);\r\n         }\r\n\r\n         const valign = text.getAttribute('valign');\r\n         if (valign) {\r\n            object.text.valign = valign;\r\n         }\r\n         const halign = text.getAttribute('halign');\r\n         if (halign) {\r\n            object.text.halign = halign;\r\n         }\r\n      }\r\n\r\n      const point = objectNode.querySelector('point');\r\n      if (point) {\r\n         object.point = true;\r\n      }\r\n\r\n      const ellipse = objectNode.querySelector('ellipse');\r\n      if (ellipse) {\r\n         object.ellipse = true;\r\n      }\r\n\r\n\r\n      const polygon = objectNode.querySelector('polygon');\r\n      if (polygon) {\r\n         const points = polygon.getAttribute('points')?.split(' ');\r\n         object.polygon = [];\r\n         if (points) {\r\n            points.forEach(p => {\r\n               const point = p.split(',');\r\n               object.polygon.push({\r\n                  x: +point[0],\r\n                  y: +point[1]\r\n               })\r\n            })\r\n         }\r\n      }\r\n\r\n      const polyline = objectNode.querySelector('polyline');\r\n      if (polyline) {\r\n         const points = polyline.getAttribute('points')?.split(' ');\r\n         object.polyline = [];\r\n         if (points) {\r\n            points.forEach(p => {\r\n               const point = p.split(',');\r\n               object.polyline.push({\r\n                  x: +point[0],\r\n                  y: +point[1]\r\n               })\r\n            })\r\n         }\r\n      }\r\n\r\n      if (strict) {\r\n         try {\r\n            return TiledObject.parse(object);\r\n         } catch (e) {\r\n            console.error('Could not parse object', object, e);\r\n            throw e;\r\n         }\r\n      }\r\n      return object as TiledObject;\r\n   }\r\n\r\n   parseTileset(tilesetNode: Element, strict = true): TiledTileset {\r\n      const tileset: any = {};\r\n      tileset.spacing = 0;\r\n      tileset.margin = 0;\r\n      this._parseAttributes(tilesetNode, tileset);\r\n\r\n      if (tileset.source) {\r\n         try {\r\n            return TiledTileset.parse(tileset);\r\n         } catch (e) {\r\n            console.error('Could not parse external tileset', tileset, e);\r\n         }\r\n      }\r\n\r\n      for (let tilesetChild of tilesetNode.children) {\r\n         switch (tilesetChild.tagName) {\r\n            case 'properties': {\r\n               this._parsePropertiesNode(tilesetChild, tileset);\r\n               break;\r\n            }\r\n            case 'tileoffset': {\r\n               const tileoffset: any = {};\r\n               this._parseAttributes(tilesetChild, tileoffset);\r\n               tileset.tileoffset = tileoffset;\r\n               break;\r\n            }\r\n            case 'grid': {\r\n               const grid: any = {};\r\n               this._parseAttributes(tilesetChild, grid);\r\n               tileset.grid = grid;\r\n               break;\r\n            }\r\n            case 'image': {\r\n               tileset.image = tilesetChild.getAttribute('source');\r\n               tileset.imagewidth = this._coerceNumber(tilesetChild.getAttribute('width'));\r\n               tileset.imageheight = this._coerceNumber(tilesetChild.getAttribute('height'));\r\n               break;\r\n            }\r\n            case 'tile': {\r\n               if (!tileset.tiles) {\r\n                  tileset.tiles = [];\r\n               }\r\n               const tile: any = {};\r\n               this._parseAttributes(tilesetChild, tile);\r\n               for (let tileChild of tilesetChild.children) {\r\n                  switch (tileChild.tagName) {\r\n                     case 'image': {\r\n                        tile.image = tileChild.getAttribute('source');\r\n                        tile.imagewidth = this._coerceNumber(tileChild.getAttribute('width'));\r\n                        tile.imageheight = this._coerceNumber(tileChild.getAttribute('height'));\r\n                        break;\r\n                     }\r\n                     case 'objectgroup': {\r\n                        const objectgroup: any = {};\r\n                        objectgroup.type = 'objectgroup';\r\n                        objectgroup.name = \"\";\r\n                        objectgroup.visible = true;\r\n                        objectgroup.x = 0;\r\n                        objectgroup.y = 0;\r\n                        objectgroup.opacity = 1;\r\n                        objectgroup.objects = [];\r\n                        this._parseAttributes(tileChild, objectgroup);\r\n                        tile.objectgroup = objectgroup;\r\n\r\n                        for (let objectChild of tileChild.children) {\r\n                           const object = this.parseObject(objectChild, strict);\r\n                           objectgroup.objects.push(object);\r\n                        }\r\n                        break;\r\n                     }\r\n                     case 'animation': {\r\n                        const animation: any = [];\r\n                        for (let frameChild of tileChild.children) {\r\n                           animation.push({\r\n                              duration: this._coerceNumber(frameChild.getAttribute('duration')),\r\n                              tileid: this._coerceNumber(frameChild.getAttribute('tileid'))\r\n                           })\r\n                        }\r\n\r\n                        tile.animation = animation;\r\n                        break;\r\n                     }\r\n                     case 'properties': {\r\n                        this._parsePropertiesNode(tileChild, tile);\r\n                        break;\r\n                     }\r\n                  }\r\n               }\r\n\r\n               if (strict) {\r\n                  try {\r\n                     tileset.tiles.push(TiledTile.parse(tile));\r\n                  } catch (e) {\r\n                     console.error('Could not parse Tile', tile, e);\r\n                     throw e;\r\n                  }\r\n               } else {\r\n                  tileset.tiles.push(tile as TiledTile);\r\n               }\r\n               break;\r\n            }\r\n         }\r\n      }\r\n      if (strict) {\r\n         try {\r\n            return TiledTileset.parse(tileset);\r\n         } catch (e) {\r\n            console.error('Could not parse Tileset', tileset, e);\r\n            throw e;\r\n         }\r\n      }\r\n      return tileset as TiledTileset;\r\n   }\r\n\r\n   _largestBounds = new BoundingBox(0, 0, 0, 0);\r\n   parseTileLayer(layerNode: Element, infinite: boolean, strict = true): TiledLayer {\r\n      const layer: any = {};\r\n      layer.type = 'tilelayer';\r\n      layer.compression = ''; // default uncompressed\r\n      layer.x = 0;\r\n      layer.y = 0;\r\n      layer.opacity = 1;\r\n      layer.visible = true;\r\n      this._parseAttributes(layerNode, layer);\r\n\r\n      for (let layerChild of layerNode.children) {\r\n         switch (layerChild.tagName) {\r\n            case 'properties': {\r\n               this._parsePropertiesNode(layerChild, layer);\r\n               break;\r\n            }\r\n            case 'data': {\r\n               if (infinite) {\r\n                  layer.width = 0;\r\n                  layer.height = 0;\r\n                  layer.chunks = [];\r\n                  // Tiled appears to have an undocumented minimum bounds\r\n                  let bounds: BoundingBox = new BoundingBox(0, 0, 0, 0);\r\n                  for (let chunkTag of layerChild.children) {\r\n                     if (chunkTag.tagName === 'chunk') {\r\n                        const chunk: any = {};\r\n                        this._parseAttributes(chunkTag, chunk);\r\n\r\n                        // If infinite there is no encoding other than CSV!\r\n                        chunk.data = chunkTag.textContent?.split(',').map(id => +id);\r\n\r\n                        // combining bounding boxes actually probably is easiest here\r\n                        const chunkBounds = new BoundingBox(chunk.x, chunk.y, chunk.width, chunk.height);\r\n\r\n                        bounds = bounds.combine(chunkBounds);\r\n\r\n                        layer.chunks.push(chunk);\r\n                     }\r\n                  }\r\n\r\n                  layer.width = bounds.width;\r\n                  layer.height = bounds.height;\r\n                  layer.startx = bounds.x;\r\n                  layer.starty = bounds.y;\r\n\r\n                  this._largestBounds = this._largestBounds.combine(new BoundingBox(layer.startx, layer.starty, layer.width, layer.height));\r\n\r\n               } else {\r\n                  const encoding = layerChild.getAttribute('encoding');\r\n                  // technically breaking compat, but this is useful\r\n                  layer.encoding = encoding;\r\n\r\n                  const compression = layerChild.getAttribute('compression');\r\n                  if (compression) {\r\n                     layer.compression = compression;\r\n                  }\r\n\r\n                  switch (layer.encoding) {\r\n                     case 'base64': {\r\n                        layer.data = layerChild.textContent?.trim();\r\n                        break;\r\n                     }\r\n                     case 'csv': {// csv case\r\n                        layer.data = layerChild.textContent?.split(',').map(id => +id);\r\n                        break;\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n      if (strict) {\r\n         try {\r\n            return TiledLayer.parse(layer);\r\n         } catch (e) {\r\n            console.error('Could not parse tiled tile layer', layer, e);\r\n            throw e;\r\n         }\r\n      }\r\n      return layer as TiledLayer;\r\n   }\r\n\r\n   parseObjectGroup(groupNode: Element, strict = true): TiledLayer {\r\n      const group: any = {};\r\n      group.type = 'objectgroup';\r\n      group.draworder = 'topdown';\r\n      group.visible = true;\r\n      group.x = 0;\r\n      group.y = 0;\r\n      group.opacity = 1;\r\n      group.objects = [];\r\n      this._parseAttributes(groupNode, group);\r\n      for (let groupChild of groupNode.children) {\r\n         switch (groupChild.tagName) {\r\n            case 'properties': {\r\n               this._parsePropertiesNode(groupChild, group);\r\n               break;\r\n            }\r\n            case 'object': {\r\n               const object = this.parseObject(groupChild, strict);\r\n               group.objects.push(object);\r\n               break;\r\n            }\r\n         }\r\n      }\r\n\r\n      if (strict) {\r\n         try {\r\n            return TiledLayer.parse(group);\r\n         } catch (e) {\r\n            console.error('Could not parse object group', group, e);\r\n            throw e;\r\n         }\r\n      }\r\n      return group as TiledLayer;\r\n   }\r\n\r\n   parseImageLayer(imageNode: Element, strict = true): TiledLayer {\r\n      const imageLayer: any = {};\r\n      imageLayer.type = 'imagelayer';\r\n      imageLayer.visible = true;\r\n      imageLayer.x = 0;\r\n      imageLayer.y = 0;\r\n      imageLayer.opacity = 1;\r\n\r\n      const image = imageNode.querySelector('image');\r\n      imageLayer.image = image?.getAttribute('source');\r\n\r\n      const properties = imageNode.querySelector('properties');\r\n      if (properties) {\r\n         this._parsePropertiesNode(properties, imageLayer);\r\n      }\r\n\r\n      const transparentcolor = image?.getAttribute('trans');\r\n      if (transparentcolor) {\r\n         imageLayer.transparentcolor = '#' + transparentcolor;\r\n      }\r\n\r\n      this._parseAttributes(imageNode, imageLayer);\r\n\r\n      if (strict) {\r\n         try {\r\n            return TiledLayer.parse(imageLayer);\r\n         } catch (e) {\r\n            console.error('Could not parse layer', imageLayer, e);\r\n            throw e;\r\n         }\r\n      }\r\n      return imageLayer as TiledLayer;\r\n   }\r\n\r\n   parseExternalTemplate(txXml: string, strict = true): TiledTemplate {\r\n      const doc = this._parseToDocument(txXml);\r\n      const templateElement = doc.querySelector('template') as Element;\r\n      const template: any = {};\r\n      template.type = 'template';\r\n      const objectElement = templateElement.querySelector('object');\r\n      if (objectElement) {\r\n         template.object = this.parseObject(objectElement, strict);\r\n      }\r\n\r\n      const tileSetElement = templateElement.querySelector('tileset');\r\n      if (tileSetElement) {\r\n         template.tileset = this.parseTileset(tileSetElement, strict);\r\n      }\r\n\r\n      if (strict) {\r\n         try {\r\n            return TiledTemplate.parse(template);\r\n         } catch (e) {\r\n            console.error('Could not parse template', template, e);\r\n            throw e;\r\n         }\r\n      }\r\n      return template as TiledTemplate;\r\n   }\r\n\r\n   /**\r\n    * Takes Tiled tmx xml and produces the equivalent Tiled txj (json) content\r\n    * @param tsxXml \r\n    */\r\n   parseExternalTileset(tsxXml: string, strict = true): TiledTilesetFile {\r\n      const doc = this._parseToDocument(tsxXml);\r\n      const tilesetElement = doc.querySelector('tileset') as Element;\r\n\r\n      const tileset = this.parseTileset(tilesetElement, strict);\r\n\r\n      (tileset as any).type = 'tileset';\r\n      this._parseAttributes(tilesetElement, tileset);\r\n\r\n\r\n      if (strict) {\r\n         try {\r\n            return TiledTilesetFile.parse(tileset);\r\n         } catch (e) {\r\n            console.error('Could not parse tileset file', tileset, e);\r\n            throw e;\r\n         }\r\n      }\r\n      return tileset as TiledTilesetFile;\r\n   }\r\n\r\n\r\n   /**\r\n    * Takes Tiled tmx xml and produces the equivalent Tiled tmj (json) content\r\n    * @param tmxXml \r\n    * @returns \r\n    */\r\n   parse(tmxXml: string, strict = true): TiledMap {\r\n      const doc = this._parseToDocument(tmxXml);\r\n      const mapElement = doc.querySelector('map') as Element;\r\n\r\n      const tiledMap: any = {};\r\n      tiledMap.type = 'map';\r\n      tiledMap.compressionlevel = -1;\r\n      tiledMap.layers = [];\r\n      tiledMap.tilesets = [];\r\n\r\n      this._parseAttributes(mapElement, tiledMap);\r\n\r\n      const parseHelper = (node: Element, strict = true) => {\r\n         switch (node.tagName) {\r\n            case 'group': {\r\n               // recurse through groups!\r\n               // currently we support groups by flattening them, no group types\r\n               for (let child of node.children) {\r\n                  parseHelper(child, strict);\r\n               }\r\n               break;\r\n            }\r\n            case 'layer': {\r\n               const layer = this.parseTileLayer(node, tiledMap.infinite, strict);\r\n               tiledMap.layers.push(layer);\r\n               \r\n               break;\r\n            }\r\n            case 'properties': {\r\n               this._parsePropertiesNode(node, tiledMap);\r\n               break;\r\n            }\r\n            case 'tileset': {\r\n               const tileset = this.parseTileset(node, strict);\r\n               tiledMap.tilesets.push(tileset);\r\n               break;\r\n            }\r\n            case 'objectgroup': {\r\n               const objectgroup = this.parseObjectGroup(node, strict);\r\n               tiledMap.layers.push(objectgroup);\r\n               break;\r\n            }\r\n            case 'imagelayer': {\r\n               const imageLayer = this.parseImageLayer(node, strict);\r\n               tiledMap.layers.push(imageLayer);\r\n               break;\r\n            }\r\n         }\r\n      }\r\n\r\n      // Parse all layers\r\n      for (let mapChild of mapElement.children) {\r\n         parseHelper(mapChild, strict);\r\n      }\r\n\r\n      if (strict) {\r\n         try {\r\n            return TiledMap.parse(tiledMap);\r\n         } catch (e) {\r\n            console.error('Could not parse Tiled map', e);\r\n            throw e;\r\n         }\r\n      }\r\n\r\n      return tiledMap as TiledMap;\r\n   }\r\n}", "// gzip & zlib\r\nimport { inflate as pakoInflate } from 'pako';\r\n// zstd\r\nimport { ZSTDDecoder } from 'zstddec';\r\n\r\nexport class Decoder {\r\n   /**\r\n    * Decodes any compressed/encoded Tiled data and produces the canonical list of Tiled gids\r\n    * @param data \r\n    * @param options \r\n    */\r\n   static decode(data: string, compression: string): Promise<number[]> {\r\n      var i: number,\r\n         j: number,\r\n         l: number,\r\n         tmp: number,\r\n         placeHolders: number,\r\n         arr: Uint8Array;\r\n\r\n      if (data.length % 4 > 0) {\r\n         throw new Error('Invalid string. Length must be a multiple of 4')\r\n      }\r\n\r\n      var PLUS = '+'.charCodeAt(0);\r\n      var SLASH = '/'.charCodeAt(0);\r\n      var NUMBER = '0'.charCodeAt(0);\r\n      var LOWER = 'a'.charCodeAt(0);\r\n      var UPPER = 'A'.charCodeAt(0);\r\n      var PLUS_URL_SAFE = '-'.charCodeAt(0);\r\n      var SLASH_URL_SAFE = '_'.charCodeAt(0);\r\n\r\n      function decode(elt: string): number {\r\n         var code = elt.charCodeAt(0)\r\n         if (code === PLUS || code === PLUS_URL_SAFE) return 62 // '+'\r\n         if (code === SLASH || code === SLASH_URL_SAFE) return 63 // '/'\r\n         if (code < NUMBER) return -1 // no match\r\n         if (code < NUMBER + 10) return code - NUMBER + 26 + 26\r\n         if (code < UPPER + 26) return code - UPPER\r\n         if (code < LOWER + 26) return code - LOWER + 26\r\n         throw Error('Could not decode elt');\r\n      }\r\n\r\n      // the number of equal signs (place holders)\r\n      // if there are two placeholders, than the two characters before it\r\n      // represent one byte\r\n      // if there is only one, then the three characters before it represent 2 bytes\r\n      // this is just a cheap hack to not do indexOf twice\r\n      var len = data.length\r\n      placeHolders = data.charAt(len - 2) === '=' ? 2 : data.charAt(len - 1) === '=' ? 1 : 0\r\n\r\n      // base64 is 4/3 + up to two characters of the original data\r\n      arr = new Uint8Array(data.length * 3 / 4 - placeHolders)\r\n\r\n      // if there are placeholders, only get up to the last complete 4 chars\r\n      l = placeHolders > 0 ? data.length - 4 : data.length\r\n\r\n      var L = 0\r\n\r\n      function push(v: number) {\r\n         arr[L++] = v\r\n      }\r\n\r\n      for (i = 0, j = 0; i < l; i += 4, j += 3) {\r\n         tmp = (decode(data.charAt(i)) << 18) | (decode(data.charAt(i + 1)) << 12) | (decode(data.charAt(i + 2)) << 6) | decode(data.charAt(i + 3))\r\n         push((tmp & 0xFF0000) >> 16)\r\n         push((tmp & 0xFF00) >> 8)\r\n         push(tmp & 0xFF)\r\n      }\r\n\r\n      if (placeHolders === 2) {\r\n         tmp = (decode(data.charAt(i)) << 2) | (decode(data.charAt(i + 1)) >> 4)\r\n         push(tmp & 0xFF)\r\n      } else if (placeHolders === 1) {\r\n         tmp = (decode(data.charAt(i)) << 10) | (decode(data.charAt(i + 1)) << 4) | (decode(data.charAt(i + 2)) >> 2)\r\n         push((tmp >> 8) & 0xFF)\r\n         push(tmp & 0xFF)\r\n      }\r\n\r\n      return new Promise(resolve => {\r\n         const toNumber = function (byteArray: number[] | Uint8Array) {\r\n            var value = 0;\r\n\r\n            for (var i = byteArray.length - 1; i >= 0; i--) {\r\n               value = (value * 256) + byteArray[i] * 1;\r\n            }\r\n\r\n            return value;\r\n         };\r\n\r\n         // Byte array\r\n         // handle compression\r\n         if (\"zlib\" === compression || \"gzip\" === compression) {\r\n            arr = pakoInflate( arr );\r\n\r\n            var resultLen = arr.length / 4;\r\n            var result = new Array<number>(resultLen);\r\n\r\n            for (i = 0; i < resultLen; i++) {\r\n               result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));\r\n            }\r\n            resolve(result);\r\n         }\r\n\r\n         if (\"zstd\" === compression) {\r\n            const decoder = new ZSTDDecoder();\r\n            decoder.init().then(() => {\r\n               arr = decoder.decode(arr);\r\n               var resultLen = arr.length / 4;\r\n               var result = new Array<number>(resultLen);\r\n\r\n               for (i = 0; i < resultLen; i++) {\r\n                  result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));\r\n               }\r\n               resolve(result);\r\n            });\r\n         }\r\n\r\n         // no compression just base64\r\n         if (!compression) {\r\n            var resultLen = arr.length / 4;\r\n            var result = new Array<number>(resultLen);\r\n            for (i = 0; i < resultLen; i++) {\r\n               result[i] = toNumber(arr.slice(i * 4, i * 4 + 4));\r\n            }\r\n            resolve(result);\r\n         }\r\n      });\r\n   }\r\n}", "\r\n/**\r\n * Special excalibur properties\r\n */\r\nexport const ExcaliburTiledProperties = {\r\n   TileData: {\r\n      Tiled: 'ex-tiled'\r\n   },\r\n   ZIndex: {\r\n      /**\r\n       * Override the default z-index based on the ordering in Tiled\r\n       */\r\n      ZIndex: 'zindex'\r\n   },\r\n   Camera: {\r\n      /**\r\n       * Boolean property on an object to treat as the excalibur camera if truthy\r\n       * \r\n       * Warning, the plugin will use the first object it finds with this property!\r\n       */\r\n      Camera: 'camera',\r\n      Zoom: 'zoom'\r\n   },\r\n   Animation: {\r\n      /**\r\n       * String property with any value from the ex.AnimationStrategy enum (case insensitive)\r\n       */\r\n      Strategy: 'animationstrategy'\r\n   },\r\n   Layer: {\r\n      /**\r\n       * Boolean property on a TileLayer, if truthy any tile on the layer will be treated as solid\r\n       * \r\n       * Boolean property on a ObjectLayer, if truthy any object will be created as an actor, objects\r\n       * will have a default collision type of preventcollision, see the collisiontype property.\r\n       */\r\n      Solid: 'solid'\r\n   },\r\n   Collision: {\r\n      /**\r\n       * String property with any value from the ex.CollisionType enum (case insensitive)\r\n       */\r\n      Type: 'collisiontype'\r\n   }\r\n} as const;", "\r\n\r\nexport type FileLoader = (path: string, contentType: 'json' | 'xml') => Promise<string | any>;\r\n\r\nexport const FetchLoader: FileLoader = async (path: string, contentType: 'json' | 'xml') => {\r\n   const response = await fetch(path);\r\n   switch(contentType.toLowerCase()) {\r\n      case 'xml': return await response.text();\r\n      case 'json': return await response.json();\r\n      default: return await response.text();\r\n   }\r\n}", "\r\nexport const byNameCaseInsensitive = (name?: string) => {\r\n   return <TObject extends {name?: string}>(object: TObject) => {\r\n      if (object?.name && name) {\r\n         return object.name.toLocaleLowerCase().localeCompare(name.toLocaleLowerCase()) === 0;\r\n      }\r\n      return object?.name === name;\r\n   }\r\n}\r\n\r\nexport const byClassCaseInsensitive = (className?: string) => {\r\n   return <TObject extends {class?: string}>(object: TObject) => {\r\n      if (object?.class && className) {\r\n         return object.class.toLocaleLowerCase().localeCompare(className.toLocaleLowerCase()) === 0;\r\n      }\r\n      return object?.class === className;\r\n   }\r\n}\r\n\r\nconst copyPropsLowerCase = (properties: Map<string, string | number | boolean>) => {\r\n   const lowercase = new Map<string, string | number | boolean>();\r\n   for (let [key, value] of properties) {\r\n      let normalizedValue = value;\r\n      if (typeof value === 'string') {\r\n         normalizedValue = value.toLocaleLowerCase();\r\n      }\r\n      lowercase.set(key.toLocaleLowerCase(), normalizedValue);\r\n   }\r\n   return lowercase;\r\n}\r\n\r\nexport const byPropertyCaseInsensitive = (propertyName: string, value?: any) => {\r\n   return <TObject extends {properties: Map<string, string | number | boolean>}>(object: TObject) => {\r\n      const lowercase = copyPropsLowerCase(object.properties);\r\n\r\n      if (value !== undefined) {\r\n         let normalizedValue = value;\r\n         if (typeof value === 'string') {\r\n            normalizedValue = value.toLocaleLowerCase();\r\n         }\r\n\r\n         return lowercase.get(propertyName.toLocaleLowerCase()) === normalizedValue;\r\n      } else {\r\n         return lowercase.has(propertyName.toLocaleLowerCase());\r\n      }\r\n   }\r\n}", "// Most significant byte of 32 bit id contains flags for flipping\r\n// See https://doc.mapeditor.org/en/stable/reference/tmx-map-format/#tile-flipping\r\nexport const FLIPPED_HORIZONTALLY_FLAG = 0x80000000;\r\nexport const FLIPPED_VERTICALLY_FLAG   = 0x40000000;\r\nexport const FLIPPED_DIAGONALLY_FLAG   = 0x20000000;\r\n\r\n/**\r\n * Inspects gid for horizontal flag\r\n * @param gid \r\n */\r\nexport const isFlippedHorizontally = (gid: number): boolean => {\r\n   return !!(gid & FLIPPED_HORIZONTALLY_FLAG);\r\n}\r\n\r\n/**\r\n * Inspects gid for vertical flag\r\n * @param gid \r\n */\r\nexport const isFlippedVertically = (gid: number): boolean => {\r\n   return !!(gid & FLIPPED_VERTICALLY_FLAG);\r\n}\r\n\r\n/**\r\n * Inspects gid for diagonal flag (anti-diagonal flip enables tile rotation)\r\n * @param gid \r\n */\r\nexport const isFlippedDiagonally = (gid: number): boolean => {\r\n   return !!(gid & FLIPPED_DIAGONALLY_FLAG);\r\n}\r\n\r\n\r\n/**\r\n * Removes bit flags from gid\r\n * @param gid \r\n */\r\nexport const getCanonicalGid = (gid: number): number => {\r\n   return gid & ~(FLIPPED_HORIZONTALLY_FLAG |\r\n                       FLIPPED_VERTICALLY_FLAG |\r\n                       FLIPPED_DIAGONALLY_FLAG);\r\n\r\n}\r\n", "import { Actor, Color, ImageSource, ParallaxComponent, Vector, vec } from \"excalibur\";\r\nimport { Layer } from \"./layer\";\r\nimport { TiledImageLayer } from \"../parser/tiled-parser\";\r\nimport { TiledResource } from \"./tiled-resource\";\r\nimport { mapProps } from \"./properties\";\r\nimport { pathRelativeToBase } from \"./path-util\";\r\n\r\nexport class ImageLayer implements Layer {\r\n   public readonly name: string;\r\n   public readonly class?: string;\r\n   properties = new Map<string, string | number | boolean>();\r\n   image: ImageSource | null = null;\r\n   imageActor: Actor | null = null;\r\n   constructor(public tiledImageLayer: TiledImageLayer, public resource: TiledResource, public readonly order: number) {\r\n      this.name = tiledImageLayer.name;\r\n      this.class = tiledImageLayer.class;\r\n      mapProps(this, tiledImageLayer.properties);\r\n      if (tiledImageLayer.image) {\r\n         this.image = new ImageSource(pathRelativeToBase(this.resource.path, tiledImageLayer.image, this.resource.pathMap))\r\n      }\r\n   }\r\n   async load(): Promise<void> {\r\n      const opacity = this.tiledImageLayer.opacity;\r\n      const hasTint = !!this.tiledImageLayer.tintcolor;\r\n      const tint = this.tiledImageLayer.tintcolor ? Color.fromHex(this.tiledImageLayer.tintcolor) : Color.White;\r\n      const offset = vec(this.tiledImageLayer.offsetx ?? 0, this.tiledImageLayer.offsety ?? 0);\r\n      const parallaxx = this.tiledImageLayer.parallaxx ?? 1;\r\n      const parallaxy = this.tiledImageLayer.parallaxy ?? 1;\r\n      if (this.image) {\r\n         if (!this.resource.headless) {\r\n            await this.image.load();\r\n         }\r\n         this.imageActor = new Actor({\r\n            name: this.tiledImageLayer.name,\r\n            pos: offset,\r\n            anchor: Vector.Zero,\r\n            z: this.order\r\n         });\r\n         this.imageActor.addComponent(new ParallaxComponent(vec(parallaxx, parallaxy)))\r\n         // FIXME when excalibur supports tiling we should use it here for repeatx/repeaty!\r\n         const sprite = this.image.toSprite();\r\n         this.imageActor.graphics.use(sprite);\r\n         this.imageActor.graphics.visible = this.tiledImageLayer.visible;\r\n         this.imageActor.graphics.opacity = opacity;\r\n         if (hasTint) {\r\n            sprite.tint = tint;\r\n         }\r\n      }\r\n   }\r\n}", "import { Color, ParallaxComponent, Vector, vec, GraphicsComponent, Logger, AnimationStrategy, IsometricMap, PolygonCollider, CircleCollider, IsometricTile, IsometricEntityComponent } from \"excalibur\";\r\nimport { mapProps } from \"./properties\";\r\nimport { TiledTileLayer, isCSV, isInfiniteLayer, needsDecoding } from \"../parser/tiled-parser\";\r\nimport { Decoder } from \"./decoder\";\r\nimport { TiledResource } from \"./tiled-resource\";\r\nimport { getCanonicalGid } from \"./gid-util\";\r\nimport { ExcaliburTiledProperties } from \"./excalibur-properties\";\r\nimport { TiledLayerDataComponent } from \"./tiled-layer-component\";\r\nimport { Layer } from \"./layer\";\r\nimport { Tile } from \"./tileset\";\r\nimport { byClassCaseInsensitive, byPropertyCaseInsensitive } from \"./filter-util\";\r\n\r\nexport interface IsometricTileInfo {\r\n   /**\r\n    * Tiled based information for the tile\r\n    */\r\n   tiledTile?: Tile;\r\n   /**\r\n    * Excalibur tile abstraction\r\n    */\r\n   exTile: IsometricTile;\r\n}\r\n\r\nexport class IsoTileLayer implements Layer {\r\n   private logger = Logger.getInstance();\r\n   public readonly name: string;\r\n   class?: string | undefined;\r\n   /**\r\n    * Number of tiles wide\r\n    */\r\n   public readonly width: number = 0;\r\n   /**\r\n    * Number of tiles high\r\n    */\r\n   public readonly height: number = 0;\r\n\r\n   properties = new Map<string, string | number | boolean>();\r\n\r\n   /**\r\n    * Original list of gids for this layer from tiled\r\n    */\r\n   data: number[] = [];\r\n\r\n   /**\r\n    * Excalibur IsometricMap structure for drawing in excalibur\r\n    */\r\n   isometricMap!: IsometricMap;\r\n\r\n   private _gidToTileInfo = new Map<number, IsometricTileInfo[]>();\r\n\r\n   constructor(public tiledTileLayer: TiledTileLayer, public resource: TiledResource, public readonly order: number) {\r\n      this.name = tiledTileLayer.name;\r\n      this.class = tiledTileLayer.class;\r\n      this.width = tiledTileLayer.width;\r\n      this.height = tiledTileLayer.height;\r\n      mapProps(this, tiledTileLayer.properties);\r\n   }\r\n\r\n   /**\r\n    * Returns the excalibur tiles that match a tiled gid\r\n    */\r\n   getTilesByGid(gid: number): IsometricTileInfo[] {\r\n      return this._gidToTileInfo.get(gid) ?? [];\r\n   }\r\n\r\n   /**\r\n    * Returns the excalibur tiles that match a tiled class name\r\n    * @param className\r\n    */\r\n   getTilesByClassName(className: string): IsometricTileInfo[] {\r\n      const tiles = this.isometricMap.tiles.filter(t => {\r\n         const maybeTiled = t.data.get(ExcaliburTiledProperties.TileData.Tiled) as Tile | undefined;\r\n         if (maybeTiled) {\r\n            return byClassCaseInsensitive(className)(maybeTiled);\r\n         }\r\n         return false;\r\n      });\r\n\r\n      return tiles.map(t => ({\r\n         exTile: t,\r\n         tiledTile: t.data.get(ExcaliburTiledProperties.TileData.Tiled)\r\n      }))\r\n   }\r\n\r\n   /**\r\n    * Returns the excalibur tiles that match a tiled property and optional value\r\n    * @param name\r\n    * @param value\r\n    */\r\n   getTilesByProperty(name: string, value?: any): IsometricTileInfo[] {\r\n      const tiles = this.isometricMap.tiles.filter(t => {\r\n         const maybeTiled = t.data.get(ExcaliburTiledProperties.TileData.Tiled) as Tile | undefined;\r\n         if (maybeTiled) {\r\n            return byPropertyCaseInsensitive(name, value)(maybeTiled);\r\n         }\r\n         return false;\r\n      });\r\n\r\n      return tiles.map(t => ({\r\n         exTile: t,\r\n         tiledTile: t.data.get(ExcaliburTiledProperties.TileData.Tiled)\r\n      }))\r\n   }\r\n\r\n   getTileByPoint(worldPos: Vector): IsometricTileInfo | null {\r\n      if (!this.isometricMap) {\r\n         this.logger.warn('IsometricMap has not yet been loaded! getTileByPoint() will only return null');\r\n         return null;\r\n      }\r\n      if (this.isometricMap) {\r\n         const exTile = this.isometricMap.getTileByPoint(worldPos);\r\n         if (!exTile) return null;\r\n         const tileIndex = this.isometricMap.tiles.indexOf(exTile);\r\n         const gid = getCanonicalGid(this.data[tileIndex]);\r\n\r\n         if (gid <= 0) {\r\n            return null;\r\n         }\r\n\r\n         const tileset = this.resource.getTilesetForTileGid(gid);\r\n         const tiledTile = tileset.getTileByGid(gid);\r\n\r\n         return { tiledTile, exTile };\r\n      }\r\n      return null;\r\n   }\r\n\r\n   private _recordTileData(gid: number, tile: IsometricTile) {\r\n      let tiles: IsometricTileInfo[] | undefined = this._gidToTileInfo.get(gid);\r\n      let tileset = this.resource.getTilesetForTileGid(gid);\r\n      let maybeTile = tileset.getTileByGid(gid);\r\n      if (!tiles) {\r\n         tiles = [{exTile: tile, tiledTile: maybeTile}];\r\n      } else {\r\n         tiles.push({exTile: tile, tiledTile: maybeTile});\r\n      }\r\n      this._gidToTileInfo.set(gid, tiles);\r\n      tile.data.set(ExcaliburTiledProperties.TileData.Tiled, maybeTile);\r\n   }\r\n\r\n   private updateTile(tile: IsometricTile, gid: number, hasTint: boolean, tint: Color, isSolidLayer: boolean) {\r\n      this._recordTileData(gid, tile);\r\n      if (this.resource.useExcaliburWiring && isSolidLayer) {\r\n         tile.solid = true;\r\n      }\r\n\r\n      const iso = tile.get(IsometricEntityComponent);\r\n      if (iso) {\r\n         iso.elevation = this.order;\r\n      }\r\n\r\n      const tileset = this.resource.getTilesetForTileGid(gid);\r\n      let sprite = tileset.getSpriteForGid(gid);\r\n      if (hasTint) {\r\n         sprite = sprite.clone();\r\n         sprite.tint = tint;\r\n      }\r\n      tile.addGraphic(sprite, { offset: tileset.tileOffset });\r\n\r\n      let offset = tile.pos;\r\n      if (tileset.orientation === 'orthogonal') {\r\n         // Odd rendering case when mixing/matching iso maps with orthogonal tilesets\r\n         offset = vec(0, 0);\r\n      } else {\r\n         const halfWidth = this.resource.map.tilewidth / 2;\r\n         const height = this.resource.map.tileheight;\r\n         offset = vec(halfWidth, height);\r\n      }\r\n\r\n      // the whole tilemap uses a giant composite collider relative to the Tilemap\r\n      // not individual tiles\r\n      const colliders = tileset.getCollidersForGid(gid, { offset });\r\n      for (let collider of colliders) {\r\n         tile.addCollider(collider);\r\n      }\r\n\r\n      let animation = tileset.getAnimationForGid(gid);\r\n      if (animation) {\r\n         if (hasTint) {\r\n            animation = animation.clone();\r\n            animation.tint = tint;\r\n         }\r\n         tile.clearGraphics();\r\n         tile.addGraphic(animation, { offset: tileset.tileOffset });\r\n         if (this.resource.useExcaliburWiring) {\r\n            const tileObj = tileset.getTileByGid(gid);\r\n            const strategy = tileObj?.properties.get(ExcaliburTiledProperties.Animation.Strategy);\r\n            if (strategy && typeof strategy === 'string') {\r\n               switch (strategy.toLowerCase()) {\r\n                  case AnimationStrategy.End.toLowerCase(): {\r\n                     animation.strategy = AnimationStrategy.End;\r\n                     break;\r\n                  }\r\n                  case AnimationStrategy.Freeze.toLowerCase(): {\r\n                     animation.strategy = AnimationStrategy.Freeze;\r\n                     break;\r\n                  }\r\n                  case AnimationStrategy.Loop.toLowerCase(): {\r\n                     animation.strategy = AnimationStrategy.Loop;\r\n                     break;\r\n                  }\r\n                  case AnimationStrategy.PingPong.toLowerCase(): {\r\n                     animation.strategy = AnimationStrategy.PingPong;\r\n                     break;\r\n                  }\r\n                  default: {\r\n                     // unknown animation strategy\r\n                     this.logger.warn(`Unknown animation strategy in tileset ${tileset.name} on tile gid ${gid}: ${strategy}`);\r\n                     break;\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   async load(): Promise<void> {\r\n      const layer = this.tiledTileLayer;\r\n      const isSolidLayer = !!this.properties.get(ExcaliburTiledProperties.Layer.Solid);\r\n      const opacity = this.tiledTileLayer.opacity;\r\n      const hasTint = !!this.tiledTileLayer.tintcolor;\r\n      const tint = this.tiledTileLayer.tintcolor ? Color.fromHex(this.tiledTileLayer.tintcolor) : Color.Transparent;\r\n      const pos = vec(layer.offsetx ?? 0, layer.offsety ?? 0);\r\n      if (needsDecoding(this.tiledTileLayer)) {\r\n         this.data = await Decoder.decode(this.tiledTileLayer.data, this.tiledTileLayer.compression);\r\n      } else if (isCSV(this.tiledTileLayer)) {\r\n         this.data = this.tiledTileLayer.data;\r\n      }\r\n\r\n      let order = this.order;\r\n      let zoverride = this.properties.get(ExcaliburTiledProperties.ZIndex.ZIndex) as number | undefined;\r\n      if (typeof zoverride === 'number') {\r\n         order = zoverride;\r\n      }\r\n\r\n\r\n\r\n      if (this.resource.map.infinite && isInfiniteLayer(this.tiledTileLayer)) {\r\n         const start = this.resource.isometricTiledCoordToWorld(this.tiledTileLayer.startx, this.tiledTileLayer.starty);\r\n         const infiniteStartPos = vec(\r\n            start.x * this.resource.map.tilewidth,\r\n            start.y * this.resource.map.tileheight);\r\n         this.isometricMap = new IsometricMap({\r\n            name: this.name,\r\n            pos: pos.add(infiniteStartPos),\r\n            tileHeight: this.resource.map.tileheight,\r\n            tileWidth: this.resource.map.tilewidth,\r\n            columns: layer.width,\r\n            rows: layer.height,\r\n            elevation: order\r\n         });\r\n      } else {\r\n         this.isometricMap = new IsometricMap({\r\n            name: this.name,\r\n            pos,\r\n            tileWidth: this.resource.map.tilewidth,\r\n            tileHeight: this.resource.map.tileheight,\r\n            columns: layer.width,\r\n            rows: layer.height,\r\n            elevation: order\r\n         });\r\n      }\r\n\r\n      // TODO make these optional params in the ctor\r\n      this.isometricMap.visible = this.tiledTileLayer.visible;\r\n      this.isometricMap.opacity = this.tiledTileLayer.opacity;\r\n      this.isometricMap.addComponent(new TiledLayerDataComponent({ tiledTileLayer: layer }));\r\n      if (layer.parallaxx || layer.parallaxy) {\r\n         const factor = vec(layer.parallaxx ?? 1, layer.parallaxy ?? 1);\r\n         this.isometricMap.addComponent(new ParallaxComponent(factor));\r\n      }\r\n\r\n      if (this.resource.map.infinite && isInfiniteLayer(this.tiledTileLayer)) {\r\n         for (let chunk of this.tiledTileLayer.chunks) {\r\n            for (let i = 0; i < chunk.data.length; i++) {\r\n               const gid = chunk.data[i];\r\n               if (gid != 0) {\r\n                  // Map from chunk to big tile map\r\n                  const tileX = (i % chunk.width) + (chunk.x - this.tiledTileLayer.startx);\r\n                  const tileY = Math.floor(i / chunk.width) + (chunk.y - this.tiledTileLayer.starty);\r\n                  const tile = this.isometricMap.tiles[tileX + tileY * layer.width];\r\n                  this.updateTile(tile, gid, hasTint, tint, isSolidLayer);\r\n               }\r\n            }\r\n         }\r\n      } else {\r\n         // Read tiled data into Excalibur's tilemap type\r\n         for (let i = 0; i < this.data.length; i++) {\r\n            let gid = this.data[i];\r\n            if (gid !== 0) {\r\n               const tile = this.isometricMap.tiles[i];\r\n               this.updateTile(tile, gid, hasTint, tint, isSolidLayer);\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n", "export interface CanLoad {\r\n   load(): Promise<any>;\r\n}\r\n\r\n/**\r\n * Read through cache for loadables\r\n */\r\nexport class LoaderCache<T extends CanLoad> {\r\n   private _loaded = false;\r\n   cache = new Map<string, T>();\r\n\r\n   constructor(public readonly type: new (...args: any[]) => T){}\r\n\r\n   getOrAdd(...args: any[]): T {\r\n      let resource = this.cache.get(args.join('+'));\r\n      if (resource) {\r\n         return resource;\r\n      }\r\n\r\n      resource = new this.type(...args);\r\n      this.cache.set(args.join('+'), resource);\r\n      return resource;\r\n   }\r\n\r\n   values(): T[] {\r\n      if (this._loaded) {\r\n         return Array.from(this.cache.values());\r\n      }\r\n      throw new Error(`Read through cache not yet loaded! No values to return!`);\r\n   }\r\n\r\n   async load() {\r\n      const resources = Array.from(this.cache.entries());\r\n      const results = await Promise.allSettled(resources.map(i => i[1].load()));\r\n\r\n      // Check for errors loading resources\r\n      let errored = 0;\r\n      for (let i = 0; i < results.length; i++) {\r\n         const result = results[i];\r\n         if (result.status === 'rejected') {\r\n            console.error(`Error loading resource at ${resources[i][0]}, is your pathMap correct? or your Tiled map corrupted?`, result.reason);\r\n            errored++;\r\n         }\r\n      }\r\n      if (errored) {\r\n         throw new Error(`Error loading ${errored} resources`);\r\n      }\r\n      this._loaded = true;\r\n   }\r\n}", "import { Actor, CollisionType, Color, Entity, GraphicsComponent, IsometricEntityComponent, Logger, Shape, Vector, toRadians, vec } from \"excalibur\";\r\nimport { Layer } from \"./layer\";\r\nimport { InsertedTile, PluginObject, TemplateObject, Text, Polygon, Rectangle, Ellipse, parseObjects } from \"./objects\";\r\nimport { TiledObjectLayer } from \"../parser/tiled-parser\";\r\nimport { FactoryProps, TiledResource } from \"./tiled-resource\";\r\nimport { mapProps } from \"./properties\";\r\nimport { byClassCaseInsensitive, byNameCaseInsensitive, byPropertyCaseInsensitive } from \"./filter-util\";\r\nimport { Tileset } from \"./tileset\";\r\nimport { ExcaliburTiledProperties } from \"./excalibur-properties\";\r\nimport { TiledDataComponent } from \"./tiled-data-component\";\r\n\r\nexport class ObjectLayer implements Layer {\r\n   private logger = Logger.getInstance();\r\n\r\n   public readonly name: string;\r\n   public readonly class?: string;\r\n   properties = new Map<string, string | number | boolean>();\r\n   objects: PluginObject[] = [];\r\n   entities: Entity[] = [];\r\n   private _objectToEntity = new Map<PluginObject, Entity>();\r\n   private _entityToObject = new Map<Entity, PluginObject>();\r\n   private _loaded = false;\r\n   constructor(public tiledObjectLayer: TiledObjectLayer, public resource: TiledResource, public readonly order: number) {\r\n      this.name = tiledObjectLayer.name;\r\n      this.class = tiledObjectLayer.class;\r\n\r\n      mapProps(this, tiledObjectLayer.properties);\r\n   }\r\n\r\n   private _logLoadedWarning<TMethod extends keyof ObjectLayer>(name: TMethod) {\r\n      this.logger.warn(`ObjectLayer ${this.name} is not yet loaded, ${name}() will always be empty!`);\r\n   }\r\n\r\n   getObjectsByName(name: string): PluginObject[] {\r\n      if (!this._loaded) this._logLoadedWarning('getObjectsByName');\r\n      return this.objects.filter(byNameCaseInsensitive(name));\r\n   }\r\n\r\n   getEntitiesByName(name: string): Entity[] {\r\n      if (!this._loaded) this._logLoadedWarning('getEntitiesByName');\r\n      return this.entities.filter(byNameCaseInsensitive(name));\r\n   }\r\n\r\n   getEntityByObject(object: PluginObject): Entity | undefined {\r\n      if (!this._loaded) this._logLoadedWarning('getEntityByObject');\r\n      return this._objectToEntity.get(object);\r\n   }\r\n\r\n   getObjectByEntity(actor: Entity): PluginObject | undefined {\r\n      if (!this._loaded) this._logLoadedWarning('getObjectByEntity');\r\n      return this._entityToObject.get(actor);\r\n   }\r\n\r\n   /**\r\n    * Search for a tiled object that has a property name, and optionally specify a value\r\n    * @param propertyName \r\n    * @param value \r\n    * @returns \r\n    */\r\n   getObjectsByProperty(propertyName: string, value?: any): PluginObject[] {\r\n      if (!this._loaded) this._logLoadedWarning('getObjectsByProperty');\r\n      return this.objects.filter(byPropertyCaseInsensitive(propertyName, value));\r\n   }\r\n   /**\r\n    * Search for actors that were created from tiled objects\r\n    * @returns \r\n    */\r\n   getEntitiesByProperty(propertyName: string, value?: any): Entity[] {\r\n      if (!this._loaded) this._logLoadedWarning('getEntitiesByProperty');\r\n      return this.getObjectsByProperty(propertyName, value).map(o => this._objectToEntity.get(o)).filter(a => !!a) as Entity[];\r\n   }\r\n\r\n   /**\r\n    * Search for an Tiled object by it's Tiled class name\r\n    * @returns \r\n    */\r\n   getObjectsByClassName(className: string): PluginObject[] {\r\n      if (!this._loaded) this._logLoadedWarning('getObjectsByClassName');\r\n      return this.objects.filter(byClassCaseInsensitive(className));\r\n   }\r\n\r\n   /**\r\n    * Search for an Actor created by the plugin by it's Tiled object\r\n    * @param className \r\n    * @returns \r\n    */\r\n   getEntitiesByClassName(className: string): Entity[] {\r\n      if (!this._loaded) this._logLoadedWarning('getEntitiesByClassName');\r\n      return this.getObjectsByClassName(className).map(o => this._objectToEntity.get(o)).filter(a => !!a) as Entity[];\r\n   }\r\n\r\n\r\n   getTemplates(): TemplateObject[] {\r\n      if (!this._loaded) this._logLoadedWarning('getTemplates');\r\n      return this.objects.filter(o => o instanceof TemplateObject) as TemplateObject[];\r\n   }\r\n\r\n   /**\r\n    * Runs or re-runs a specific registered factory given a class name on this object layer\r\n    * @param className\r\n    */\r\n   runFactory(className: string) {\r\n      const offset = vec(this.tiledObjectLayer.offsetx ?? 0, this.tiledObjectLayer.offsety ?? 0);\r\n      // create a copy of the objects to prevent editing the current collection\r\n      const objects = this.objects.slice();\r\n      for (let object of objects) {\r\n         let objectType = object.class;\r\n         if (object instanceof TemplateObject) {\r\n            objectType = objectType ? objectType : object.template.object.class;\r\n         }\r\n\r\n         if (className !== objectType) continue;\r\n\r\n         let worldPos = vec((object.x ?? 0) + offset.x, (object.y ?? 0) + offset.y);\r\n\r\n         // When isometric, Tiled positions are in isometric coordinates\r\n         if (this.resource.map.orientation === 'isometric') {\r\n            worldPos = this.resource.isometricTiledCoordToWorld(worldPos.x, worldPos.y);\r\n         }\r\n\r\n         const factory = this.resource.factories.get(className);\r\n         if (factory) {\r\n            // TODO does this entity get added to the scene?\r\n            const entity = factory({\r\n               worldPos,\r\n               name: object.name,\r\n               class: objectType,\r\n               layer: this,\r\n               object,\r\n               properties: object.properties\r\n            } satisfies FactoryProps);\r\n            if (entity) {\r\n               this._recordObjectEntityMapping(object, entity);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   _actorFromObject(object: PluginObject, newActor: Actor, tileset?: Tileset): void {\r\n      const headless = this.resource.headless;\r\n      const hasTint = !!this.tiledObjectLayer.tintcolor;\r\n      const tint = this.tiledObjectLayer.tintcolor ? Color.fromHex(this.tiledObjectLayer.tintcolor) : Color.White;\r\n\r\n      if (object instanceof InsertedTile && tileset) {\r\n         // handle case where we have isometric map but orthogonal tileset!s\r\n         const overrideAlignment = this.resource.map.orientation === 'isometric' && tileset.orientation === 'orthogonal' ? 'bottom' : undefined;\r\n         const anchor = tileset.getTilesetAlignmentAnchor(overrideAlignment);\r\n         // Inserted tiles pivot from the bottom left in Tiled\r\n         newActor.anchor = anchor;\r\n         const scaleX = (object.tiledObject.width ?? this.resource.map.tilewidth) / this.resource.map.tilewidth;\r\n         const scaleY = (object.tiledObject.width ?? this.resource.map.tilewidth) / this.resource.map.tilewidth;\r\n         const scale = vec(scaleX, scaleY);\r\n\r\n         if (!headless) {\r\n            // need to clone because we are modify sprite properties, sprites are shared by default\r\n            const sprite = tileset.getSpriteForGid(object.gid).clone();\r\n            sprite.destSize.width = object.tiledObject.width ?? sprite.width;\r\n            sprite.destSize.height = object.tiledObject.height ?? sprite.height;\r\n            if (hasTint) {\r\n               sprite.tint = tint;\r\n            }\r\n\r\n            newActor.graphics.use(sprite);\r\n            newActor.graphics.offset = tileset.tileOffset;\r\n\r\n            const animation = tileset.getAnimationForGid(object.gid);\r\n            if (animation) {\r\n               const animationScaled = animation.clone();\r\n               animationScaled.scale = scale;\r\n               if (hasTint) {\r\n                  animationScaled.tint = tint;\r\n               }\r\n               newActor.graphics.use(animationScaled);\r\n               newActor.graphics.offset = tileset.tileOffset;\r\n            }\r\n         }\r\n\r\n         // insertable tiles have an x, y, width, height, gid\r\n         // by default they pivot from the bottom left (0, 1)\r\n         const width = (object.tiledObject.width ?? 0);\r\n         const height = (object.tiledObject.height ?? 0);\r\n         const offsetx = -width * anchor.x;\r\n         const offsety = -height * anchor.y;\r\n         const halfTileWidth = this.resource.map.tilewidth / 2;\r\n         const tileHeight = this.resource.map.tileheight;\r\n         let offset = vec(offsetx, offsety);\r\n         if (this.resource.map.orientation === 'isometric') {\r\n            offset = vec(offsetx + halfTileWidth, offsety + tileHeight);\r\n            if (tileset.orientation === 'orthogonal') {\r\n               // Handling odd case where the tileset is orthogonal but the map is isometric\r\n               offset = offset.sub(vec(halfTileWidth, tileHeight));\r\n            }\r\n         }\r\n\r\n         const colliders = tileset.getCollidersForGid(object.gid, { anchor: Vector.Zero, scale, offset });\r\n         if (colliders.length) {\r\n            newActor.collider.useCompositeCollider(colliders);\r\n         } else {\r\n            let width = object.width;\r\n            let height = object.height;\r\n            if (this.resource.map.orientation === 'isometric') {\r\n               // Isometric uses height to organize grid alignment\r\n               const dimension = object.height / 2;\r\n               width = dimension;\r\n               height = dimension;\r\n            }\r\n            // Anchor at 1,1 for isometric is a quirk of the coord transformation\r\n            let boxCollider = Shape.Box(width, height, this.resource.map.orientation === 'isometric' ? vec(1, 1) : vec(0, 1));\r\n            if (this.resource.map.orientation === 'isometric') {\r\n               boxCollider.points = boxCollider.points.map(p => this.resource.isometricTiledCoordToWorld(p.x, p.y));\r\n            }\r\n            newActor.collider.set(boxCollider);\r\n         }\r\n      }\r\n\r\n      if (object instanceof Text) {\r\n         newActor.graphics.use(object.text);\r\n      }\r\n\r\n      if (object instanceof Polygon) {\r\n         let pos = vec(object.x, object.y);\r\n         let points = object.localPoints;\r\n\r\n         if (this.resource.map.orientation === 'isometric') {\r\n            pos = this.resource.isometricTiledCoordToWorld(pos.x, pos.y);\r\n            points = points.map(p => this.resource.isometricTiledCoordToWorld(p.x, p.y));\r\n         }\r\n\r\n         newActor.anchor = vec(0, 1);\r\n         newActor.pos = pos;\r\n         const polygon = Shape.Polygon(points, Vector.Zero, true);\r\n         if (!polygon.isConvex()) {\r\n            newActor.collider.set(polygon.triangulate());\r\n         } else {\r\n            newActor.collider.set(polygon);\r\n         }\r\n      }\r\n\r\n      if (object instanceof Rectangle) {\r\n         newActor.anchor = object.anchor;\r\n         let boxCollider = Shape.Box(object.width, object.height, object.anchor);\r\n         if (this.resource.map.orientation === 'isometric') {\r\n            boxCollider.points = boxCollider.points.map(p => this.resource.isometricTiledCoordToWorld(p.x, p.y));\r\n         }\r\n         newActor.collider.set(boxCollider);\r\n      }\r\n\r\n      if (object instanceof Ellipse) {\r\n         // FIXME: Circles are positioned differently in isometric as ellipses and currently arent supported\r\n         // FIXME: Excalibur doesn't support ellipses :( fallback to circle\r\n         // pick the smallest dimension and that's our radius\r\n         newActor.collider.useCircleCollider(Math.min(object.width, object.height) / 2);\r\n      }\r\n   }\r\n\r\n   async load() {\r\n      const opacity = this.tiledObjectLayer.opacity;\r\n      const offset = vec(this.tiledObjectLayer.offsetx ?? 0, this.tiledObjectLayer.offsety ?? 0);\r\n      const objects = parseObjects(this.tiledObjectLayer, this.resource);\r\n\r\n      for (let object of objects) {\r\n         let worldPos = vec((object.x ?? 0) + offset.x, (object.y ?? 0) + offset.y);\r\n\r\n         // When isometric, Tiled positions are in isometric coordinates\r\n         if (this.resource.map.orientation === 'isometric') {\r\n            worldPos = this.resource.isometricTiledCoordToWorld(worldPos.x, worldPos.y);\r\n         }\r\n\r\n         let objectType = object.class;\r\n         if (object instanceof TemplateObject) {\r\n            objectType = objectType ? objectType : object.template.object.class;\r\n         }\r\n         if (objectType) {\r\n            const factory = this.resource.factories.get(objectType);\r\n            if (factory) {\r\n               const entity = factory({\r\n                  worldPos,\r\n                  name: object.name,\r\n                  class: objectType,\r\n                  layer: this,\r\n                  object,\r\n                  properties: object.properties\r\n               } satisfies FactoryProps);\r\n               if (entity) {\r\n                  this._recordObjectEntityMapping(object, entity);\r\n               }\r\n               continue; // If we do a factor method we skip any default processing\r\n            }\r\n         }\r\n\r\n         let zindex = undefined;\r\n         let zoverride = this.properties.get(ExcaliburTiledProperties.ZIndex.ZIndex) as number | undefined;\r\n         if (typeof zoverride === 'number') {\r\n            zindex = zoverride;\r\n         }\r\n\r\n         const newActor = new Actor({\r\n            name: object.tiledObject.name,\r\n            pos: worldPos,\r\n            anchor: Vector.Zero,\r\n            rotation: toRadians(object.tiledObject.rotation ?? 0),\r\n            z: zindex\r\n         });\r\n         const graphics = newActor.get(GraphicsComponent);\r\n         if (graphics) {\r\n            graphics.visible = this.tiledObjectLayer.visible && (object.tiledObject.visible === undefined ? true : !!object.tiledObject.visible);\r\n            graphics.opacity = opacity;\r\n         }\r\n\r\n         if (this.resource.map.orientation === 'isometric') {\r\n            const iso = new IsometricEntityComponent({\r\n               rows: this.resource.map.height,\r\n               columns: this.resource.map.width,\r\n               tileWidth: this.resource.map.tilewidth,\r\n               tileHeight: this.resource.map.tileheight\r\n            });\r\n            iso.elevation = zindex ?? this.order;\r\n            newActor.addComponent(iso);\r\n         }\r\n\r\n         if (this.resource.useExcaliburWiring) {\r\n            const collisionType = object.properties.get(ExcaliburTiledProperties.Collision.Type);\r\n            if (collisionType && typeof collisionType === 'string') {\r\n               switch (collisionType.toLowerCase()) {\r\n                  case CollisionType.Active.toLowerCase(): {\r\n                     newActor.body.collisionType = CollisionType.Active;\r\n                     break;\r\n                  }\r\n                  case CollisionType.Fixed.toLowerCase(): {\r\n                     newActor.body.collisionType = CollisionType.Fixed;\r\n                     break;\r\n                  }\r\n                  case CollisionType.Passive.toLowerCase(): {\r\n                     newActor.body.collisionType = CollisionType.Passive;\r\n                     break;\r\n                  }\r\n                  case CollisionType.PreventCollision.toLowerCase(): {\r\n                     newActor.body.collisionType = CollisionType.PreventCollision;\r\n                     break;\r\n                  }\r\n                  default: {\r\n                     this.logger.warn(`Unknown collision type in layer ${this.name}, for object id ${object.id} and name ${object.name}: ${collisionType}`);\r\n                     break;\r\n                  }\r\n               }\r\n            }\r\n         }\r\n\r\n\r\n         if (object instanceof TemplateObject) {\r\n            // templates reference their own tilesets\r\n            const tileset = object.template.tileset;\r\n            if (object.template.object) {\r\n               this._actorFromObject(object.template.object, newActor, tileset);\r\n            }\r\n         } else {\r\n            let tileset: Tileset | undefined;\r\n            if (object instanceof InsertedTile) {\r\n               tileset = this.resource.getTilesetForTileGid(object.gid);\r\n            }\r\n            this._actorFromObject(object, newActor, tileset);\r\n         }\r\n\r\n         this._recordObjectEntityMapping(object, newActor);\r\n      }\r\n\r\n      this._loaded = true;\r\n   }\r\n\r\n   private _recordObjectEntityMapping(object: PluginObject, entity: Entity) {\r\n      entity.addComponent(new TiledDataComponent({\r\n         tiledObject: object\r\n      }));\r\n      this.objects.push(object);\r\n      this.entities.push(entity);\r\n      this._objectToEntity.set(object, entity);\r\n      this._entityToObject.set(entity, object);\r\n   }\r\n}", "import { BaseAlign, Color, Font, FontUnit, TextAlign, Vector, vec } from \"excalibur\";\r\nimport { Text as ExText } from 'excalibur';\r\nimport { TiledObject, TiledObjectGroup, TiledText } from \"../parser/tiled-parser\";\r\nimport { Properties, mapProps } from \"./properties\";\r\nimport { Template } from \"./template\";\r\nimport { filenameFromPath } from \"./path-util\";\r\nimport { Tileset } from \"./tileset\";\r\nimport { TiledResource } from \"./tiled-resource\";\r\n\r\nexport interface PluginObjectProps {\r\n   tiledObject: TiledObject;\r\n}\r\n/**\r\n * Plugin object represents the base class of a generic instance of an object used in a map.\r\n *\r\n * It could be more specific as well.\r\n */\r\nexport class PluginObject implements Properties {\r\n   id: number;\r\n   x: number;\r\n   y: number;\r\n   name?: string;\r\n   class?: string;\r\n   tiledObject: TiledObject;\r\n   properties = new Map<string, string | number | boolean>();\r\n   constructor(props: PluginObjectProps) {\r\n      this.tiledObject = props.tiledObject;\r\n      this.name = this.tiledObject.name;\r\n      // Yes this is class in the Tiled UI, it switched from Type -> Class but not all the representations match\r\n      // class mostly synonymous with type in tiled except for a few instances\r\n      this.class = this.tiledObject.type; \r\n      this.id = this.tiledObject.id ?? -1;\r\n      this.x = this.tiledObject.x ?? 0;\r\n      this.y = this.tiledObject.y ?? 0;\r\n   }\r\n}\r\n\r\n/**\r\n * Represents a template instance in a map.\r\n *\r\n * Inherits properties, class, and name from template if not overridden.\r\n */\r\nexport class TemplateObject extends PluginObject {\r\n   public source: string;\r\n   public template: Template;\r\n   public tiledTemplate: TiledObject;\r\n   constructor(tiledObject: TiledObject, template: Template) {\r\n      super({tiledObject});\r\n      if (!tiledObject.template) throw new Error('Invalid template');\r\n      this.source = tiledObject.template\r\n      this.tiledTemplate = tiledObject;\r\n      this.template = template;\r\n\r\n      // Inherited from template object\r\n      if (template.object) {\r\n         this.name = this.name || template.object.name;\r\n         this.class = this.class || template.object.class;\r\n         for (const [key, value] of template.object.properties.entries()) {\r\n            if (!this.properties.has(key)) {\r\n               this.properties.set(key, value);\r\n            }\r\n         }\r\n      }\r\n\r\n      // Inherited from tileset\r\n      if (template.tileset && template.object.tiledObject.gid) {\r\n         const tile = template.tileset.getTileByGid(template.object.tiledObject.gid);\r\n         if (tile) {\r\n            this.class = this.class || tile.class;\r\n            for (const [key, value] of tile.properties.entries()) {\r\n               if (!this.properties.has(key)) {\r\n                  this.properties.set(key, value);\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      \r\n   }\r\n}\r\n\r\n/**\r\n * Represents an instance of an inserted tile object in a map.\r\n */\r\nexport class InsertedTile extends PluginObject {\r\n   constructor(tiledObject: TiledObject, public readonly gid: number, public readonly width: number, public readonly height: number) {\r\n      super({tiledObject});\r\n   }\r\n}\r\n\r\n/**\r\n * Represents an instance of a point object in a map\r\n */\r\nexport class Point extends PluginObject {}\r\n\r\n/**\r\n * Represents an instance of a Text object in a map\r\n */\r\nexport class Text extends PluginObject {\r\n   text: ExText;\r\n   font: Font;\r\n   \r\n   constructor(tiledObject: TiledObject, text: TiledText, width: number, textQuality: number) {\r\n      super({tiledObject});\r\n\r\n      this.font = new Font({\r\n         family: text.fontfamily ?? 'sans-serif',\r\n         color: text.color ? Color.fromHex(text.color) : Color.Black,\r\n         size: text.pixelsize ?? 16,\r\n         unit: FontUnit.Px,\r\n         textAlign: this._textAlignFromTiled(text.halign),\r\n         baseAlign: this._textBaselineFromTiled(text.valign),\r\n         quality: textQuality\r\n      })\r\n\r\n      const textWrap = text.wrap ?? false;\r\n\r\n      this.text = new ExText({\r\n         text: text.text,\r\n         font: this.font,\r\n         ...(textWrap ? {\r\n            maxWidth: width + 10 // FIXME: need to bump by a few pixels for some reason\r\n         }: {})\r\n      });\r\n   }\r\n   _textBaselineFromTiled(code: Pick<TiledText, 'valign'>['valign']){\r\n      switch(code) {\r\n         case 'bottom': {\r\n            return BaseAlign.Bottom;\r\n         }\r\n         case 'center': {\r\n            return BaseAlign.Middle;\r\n         }\r\n         case 'top': {\r\n            return BaseAlign.Top;\r\n         }\r\n         default: {\r\n            return BaseAlign.Top;\r\n         }\r\n      }\r\n   }\r\n\r\n   _textAlignFromTiled(code: Pick<TiledText,'halign'>['halign']) {\r\n      switch(code) {\r\n         case 'left': {\r\n            return TextAlign.Left\r\n         }\r\n         case 'center': {\r\n            return TextAlign.Center\r\n         }\r\n         case 'right': {\r\n            return TextAlign.Right\r\n         }\r\n         case 'justify': {\r\n            return TextAlign.Start\r\n         }\r\n         default: {\r\n            return TextAlign.Left;\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\n/**\r\n * Represents an instance of an ellipse object in a map.\r\n */\r\nexport class Ellipse extends PluginObject {\r\n   constructor(tiledObject: TiledObject, public readonly width: number, public readonly height: number) {\r\n      super({tiledObject});\r\n   }\r\n}\r\n\r\n/**\r\n * Represents an instance of a rectangle object in a map.\r\n */\r\nexport class Rectangle extends PluginObject {\r\n\r\n   constructor(tiledObject: TiledObject, public readonly width: number, public readonly height: number, public readonly anchor: Vector) {\r\n      super({tiledObject});\r\n   }\r\n}\r\n\r\n/**\r\n * Represents an instance of a polygon object in a map.\r\n */\r\nexport class Polygon extends PluginObject {\r\n   /**\r\n    * Transformed world space points\r\n    */\r\n   public readonly points: Vector[] = [];\r\n   /**\r\n    * Local space points\r\n    */\r\n   public readonly localPoints: Vector[] = [];\r\n   constructor(tiledObject: TiledObject, points: {x: number, y: number}[]) {\r\n      super({tiledObject});\r\n      this.localPoints = points.map(p => vec(p.x, p.y));\r\n      this.points = points.map(p => vec(p.x, p.y).add(vec(this.x, this.y)));\r\n   }\r\n}\r\n\r\n/**\r\n * Represents an instance of a polyline object in a map\r\n */\r\nexport class Polyline extends PluginObject {\r\n   public readonly points: Vector[] = []\r\n   constructor(tiledObject: TiledObject, points: {x: number, y: number}[]) {\r\n      super({tiledObject});\r\n      this.points = points.map(p => vec(p.x, p.y));\r\n   }\r\n}\r\n\r\nexport type ObjectTypes = Polygon | Polyline | Rectangle | Ellipse | Text | Point | InsertedTile | PluginObject;\r\n\r\n/**\r\n * Parses a TiledObject and returns a friendly plugin object.\r\n * @param object \r\n * @param resource \r\n * @returns \r\n */\r\nexport function parseObject(object: TiledObject, resource?: TiledResource): PluginObject {\r\n   let newObject: PluginObject;\r\n   if (object.point) {\r\n      // Template objects don't have an id for some reason\r\n      newObject = new Point({tiledObject: object});\r\n   } else if (object.ellipse) {\r\n      if (object.width && object.height) {\r\n         // if defaulted the circle center is accurate, otherwise need to be offset by radius\r\n         newObject = new Ellipse(object, object.width, object.height);\r\n         newObject.x += object.width / 2;\r\n         newObject.y += object.height / 2;\r\n      } else {\r\n         // Tiled undocumented default is 20x20\r\n         newObject = new Ellipse(object, 20, 20);\r\n      }\r\n   } else if (object.polygon) {\r\n      newObject = new Polygon(object, object.polygon);\r\n   } else if (object.polyline) {\r\n      newObject = new Polyline(object, object.polyline);\r\n   } else if(object.text) {\r\n      newObject = new Text(object, object.text, object.width ?? 0, resource?.textQuality ?? 4);\r\n   } else if (object.gid) {\r\n      newObject = new InsertedTile(object, object.gid,  object.width ?? 0, object.height ?? 0);\r\n\r\n      // Check for inherited class names & properties from tileset\r\n      const tileset = resource?.getTilesetForTileGid(object.gid);\r\n      let className = object.type;\r\n      if (tileset) {\r\n         const tile = tileset?.getTileByGid(object.gid);\r\n         className = className || tile?.class;\r\n         if (tile?.properties) {\r\n            for (const [key, value] of tile.properties.entries()) {\r\n               if (!newObject.properties.has(key)) {\r\n                  newObject.properties.set(key, value);\r\n               }\r\n            }\r\n         }\r\n      }\r\n      newObject.class = className;\r\n   } else if (object.template && resource) {\r\n      // FIXME This is problematic if you have files with the same name but different paths\r\n      const template = resource.templates.find(t => filenameFromPath(t.templatePath) === filenameFromPath(object.template!));\r\n      if (template) {\r\n         newObject = new TemplateObject(object, template);\r\n      } else {\r\n         // This is truly an error situation\r\n         throw new Error(`Template object id ${object.id} with name ${object.name} is missing a loaded template file, there should be one loaded from ${object.template}! Is your tiled map or template corrupted?`);\r\n      }\r\n   } else { // rectangle\r\n      if (object.width && object.height) {\r\n         // if defaulted the rectangle center is accurate, otherwise need to be offset by radius\r\n         newObject = new Rectangle(object, object.width, object.height, Vector.Zero);\r\n      } else {\r\n         // Tiled undocumented default is 20x20 AND pivots around the center\r\n         newObject = new Rectangle(object, 20, 20, Vector.Half);\r\n      }\r\n   }\r\n   mapProps(newObject, object.properties);\r\n   return newObject;\r\n}\r\n\r\n/**\r\n * Parses a Tiled Object Group and returns friendly plugin objects.\r\n * @param tiledObjectGroup \r\n * @param resource \r\n * @returns \r\n */\r\nexport function parseObjects(tiledObjectGroup: TiledObjectGroup, resource?: TiledResource) {\r\n   const objects: PluginObject[] = [];\r\n   for (const object of tiledObjectGroup.objects) {\r\n      let newObject: PluginObject = parseObject(object, resource);\r\n      objects.push(newObject);\r\n   }\r\n   return objects;\r\n}", "\r\n\r\nexport type PathMap = { path: string | RegExp, output: string }[];\r\n\r\nexport function filenameFromPath(inputPath: string): string {\r\n   const filenameExpression = /[^/\\\\&\\?]+\\.\\w{2,4}(?=([\\#\\?&].*$|$))/ig\r\n\r\n   const matches = inputPath.match(filenameExpression);\r\n\r\n   if (matches) {\r\n      const match = matches[0];\r\n      return match;\r\n   }\r\n\r\n   throw new Error(`Could not locate filename from path: ${inputPath}`);\r\n}\r\n\r\nexport function mapPath(inputPath: string, pathMap: PathMap): string {\r\n\r\n   for (const { path, output } of pathMap) {\r\n      if (typeof path === 'string') {\r\n         if (inputPath.includes(path)) {\r\n            return output;\r\n         }\r\n      } else {\r\n         const match = inputPath.match(path);\r\n         if (match) {\r\n            return output.replace('[match]', match[0]);;\r\n         }\r\n      }\r\n   }\r\n   return inputPath;\r\n}\r\n\r\nexport function pathInMap(inputPath: string, pathMap?: PathMap): boolean {\r\n   if (!pathMap) return false;\r\n   for (const { path, output } of pathMap) {\r\n      if (typeof path === 'string') {\r\n         if (inputPath.includes(path)) {\r\n            return true;\r\n         }\r\n      } else {\r\n         const match = inputPath.match(path);\r\n         if (match) {\r\n            return true;\r\n         }\r\n      }\r\n   }\r\n   return false;\r\n}\r\n\r\n\r\nexport function pathRelativeToBase(basePath: string, relativeToBase: string, pathMap?: PathMap) {\r\n   if (pathInMap(relativeToBase, pathMap) && pathMap) {\r\n      return mapPath(relativeToBase, pathMap);\r\n   }\r\n\r\n   // Use absolute path if specified\r\n   if (relativeToBase.indexOf('/') === 0) {\r\n      return relativeToBase;\r\n   }\r\n\r\n   const originSplit = basePath.split('/');\r\n   const relativeSplit = relativeToBase.split('/');\r\n   // if origin path is a file, remove it so it's a directory\r\n   if (originSplit[originSplit.length - 1].includes('.')) {\r\n      originSplit.pop();\r\n   }\r\n   return originSplit.concat(relativeSplit).join('/');\r\n}", "import { TiledProperty } from \"../parser/tiled-parser\";\r\n\r\nexport interface Properties {\r\n   /**\r\n    * Tiled properties are all lowercased when imported.\r\n    *\r\n    * These are all converted to lowercase keys, and lowercase if the value is a string\r\n    */\r\n   properties: Map<string, string | number | boolean>;\r\n}\r\n\r\n/**\r\n * Maps the tiled source properties, to a JS property map with all keys/values normalized to lowercase where appropriate\r\n * @param target \r\n * @param sourceProps \r\n */\r\nexport function mapProps<T extends Properties>(target: T, sourceProps?: TiledProperty[]) {\r\n   try {\r\n      if (sourceProps) {\r\n         for (const prop of sourceProps) {\r\n            let value = prop.value;\r\n            if (typeof prop.value === 'string') {\r\n               value = prop.value.toLocaleLowerCase();\r\n            }\r\n            target.properties.set(prop.name.toLocaleLowerCase(), value);\r\n         }\r\n      }\r\n   } catch (e) {\r\n      console.error(`Unable to map properties onto ${target}`, e);\r\n   }\r\n}", "import { ImageSource, Loadable } from \"excalibur\";\r\nimport { TiledParser, TiledTemplate } from \"../parser/tiled-parser\";\r\nimport { FetchLoader, FileLoader } from \"./file-loader\";\r\nimport { LoaderCache } from \"./loader-cache\";\r\nimport { parseObject } from \"./objects\";\r\nimport { PathMap, pathRelativeToBase } from \"./path-util\";\r\nimport { Tileset } from \"./tileset\";\r\nimport { Template } from \"./template\";\r\nimport { TilesetResource, TilesetResourceOptions } from \"./tileset-resource\";\r\n\r\nexport interface TemplateResourceOptions {\r\n   headless?: boolean;\r\n   strict?: boolean;\r\n   parser?: TiledParser,\r\n   fileLoader?: FileLoader,\r\n   imageLoader?: LoaderCache<ImageSource>,\r\n   pathMap?: PathMap\r\n}\r\n\r\n/**\r\n * Templates are basically a mini tiled resource, they have a self contained object and optionally a tileset\r\n * \r\n * They can be used to instance objects in ObjectLayers, or as part of Tile Collider definitions\r\n */\r\nexport class TemplateResource implements Loadable<Template> {\r\n   /**\r\n    * [[Template]] is only accessible after .load()\r\n    * \r\n    * Check .isLoaded() to know if it has been loaded\r\n    */\r\n   data!: Template;\r\n   public readonly headless: boolean = false;\r\n   public readonly strict: boolean = true;\r\n\r\n   private parser: TiledParser;\r\n   private fileLoader: FileLoader = FetchLoader;\r\n   private imageLoader: LoaderCache<ImageSource>;\r\n   private pathMap?: PathMap;\r\n\r\n   constructor(public readonly templatePath: string, options?: TemplateResourceOptions) {\r\n      const { fileLoader, parser, pathMap, imageLoader, strict, headless } = {...options};\r\n      this.headless = headless ?? this.headless;\r\n      this.strict = strict ?? this.strict;\r\n      this.fileLoader = fileLoader ?? this.fileLoader;\r\n      this.imageLoader = imageLoader ?? new LoaderCache(ImageSource);\r\n      this.parser = parser ?? new TiledParser();\r\n      this.pathMap = pathMap;\r\n   }\r\n\r\n   isLoaded(): boolean {\r\n      return !!this.data;\r\n   }\r\n\r\n   async load() {\r\n      const templateType = this.templatePath.includes('.tx') ? 'xml' : 'json';\r\n      try {\r\n         const content = await this.fileLoader(this.templatePath, templateType);\r\n         let template: TiledTemplate;\r\n         if (templateType === 'xml') {\r\n            template = this.parser.parseExternalTemplate(content, this.strict);\r\n         } else {\r\n            if (this.strict) {\r\n               template = TiledTemplate.parse(content);\r\n            } else {\r\n               template = content as TiledTemplate;\r\n            }\r\n         }\r\n         const tiledTemplate = template;\r\n         const object = parseObject(template.object);\r\n         let tileset: Tileset | undefined = undefined;\r\n         if (template.tileset) {\r\n            // Template tilesets are not included in the TiledResource list because their gids can collide with map tilesets\r\n            const tilesetPath = pathRelativeToBase(this.templatePath, template.tileset.source, this.pathMap);\r\n            const tilesetResource = new TilesetResource(tilesetPath, template.tileset.firstgid, {\r\n               headless: this.headless,\r\n               strict: this.strict,\r\n               fileLoader: this.fileLoader,\r\n               imageLoader: this.imageLoader,\r\n               parser: this.parser,\r\n               pathMap: this.pathMap\r\n            } satisfies TilesetResourceOptions);\r\n\r\n            tileset = await tilesetResource.load();\r\n         }\r\n\r\n         return this.data = new Template({\r\n            templatePath: this.templatePath,\r\n            tiledTemplate,\r\n            object,\r\n            tileset\r\n         });\r\n\r\n      } catch (e) {\r\n\r\n         console.error(`Could not load template at ${this.templatePath}, check to see if your pathMap is correct or if you're Tiled map is corrupted`);\r\n         throw e;\r\n      }\r\n   }\r\n}", "import { TiledTemplate } from \"../parser/tiled-parser\";\r\nimport { PluginObject } from \"./objects\";\r\nimport { Tileset } from \"./tileset\";\r\n\r\nexport interface TemplateOptions {\r\n   templatePath: string;\r\n   object: PluginObject,\r\n   tiledTemplate: TiledTemplate,\r\n   tileset?: Tileset\r\n}\r\n\r\n/**\r\n * Templates are basically a mini tiled resource, they have a self contained object and optionally a tileset\r\n *\r\n * They can be used to instance objects in ObjectLayers, or as part of Tile Collider definitions\r\n */\r\nexport class Template {\r\n   templatePath: string;\r\n   tiledTemplate: TiledTemplate;\r\n   object: PluginObject;\r\n   tileset?: Tileset;\r\n\r\n   constructor(options: TemplateOptions) {\r\n      const { templatePath, object, tiledTemplate, tileset } = options;\r\n      this.templatePath = templatePath;\r\n      this.object = object;\r\n      this.tiledTemplate = tiledTemplate;\r\n      this.tileset = tileset;\r\n   }\r\n}", "import { Color, ParallaxComponent, TileMap, Vector, vec, GraphicsComponent, Logger, AnimationStrategy, TransformComponent, Tile as ExTile } from \"excalibur\";\r\nimport { mapProps } from \"./properties\";\r\nimport { TiledTileLayer, isCSV, isInfiniteLayer, needsDecoding } from \"../parser/tiled-parser\";\r\nimport { Decoder } from \"./decoder\";\r\nimport { TiledResource } from \"./tiled-resource\";\r\nimport { getCanonicalGid } from \"./gid-util\";\r\nimport { ExcaliburTiledProperties } from \"./excalibur-properties\";\r\nimport { TiledLayerDataComponent } from \"./tiled-layer-component\";\r\nimport { Layer } from \"./layer\";\r\nimport { Tile } from \"./tileset\";\r\nimport { byClassCaseInsensitive, byPropertyCaseInsensitive } from \"./filter-util\";\r\n\r\n/**\r\n * Tile information for both excalibur and tiled tile representations\r\n */\r\nexport interface TileInfo {\r\n   /**\r\n    * Tiled based information for the tile\r\n    */\r\n   tiledTile?: Tile;\r\n   /**\r\n    * Excalibur tile abstraction\r\n    */\r\n   exTile: ExTile;\r\n}\r\n\r\nexport class TileLayer implements Layer {\r\n   private logger = Logger.getInstance();\r\n   public readonly name: string;\r\n   public readonly class?: string;\r\n   /**\r\n    * Number of tiles wide\r\n    */\r\n   public readonly width: number = 0;\r\n   /**\r\n    * Number of tiles high\r\n    */\r\n   public readonly height: number = 0;\r\n\r\n   properties = new Map<string, string | number | boolean>();\r\n\r\n   /**\r\n    * Original list of gids for this layer from tiled\r\n    */\r\n   data: number[] = [];\r\n\r\n   /**\r\n    * Excalibur TileMap structure for drawing in excalibur\r\n    */\r\n   tilemap!: TileMap;\r\n\r\n   private _gidToTileInfo = new Map<number, TileInfo[]>();\r\n\r\n   /**\r\n    * Returns the excalibur tiles that match a tiled gid\r\n    */\r\n   getTilesByGid(gid: number): TileInfo[] {\r\n      return this._gidToTileInfo.get(gid) ?? [];\r\n   }\r\n\r\n   /**\r\n    * Returns the excalibur tiles that match a tiled class name\r\n    * @param className\r\n    */\r\n   getTilesByClassName(className: string): TileInfo[] {\r\n      const tiles = this.tilemap.tiles.filter(t => {\r\n         const maybeTiled = t.data.get(ExcaliburTiledProperties.TileData.Tiled) as Tile | undefined;\r\n         if (maybeTiled) {\r\n            return byClassCaseInsensitive(className)(maybeTiled);\r\n         }\r\n         return false;\r\n      });\r\n\r\n      return tiles.map(t => ({\r\n         exTile: t,\r\n         tiledTile: t.data.get(ExcaliburTiledProperties.TileData.Tiled)\r\n      }))\r\n   }\r\n\r\n   /**\r\n    * Returns the excalibur tiles that match a tiled property and optional value\r\n    * @param name\r\n    * @param value\r\n    */\r\n   getTilesByProperty(name: string, value?: any): TileInfo[] {\r\n      const tiles = this.tilemap.tiles.filter(t => {\r\n         const maybeTiled = t.data.get(ExcaliburTiledProperties.TileData.Tiled) as Tile | undefined;\r\n         if (maybeTiled) {\r\n            return byPropertyCaseInsensitive(name, value)(maybeTiled);\r\n         }\r\n         return false;\r\n      });\r\n\r\n      return tiles.map(t => ({\r\n         exTile: t,\r\n         tiledTile: t.data.get(ExcaliburTiledProperties.TileData.Tiled)\r\n      }))\r\n   }\r\n\r\n   getTileByPoint(worldPos: Vector): TileInfo | null {\r\n      if (!this.tilemap) {\r\n         this.logger.warn('Tilemap has not yet been loaded! getTileByPoint() will only return null');\r\n         return null;\r\n      }\r\n      if (this.tilemap) {\r\n         const exTile = this.tilemap.getTileByPoint(worldPos);\r\n         if (!exTile) return null;\r\n         const tileIndex = this.tilemap.tiles.indexOf(exTile);\r\n         const gid = getCanonicalGid(this.data[tileIndex]);\r\n\r\n         if (gid <= 0) {\r\n            return null;\r\n         }\r\n\r\n         const tileset = this.resource.getTilesetForTileGid(gid);\r\n         const tiledTile = tileset.getTileByGid(gid);\r\n\r\n         return { tiledTile, exTile };\r\n      }\r\n      return null;\r\n   }\r\n\r\n   getTileByCoordinate(x: number, y: number): TileInfo | null {\r\n      if (!this.tilemap) {\r\n         this.logger.warn('Tilemap has not yet been loaded! getTileByCoordinate() will only return null');\r\n         return null;\r\n      }\r\n      if (this.tilemap) {\r\n         const exTile = this.tilemap.getTile(x, y);\r\n         const tileIndex = this.tilemap.tiles.indexOf(exTile);\r\n         const gid = getCanonicalGid(this.data[tileIndex]);\r\n\r\n         if (gid <= 0) {\r\n            return null;\r\n         }\r\n\r\n         const tileset = this.resource.getTilesetForTileGid(gid);\r\n         const tiledTile = tileset.getTileByGid(gid);\r\n\r\n         return { tiledTile, exTile };\r\n      }\r\n      return null;\r\n   }\r\n\r\n   constructor(public tiledTileLayer: TiledTileLayer, public resource: TiledResource, public readonly order: number) {\r\n      this.name = tiledTileLayer.name;\r\n      this.class = tiledTileLayer.class;\r\n      this.width = tiledTileLayer.width;\r\n      this.height = tiledTileLayer.height;\r\n      mapProps(this, tiledTileLayer.properties);\r\n   }\r\n\r\n   private _recordTileData(gid: number, tile: ExTile) {\r\n      let tiles: TileInfo[] | undefined = this._gidToTileInfo.get(gid);\r\n      let tileset = this.resource.getTilesetForTileGid(gid);\r\n      let maybeTile = tileset.getTileByGid(gid);\r\n      if (!tiles) {\r\n         tiles = [{exTile: tile, tiledTile: maybeTile}];\r\n      } else {\r\n         tiles.push({exTile: tile, tiledTile: maybeTile});\r\n      }\r\n      this._gidToTileInfo.set(gid, tiles);\r\n      tile.data.set(ExcaliburTiledProperties.TileData.Tiled, maybeTile);\r\n   }\r\n\r\n   private updateTile(tile: ExTile, gid: number, hasTint: boolean, tint: Color, isSolidLayer: boolean) {\r\n      this._recordTileData(gid, tile);\r\n      if (this.resource.useExcaliburWiring && isSolidLayer) {\r\n         tile.solid = true;\r\n      }\r\n\r\n      const tileset = this.resource.getTilesetForTileGid(gid);\r\n      const headless = this.resource.headless;\r\n\r\n      if (!headless) {\r\n         let sprite = tileset.getSpriteForGid(gid);\r\n         if (hasTint) {\r\n            sprite = sprite.clone();\r\n            sprite.tint = tint;\r\n         }\r\n         tile.addGraphic(sprite, { offset: tileset.tileOffset });\r\n      }\r\n\r\n      // the whole tilemap uses a giant composite collider relative to the Tilemap\r\n      // not individual tiles\r\n      const colliders = tileset.getCollidersForGid(gid);\r\n      for (let collider of colliders) {\r\n         tile.addCollider(collider);\r\n      }\r\n\r\n      let animation = headless ? null : tileset.getAnimationForGid(gid);\r\n      if (animation) {\r\n         if (hasTint) {\r\n            animation = animation.clone();\r\n            animation.tint = tint;\r\n         }\r\n         tile.clearGraphics();\r\n         tile.addGraphic(animation, { offset: tileset.tileOffset });\r\n         if (this.resource.useExcaliburWiring) {\r\n            const tileObj = tileset.getTileByGid(gid);\r\n            const strategy = tileObj?.properties.get(ExcaliburTiledProperties.Animation.Strategy);\r\n            if (strategy && typeof strategy === 'string') {\r\n               switch (strategy.toLowerCase()) {\r\n                  case AnimationStrategy.End.toLowerCase(): {\r\n                     animation.strategy = AnimationStrategy.End;\r\n                     break;\r\n                  }\r\n                  case AnimationStrategy.Freeze.toLowerCase(): {\r\n                     animation.strategy = AnimationStrategy.Freeze;\r\n                     break;\r\n                  }\r\n                  case AnimationStrategy.Loop.toLowerCase(): {\r\n                     animation.strategy = AnimationStrategy.Loop;\r\n                     break;\r\n                  }\r\n                  case AnimationStrategy.PingPong.toLowerCase(): {\r\n                     animation.strategy = AnimationStrategy.PingPong;\r\n                     break;\r\n                  }\r\n                  default: {\r\n                     // unknown animation strategy\r\n                     this.logger.warn(`Unknown animation strategy in tileset ${tileset.name} on tile gid ${gid}: ${strategy}`);\r\n                     break;\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   async load() {\r\n      const opacity = this.tiledTileLayer.opacity;\r\n      const hasTint = !!this.tiledTileLayer.tintcolor;\r\n      const tint = this.tiledTileLayer.tintcolor ? Color.fromHex(this.tiledTileLayer.tintcolor) : Color.Transparent;\r\n      const isSolidLayer = !!this.properties.get(ExcaliburTiledProperties.Layer.Solid);\r\n      const layer = this.tiledTileLayer;\r\n      const pos = vec(layer.offsetx ?? 0, layer.offsety ?? 0);\r\n      if (needsDecoding(this.tiledTileLayer)) {\r\n         this.data = await Decoder.decode(this.tiledTileLayer.data, this.tiledTileLayer.compression);\r\n      } else if (isCSV(this.tiledTileLayer)) {\r\n         this.data = this.tiledTileLayer.data;\r\n      }\r\n\r\n      // Create tilemap infinite or not\r\n      if (this.resource.map.infinite && isInfiniteLayer(this.tiledTileLayer)) {\r\n         const infiniteStartPos = vec(\r\n            this.tiledTileLayer.startx * this.resource.map.tilewidth,\r\n            this.tiledTileLayer.starty * this.resource.map.tileheight);\r\n         this.tilemap = new TileMap({\r\n            name: this.name,\r\n            pos: pos.add(infiniteStartPos),\r\n            tileHeight: this.resource.map.tileheight,\r\n            tileWidth: this.resource.map.tilewidth,\r\n            columns: layer.width,\r\n            rows: layer.height\r\n         });\r\n      } else {\r\n         this.tilemap = new TileMap({\r\n            name: this.name,\r\n            pos,\r\n            tileWidth: this.resource.map.tilewidth,\r\n            tileHeight: this.resource.map.tileheight,\r\n            columns: layer.width,\r\n            rows: layer.height,\r\n         });\r\n      }\r\n\r\n      // Common tilemap props\r\n      this.tilemap.addComponent(new TiledLayerDataComponent({ tiledTileLayer: layer }));\r\n      const tx = this.tilemap.get(TransformComponent);\r\n      if (tx) {\r\n         tx.z = this.order;\r\n         let zoverride = this.properties.get(ExcaliburTiledProperties.ZIndex.ZIndex) as number | undefined;\r\n         if (typeof zoverride === 'number') {\r\n            tx.z = zoverride;\r\n         }\r\n      }\r\n      const graphics = this.tilemap.get(GraphicsComponent);\r\n      if (graphics) {\r\n         graphics.visible = this.tiledTileLayer.visible;\r\n         graphics.opacity = opacity;\r\n      }\r\n      if (layer.parallaxx || layer.parallaxy) {\r\n         const factor = vec(layer.parallaxx ?? 1, layer.parallaxy ?? 1);\r\n         this.tilemap.addComponent(new ParallaxComponent(factor));\r\n      }\r\n\r\n      // Parse tilemap data infinit or not\r\n      if (this.resource.map.infinite && isInfiniteLayer(this.tiledTileLayer)) {\r\n         for (let chunk of this.tiledTileLayer.chunks) {\r\n            for (let i = 0; i < chunk.data.length; i++) {\r\n               const gid = chunk.data[i];\r\n               if (gid != 0) {\r\n                  // Map from chunk to big tile map\r\n                  const tileX = (i % chunk.width) + (chunk.x - this.tiledTileLayer.startx);\r\n                  const tileY = Math.floor(i / chunk.width) + (chunk.y - this.tiledTileLayer.starty);\r\n                  const tile = this.tilemap.tiles[tileX + tileY * layer.width];\r\n                  this.updateTile(tile, gid, hasTint, tint, isSolidLayer);\r\n               }\r\n            }\r\n         }\r\n      } else {\r\n         // Read tiled data into Excalibur's tilemap type\r\n         for (let i = 0; i < this.data.length; i++) {\r\n            let gid = this.data[i];\r\n            if (gid !== 0) {\r\n               const tile = this.tilemap.tiles[i];\r\n               this.updateTile(tile, gid, hasTint, tint, isSolidLayer);\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\n\r\n\r\n\r\n", "import { Component } from \"excalibur\";\r\nimport { PluginObject } from \"./objects\";\r\n\r\nexport interface TiledDataComponentOptions {\r\n   tiledObject: PluginObject;\r\n}\r\nexport class TiledDataComponent extends Component {\r\n   public tiledObject: PluginObject;\r\n   constructor(options: TiledDataComponentOptions){\r\n      super();\r\n      const {tiledObject} = options;\r\n      this.tiledObject = tiledObject;\r\n   }\r\n}", "import { Component } from \"excalibur\";\r\nimport { TiledTileLayer } from \"../parser/tiled-parser\";\r\n\r\nexport interface TiledLayerDataComponentOptions {\r\n   tiledTileLayer: TiledTileLayer;\r\n}\r\n\r\nexport class TiledLayerDataComponent extends Component {\r\n   public readonly tiledTileLayer: TiledTileLayer;\r\n   constructor(options: TiledLayerDataComponentOptions) {\r\n      super();\r\n      const { tiledTileLayer } = options;\r\n      this.tiledTileLayer = tiledTileLayer;\r\n   }\r\n}", "import { BoundingBox, Color, Entity, ImageSource, Loadable, Logger, Scene, TransformComponent, Vector, vec } from \"excalibur\";\r\nimport { TiledMap, TiledParser, TiledTile, isTiledTilesetCollectionOfImages, isTiledTilesetEmbedded, isTiledTilesetExternal, isTiledTilesetSingleImage } from \"../parser/tiled-parser\";\r\nimport { Tile, Tileset } from \"./tileset\";\r\nimport { Layer } from \"./layer\";\r\nimport { IsometricTileInfo } from \"./iso-tile-layer\";\r\nimport { TileInfo } from \"./tile-layer\";\r\nimport { IsoTileLayer } from \"./iso-tile-layer\";\r\nimport { TileLayer } from \"./tile-layer\";\r\nimport { ObjectLayer } from './object-layer';\r\nimport { Template } from \"./template\";\r\nimport { compare } from \"compare-versions\";\r\nimport { getCanonicalGid } from \"./gid-util\";\r\nimport { PathMap, pathRelativeToBase } from \"./path-util\";\r\nimport { PluginObject } from \"./objects\";\r\nimport { byClassCaseInsensitive, byNameCaseInsensitive, byPropertyCaseInsensitive } from \"./filter-util\";\r\nimport { ExcaliburTiledProperties } from \"./excalibur-properties\";\r\nimport { FetchLoader, FileLoader } from './file-loader';\r\nimport { TilesetResource, TilesetResourceOptions } from \"./tileset-resource\";\r\nimport { LoaderCache } from \"./loader-cache\";\r\nimport { TemplateResource, TemplateResourceOptions } from \"./template-resource\";\r\nimport { ImageLayer } from \"./image-layer\";\r\n\r\nexport interface TiledAddToSceneOptions {\r\n   pos: Vector;\r\n}\r\n\r\nexport interface TiledResourceOptions {\r\n\r\n   /**\r\n    * Plugin will operate in headless mode and skip all graphics related\r\n    * excalibur items including creating ImageSource's for Tiled items.\r\n    *\r\n    * Default false.\r\n    */\r\n   headless?: boolean;\r\n\r\n   /**\r\n    * Add a starting z index for the layers to use. By default the layers count up from 0.\r\n    *\r\n    * If you'd like to manually override a z-index on a layer use the 'zindex' custom property on a layer.\r\n    */\r\n   startZIndex?: number;\r\n\r\n   /**\r\n    * Default true. If false, only tilemap will be parsed and displayed, it's up to you to wire up any excalibur behavior.\r\n    * Automatically wires excalibur to the following\r\n    * * Wire up current scene camera\r\n    * * Make Actors/Tiles with colliders on Tiled tiles & Tiled objects\r\n    * * Support solid layers\r\n    *\r\n    * Read more at excaliburjs.com!\r\n    */\r\n   useExcaliburWiring?: boolean;\r\n\r\n   /**\r\n    * Sets excalibur's background color to match the Tiled map\r\n    */\r\n   useMapBackgroundColor?: boolean;\r\n\r\n\r\n   /**\r\n    * Keeps the camera viewport within the bounds of the TileMap, uses the first tile layer's bounds.\r\n    *\r\n    * Defaults true, if false the camera will use the layer bounds to keep the camera from showing the background.\r\n    */\r\n   useTilemapCameraStrategy?: boolean\r\n\r\n   /**\r\n    * Plugin detects the map type based on extension, if you know better you can force an override.\r\n    */\r\n   mapFormatOverride?: 'TMX' | 'TMJ';\r\n\r\n   /**\r\n    * The pathMap helps work around odd things bundlers do with static files by providing a way to redirect the original\r\n    * source paths in the Tiled files to new locations.\r\n    *\r\n    * When the Tiled resource comes across something that matches `path`, it will use the output string instead.\r\n    * \r\n    * Example:\r\n    * ```typescript\r\n    * const newResource = new TiledResource('./example-city.tmx', {\r\n    *     pathMap: [\r\n    *        // If the \"path\" is included in the source path, the output will be used\r\n    *        { path: 'cone.tx', output: '/static/assets/cone.tx' },\r\n    *        // Regex matching with special [match] in output string that is replaced with the first match from the regex\r\n    *        { path: /(.*\\..*$)/, output: '/static/assets/[match]'}\r\n    *     ]\r\n    *  }\r\n    * ```\r\n    */\r\n   pathMap?: PathMap;\r\n\r\n   /**\r\n    * Optionally provide a custom file loader implementation instead of using the built in ajax (fetch) loader\r\n    * that takes a path and returns file data\r\n    * \r\n    */\r\n   fileLoader?: FileLoader;\r\n\r\n   /**\r\n    * By default `true`, means Tiled files must pass the plugins Typed parse pass.\r\n    *\r\n    * If you have something that the Tiled plugin does not expect, you can set this to false and it will do it's best\r\n    * to parse the Tiled source map file.\r\n    */\r\n   strict?: boolean;\r\n\r\n   /**\r\n    * Configure the text quality to use in Excalibur's Text implementation for the Tiled resources that involve text\r\n    *\r\n    * By default it's 4 for 4x scaled bitmap\r\n    */\r\n   textQuality?: number;\r\n\r\n   /**\r\n    * Configure custom Actor/Entity factory functions to construct Actors/Entities\r\n    * given a Tiled class name.\r\n    */\r\n   entityClassNameFactories?: Record<string, (props: FactoryProps) => Entity | undefined>;\r\n}\r\n\r\nexport interface FactoryProps {\r\n   /**\r\n    * Excalibur world position\r\n    */\r\n   worldPos: Vector;\r\n   /**\r\n    * Tiled name in UI\r\n    */\r\n   name?: string;\r\n   /**\r\n    * Tiled class in UI (internally in Tiled is represented as the string 'type')\r\n    */\r\n   class: string;\r\n   /**\r\n    * Layer (either TileLayer or ObjectLayer) that this object is part of\r\n    */\r\n   layer: Layer;\r\n   /**\r\n    * If using an object layer or a tile object property, the object will be passed.\r\n    */\r\n   object?: PluginObject;\r\n   /**\r\n    * Tiled properties, these are all converted to lowercase keys, and lowercase if the value is a string\r\n    */\r\n   properties: Record<string, any>;\r\n}\r\n\r\nexport class TiledResource implements Loadable<any> {\r\n   private logger = Logger.getInstance();\r\n   /**\r\n    * Currently the latest tested and supported version of Tiled\r\n    * with the Excalibur Tiled plugin\r\n    */\r\n   public static supportedTiledVersion = '1.10.1';\r\n   data: any;\r\n\r\n   /**\r\n    * The original tiled map representation in Tiled JSON/TMJ format\r\n    * \r\n    * If loaded from a Tiled TMX file, it has been converted to the same JSON/TMJ format\r\n    */\r\n   map!: TiledMap;\r\n   /**\r\n    * A list of Tilesets from Tiled in a friendly data structure (original TSX/TSJ is available on that type)\r\n    */\r\n   tilesets: Tileset[] = [];\r\n   /**\r\n    * A list of Templates from Tiled in a friendly data structure (original TX/TJ is available on that type)\r\n    */\r\n   templates: Template[] = [];\r\n   /**\r\n    * A list of Layers from Tiled in a friendly data structure (original layer format is available on that type)\r\n    *\r\n    * Layers can either be an ObjectLayer, TileLayer, or ImageLayer\r\n    *\r\n    * GroupLayers don't exist in the plugin, they are flattened and the proper order preserved.\r\n    */\r\n   layers: Layer[] = [];\r\n\r\n   public readonly mapFormat: 'TMX' | 'TMJ' = 'TMX';\r\n   public readonly strict: boolean = true;\r\n\r\n   public factories = new Map<string, (props: FactoryProps) => Entity | undefined>();\r\n\r\n   public parser = new TiledParser();\r\n\r\n   public fileLoader: FileLoader = FetchLoader;\r\n\r\n   public pathMap: PathMap | undefined;\r\n\r\n   public readonly startZIndex: number = 0;\r\n   public readonly textQuality: number = 4;\r\n   public readonly useExcaliburWiring: boolean = true;\r\n   public readonly useMapBackgroundColor: boolean = false;\r\n   public readonly useTilemapCameraStrategy: boolean = false;\r\n   public readonly headless: boolean = false;\r\n\r\n   private _imageLoader = new LoaderCache(ImageSource);\r\n   private _tilesetLoader = new LoaderCache(TilesetResource);\r\n   private _templateLoader = new LoaderCache(TemplateResource);\r\n   constructor(public readonly path: string, options?: TiledResourceOptions) {\r\n      const {\r\n         mapFormatOverride,\r\n         textQuality,\r\n         entityClassNameFactories,\r\n         useExcaliburWiring,\r\n         useTilemapCameraStrategy,\r\n         useMapBackgroundColor,\r\n         pathMap,\r\n         fileLoader,\r\n         strict,\r\n         headless,\r\n         startZIndex\r\n      } = { ...options };\r\n      this.strict = strict ?? this.strict;\r\n      this.headless = headless ?? this.headless;\r\n      this.useExcaliburWiring = useExcaliburWiring ?? this.useExcaliburWiring;\r\n      this.useTilemapCameraStrategy = useTilemapCameraStrategy ?? this.useTilemapCameraStrategy;\r\n      this.useMapBackgroundColor = useMapBackgroundColor ?? this.useMapBackgroundColor;\r\n      this.textQuality = textQuality ?? this.textQuality;\r\n      this.startZIndex = startZIndex ?? this.startZIndex;\r\n      this.fileLoader = fileLoader ?? this.fileLoader;\r\n      this.pathMap = pathMap;\r\n      for (const key in entityClassNameFactories) {\r\n         this.registerEntityFactory(key, entityClassNameFactories[key]);\r\n      }\r\n      this.mapFormat = mapFormatOverride ?? (path.includes('.tmx') ? 'TMX' : 'TMJ');\r\n   }\r\n\r\n   /**\r\n    * Registers an entity factory to run on load, if added after load it will be run immediately\r\n    * @param className \r\n    * @param factory \r\n    */\r\n   registerEntityFactory(className: string, factory: (props: FactoryProps) => Entity | undefined): void {\r\n      if (this.factories.has(className)) {\r\n         console.warn(`Another factory has already been registered for tiled class/type \"${className}\", this is probably a bug.`);\r\n      }\r\n      this.factories.set(className, factory);\r\n      if (this.isLoaded()) {\r\n         for (let objectLayer of this.getObjectLayers()) {\r\n            objectLayer.runFactory(className);\r\n         }\r\n      }\r\n   }\r\n\r\n   unregisterEntityFactory(className: string) {\r\n      if (!this.factories.has(className)) {\r\n         console.warn(`No factory has been registered for tiled class/type \"${className}\", cannot unregister!`);\r\n      }\r\n      this.factories.delete(className);\r\n   }\r\n\r\n   /**\r\n    * Given a gid, find the Tileset it belongs to in the map!\r\n    * @param gid \r\n    * @returns \r\n    */\r\n   getTilesetForTileGid(gid: number): Tileset {\r\n      const normalizedGid = getCanonicalGid(gid)\r\n      if (this.tilesets) {\r\n         for (let tileset of this.tilesets) {\r\n            if (normalizedGid >= tileset.firstGid && normalizedGid <= tileset.firstGid + tileset.tileCount - 1) {\r\n               return tileset;\r\n            }\r\n         }\r\n      }\r\n      throw Error(`No tileset exists for tiled gid [${gid}] normalized [${normalizedGid}]!`);\r\n   }\r\n\r\n   /**\r\n    * Queries for tilesets in the map by name (case insensitive)\r\n    * @param name \r\n    * @returns \r\n    */\r\n   getTilesetByName(name: string): Tileset[] {\r\n      return this.tilesets.filter(byNameCaseInsensitive(name));\r\n   }\r\n   /**\r\n    * Queries for tilesets in the map by class name (case insensitive)\r\n    * @param className \r\n    * @returns \r\n    */\r\n   getTilesetByClassName(className: string): Tileset[] {\r\n      return this.tilesets.filter(byClassCaseInsensitive(className));\r\n   }\r\n\r\n   /**\r\n    * Queries for tilesets in the map by property and an optional value (case insensitive)\r\n    * @param propertyName \r\n    * @param value \r\n    * @returns \r\n    */\r\n   getTilesetByProperty(propertyName: string, value?: any): Tileset[] {\r\n      return this.tilesets.filter(byPropertyCaseInsensitive(propertyName, value));\r\n   }\r\n\r\n   /**\r\n    * Queries ALL tilesets tile data in the map for a specific class name (case insensitive)\r\n    * @param className \r\n    * @returns \r\n    */\r\n   getTileMetadataByClassName(className: string): Tile[] {\r\n      let results: Tile[] = [];\r\n      for (let tileset of this.tilesets) {\r\n         results = results.concat(tileset.tiles.filter(byClassCaseInsensitive(className)));\r\n      }\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Queries ALL tilesets tile data in the map for a specific property and an optional value (case insensitive)\r\n    * @param name \r\n    * @param value \r\n    * @returns \r\n    */\r\n   getTileMetadataByProperty(name: string, value?: any): Tile[] {\r\n      let results: Tile[] = [];\r\n      for (let tileset of this.tilesets) {\r\n         results = results.concat(tileset.tiles.filter(byPropertyCaseInsensitive(name, value)));\r\n      }\r\n      return results;\r\n   }\r\n\r\n\r\n   /**\r\n    * Queries ALL tile layers tile instances in the map for a specific gid\r\n    * @param className \r\n    * @returns \r\n    */\r\n   getTilesByGid(gid: number): TileInfo[] | IsometricTileInfo[] {\r\n      if (this.map.orientation === 'orthogonal') {\r\n         let results: TileInfo[] = [];\r\n         for (let layer of this.getTileLayers()) {\r\n            results = results.concat(layer.getTilesByGid(gid));\r\n         }\r\n         return results;\r\n      } else {\r\n         let results: IsometricTileInfo[] = [];\r\n         for (let layer of this.getIsoTileLayers()) {\r\n            results = results.concat(layer.getTilesByGid(gid));\r\n         }\r\n         return results;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Queries ALL tile layers tile instances in the map for a specific class name (case insensitive)\r\n    * @param className \r\n    * @returns \r\n    */\r\n   getTilesByClassName(className: string): TileInfo[] | IsometricTileInfo[] {\r\n      if (this.map.orientation === 'orthogonal') {\r\n         let results: TileInfo[] = [];\r\n         for (let layer of this.getTileLayers()) {\r\n            results = results.concat(layer.getTilesByClassName(className));\r\n         }\r\n         return results;\r\n      } else {\r\n         let results: IsometricTileInfo[] = [];\r\n         for (let layer of this.getIsoTileLayers()) {\r\n            results = results.concat(layer.getTilesByClassName(className));\r\n         }\r\n         return results;\r\n      }\r\n   }\r\n\r\n   /**\r\n    *  Queries ALL tile layers tile instances in the map for a specific property and an optional value (case insensitive)\r\n    * @param name \r\n    * @param value \r\n    * @returns \r\n    */\r\n   getTilesByProperty(name: string, value?: any): TileInfo[] | IsometricTileInfo[] {\r\n      if (this.map.orientation === 'orthogonal') {\r\n         let results: TileInfo[] = [];\r\n         for (let layer of this.getTileLayers()) {\r\n            results = results.concat(layer.getTilesByProperty(name, value));\r\n         }\r\n         return results;\r\n      } else {\r\n         let results: IsometricTileInfo[] = [];\r\n         for (let layer of this.getIsoTileLayers()) {\r\n            results = results.concat(layer.getTilesByProperty(name, value));\r\n         }\r\n         return results;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns a tile by the world position from a layer. (Uses the first layer name that matches case insensitive).\r\n    * @param layerName \r\n    * @param worldPos \r\n    * @returns \r\n    */\r\n   getTileByPoint(layerName: string, worldPos: Vector): TileInfo | IsometricTileInfo | null {\r\n      if (this.map.orientation === 'isometric') {\r\n         const layer = this.getIsoTileLayers().find(byNameCaseInsensitive(layerName));\r\n         if (layer) {\r\n            return layer.getTileByPoint(worldPos);\r\n         }\r\n      } else {\r\n         const layer = this.getTileLayers().find(byNameCaseInsensitive(layerName));\r\n         if (layer) {\r\n            return layer.getTileByPoint(worldPos);\r\n         }\r\n      }\r\n\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * Returns a tile by the world position from a layer. (Uses the first layer name that matches case insensitive).\r\n    * @param layerName \r\n    * @param worldPos \r\n    * @returns \r\n    */\r\n   getTilesByPoint(worldPos: Vector): TileInfo[] | IsometricTileInfo[] {\r\n      if (this.map.orientation === 'orthogonal') {\r\n         let results: TileInfo[] = [];\r\n         for (let layer of this.getTileLayers()) {\r\n            const maybeTile = layer.getTileByPoint(worldPos);\r\n            if (maybeTile) {\r\n               results.push(maybeTile);\r\n            }\r\n         }\r\n         return results;\r\n      } else {\r\n         let results: IsometricTileInfo[] = [];\r\n         for (let layer of this.getIsoTileLayers()) {\r\n            const maybeTile = layer.getTileByPoint(worldPos);\r\n            if (maybeTile) {\r\n               results.push(maybeTile);\r\n            }\r\n         }\r\n         return results;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Queries all layers for objects that match a name (case insensitive)\r\n    * @param name \r\n    * @returns \r\n    */\r\n   getObjectsByName(name: string): PluginObject[] {\r\n      let results: PluginObject[] = [];\r\n      for (let objectlayer of this.getObjectLayers()) {\r\n         results = results.concat(objectlayer.getObjectsByName(name));\r\n      }\r\n      return results;\r\n   }\r\n\r\n   getEntitiesByName(name: string): Entity[] {\r\n      let results: Entity[] = [];\r\n      for (let objectlayer of this.getObjectLayers()) {\r\n         results = results.concat(objectlayer.getEntitiesByName(name));\r\n      }\r\n      return results;\r\n   }\r\n\r\n   getEntityByObject(object: PluginObject): Entity | undefined {\r\n      for (let objectlayer of this.getObjectLayers()) {\r\n         const entity = objectlayer.getEntityByObject(object);\r\n         if (entity) {\r\n            return entity;\r\n         }\r\n      }\r\n      return;\r\n   }\r\n\r\n   getObjectByEntity(actor: Entity): PluginObject | undefined {\r\n      for (let objectlayer of this.getObjectLayers()) {\r\n         const object = objectlayer.getObjectByEntity(actor);\r\n         if (object) {\r\n            return object;\r\n         }\r\n      }\r\n      return;\r\n   }\r\n\r\n   /**\r\n    * Search for a tiled object that has a property name, and optionally specify a value\r\n    * @param propertyName \r\n    * @param value \r\n    * @returns \r\n    */\r\n   getObjectsByProperty(propertyName: string, value?: any): PluginObject[] {\r\n      let results: PluginObject[] = [];\r\n      for (let objectlayer of this.getObjectLayers()) {\r\n         results = results.concat(objectlayer.getObjectsByProperty(propertyName, value));\r\n      }\r\n      return results;\r\n   }\r\n   /**\r\n    * Search for actors that were created from tiled objects\r\n    * @returns \r\n    */\r\n   getEntitiesByProperty(propertyName: string, value?: any): Entity[] {\r\n      let results: Entity[] = [];\r\n      for (let objectlayer of this.getObjectLayers()) {\r\n         results = results.concat(objectlayer.getEntitiesByProperty(propertyName, value));\r\n      }\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Search for an Tiled object by it's Tiled class name\r\n    * @returns \r\n    */\r\n   getObjectsByClassName(className: string): PluginObject[] {\r\n      let results: PluginObject[] = [];\r\n      for (let objectlayer of this.getObjectLayers()) {\r\n         results = results.concat(objectlayer.getObjectsByClassName(className));\r\n      }\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Search for an Actor created by the plugin by it's Tiled object\r\n    * @param className \r\n    * @returns \r\n    */\r\n   getEntitiesByClassName(className: string): Entity[] {\r\n      let results: Entity[] = [];\r\n      for (let objectlayer of this.getObjectLayers()) {\r\n         results = results.concat(objectlayer.getEntitiesByClassName(className));\r\n      }\r\n      return results;\r\n   }\r\n\r\n   /**\r\n    * Returns a tile by x, y integer coordinate from a layer. (Uses the first layer name that matches case insensitive).\r\n    * @param layerName \r\n    * @param x \r\n    * @param y \r\n    * @returns \r\n    */\r\n   getTileByCoordinate(layerName: string, x: number, y: number): TileInfo | null {\r\n      const layer = this.getTileLayers().find(byNameCaseInsensitive(layerName));\r\n      if (layer) {\r\n         return layer.getTileByCoordinate(x, y);\r\n      }\r\n\r\n      return null;\r\n   }\r\n\r\n   getImageLayers(name?: string): ImageLayer[] {\r\n      const layers = this.layers.filter(l => l instanceof ImageLayer) as ImageLayer[];\r\n      if (name) {\r\n         return layers.filter(byNameCaseInsensitive(name));\r\n      }\r\n      return layers;\r\n   }\r\n\r\n   getTileLayers(name?: string): TileLayer[] {\r\n      const layers = this.layers.filter(l => l instanceof TileLayer) as TileLayer[];\r\n      if (name) {\r\n         return layers.filter(byNameCaseInsensitive(name));\r\n      }\r\n      return layers;\r\n   }\r\n\r\n   getIsoTileLayers(name?: string): IsoTileLayer[] {\r\n      const layers = this.layers.filter(l => l instanceof IsoTileLayer) as IsoTileLayer[];\r\n      if (name) {\r\n         return layers.filter(byNameCaseInsensitive(name));\r\n      }\r\n      return layers;\r\n   }\r\n\r\n   getObjectLayers(name?: string): ObjectLayer[] {\r\n      const layers = this.layers.filter(l => l instanceof ObjectLayer) as ObjectLayer[];\r\n      if (name) {\r\n         return layers.filter(byNameCaseInsensitive(name));\r\n      }\r\n      return layers;\r\n   }\r\n\r\n   getLayersByName(name: string): Layer[] {\r\n      return this.layers.filter(byNameCaseInsensitive(name));\r\n   }\r\n\r\n   getLayersByClassName(className: string): Layer[] {\r\n      return this.layers.filter(byClassCaseInsensitive(className));\r\n   }\r\n\r\n   getLayersByProperty(propertyName: string, value?: any): Layer[] {\r\n      return this.layers.filter(byPropertyCaseInsensitive(propertyName, value));\r\n   }\r\n\r\n   private _parseMap(data: any) {\r\n      if (this.mapFormat === 'TMX') {\r\n         return this.parser.parse(data, this.strict);\r\n      } else {\r\n         return data as TiledMap;\r\n      }\r\n   }\r\n\r\n   async load(): Promise<any> {\r\n      const data = await this.fileLoader(this.path, this.mapFormat === 'TMX' ? 'xml' : 'json');\r\n\r\n      // Parse initial Tiled map structure\r\n      let map: TiledMap;\r\n      if (this.strict) {\r\n         try {\r\n            map = this._parseMap(data);\r\n         } catch (e) {\r\n            console.error(`Could not parse tiled map from location ${this.path}, attempted to interpret as ${this.mapFormat}.\\nExcalibur only supports the latest version of Tiled formats as of the plugin's release.`);\r\n            console.error(`Is your map file corrupted or being interpreted as the wrong type?`)\r\n            throw e;\r\n         }\r\n      } else {\r\n         map = this._parseMap(data);\r\n      }\r\n\r\n      if (compare(TiledResource.supportedTiledVersion, map.tiledversion ?? '0.0.0', \">\")) {\r\n         console.warn(`The excalibur tiled plugin officially supports ${TiledResource.supportedTiledVersion}+, the current map has tiled version ${map.tiledversion}`)\r\n      }\r\n\r\n      this.map = map;\r\n\r\n      this._collectTilesets();\r\n      this._collectTemplates();\r\n\r\n      // Load all the stuff!\r\n      await Promise.all([\r\n         this._tilesetLoader.load(),\r\n         (this.headless ? Promise.resolve() : this._imageLoader.load()),\r\n         this._templateLoader.load()\r\n      ]);\r\n\r\n      // Friendly data structures are needed before layer parsing\r\n      this.tilesets = [...this.tilesets, ...this._tilesetLoader.values().map(t => t.data)];\r\n      this.templates = this._templateLoader.values().map(t => t.data);\r\n\r\n      // Layers\r\n      let friendlyLayers: Layer[] = [];\r\n      let order = this.startZIndex;\r\n      for (const layer of this.map.layers) {\r\n         if (layer.type === 'tilelayer') {\r\n            if (this.map.orientation === 'isometric') {\r\n               const isolayer = new IsoTileLayer(layer, this, order);\r\n               friendlyLayers.push(isolayer);\r\n            }\r\n            if (this.map.orientation === 'orthogonal') {\r\n               const tilelayer = new TileLayer(layer, this, order);\r\n               friendlyLayers.push(tilelayer);\r\n            }\r\n         }\r\n         if (layer.type === 'objectgroup') {\r\n            const objectlayer = new ObjectLayer(layer, this, order);\r\n            friendlyLayers.push(objectlayer);\r\n         }\r\n         if (layer.type === 'imagelayer') {\r\n            const imagelayer = new ImageLayer(layer, this, order);\r\n            friendlyLayers.push(imagelayer);\r\n         }\r\n         order++;\r\n      }\r\n      // Layer loading depends on data from previous load step\r\n      await Promise.all(friendlyLayers.map(layer => layer.load()));\r\n      this.layers = friendlyLayers;\r\n   }\r\n\r\n   private _collectTilesets() {\r\n      // Resolve initial tilesets either embedded or external\r\n      for (const tileset of this.map.tilesets) {\r\n         // Embedded are technically already loaded\r\n         if (isTiledTilesetEmbedded(tileset)) {\r\n            if (isTiledTilesetSingleImage(tileset)) {\r\n               const imagePath = pathRelativeToBase(this.path, tileset.image, this.pathMap);\r\n               const image = this._imageLoader.getOrAdd(imagePath);\r\n               const friendlyTileset = new Tileset({\r\n                  name: tileset.name,\r\n                  tiledTileset: tileset,\r\n                  image,\r\n                  firstGid: tileset.firstgid!\r\n               });\r\n               this.tilesets.push(friendlyTileset);\r\n            }\r\n            if (isTiledTilesetCollectionOfImages(tileset)) {\r\n               const tileToImage = new Map<TiledTile, ImageSource>();\r\n               if (tileset.tiles) {\r\n                  for (let tile of tileset.tiles) {\r\n                     if (tile.image) {\r\n                        const imagePath = pathRelativeToBase(this.path, tile.image, this.pathMap);\r\n                        const image = this._imageLoader.getOrAdd(imagePath);\r\n                        tileToImage.set(tile, image);\r\n                     }\r\n                  }\r\n               }\r\n               const friendlyTileset = new Tileset({\r\n                  name: tileset.name,\r\n                  tiledTileset: tileset,\r\n                  tileToImage,\r\n                  firstGid: tileset.firstgid!\r\n               });\r\n               this.tilesets.push(friendlyTileset);\r\n            }\r\n         }\r\n         if (isTiledTilesetExternal(tileset)) {\r\n            const sourcePath = pathRelativeToBase(this.path, tileset.source, this.pathMap);\r\n            this._tilesetLoader.getOrAdd(sourcePath, tileset.firstgid,\r\n               {\r\n                  strict: this.strict,\r\n                  headless: this.headless,\r\n                  parser: this.parser,\r\n                  fileLoader: this.fileLoader,\r\n                  imageLoader: this._imageLoader,\r\n                  pathMap: this.pathMap\r\n               } satisfies TilesetResourceOptions);\r\n         }\r\n      }\r\n   }\r\n\r\n   private _collectTemplates() {\r\n      // Scan for template references in object files\r\n      let templates: string[] = [];\r\n      for (const layer of this.map.layers) {\r\n         if (layer.type === 'objectgroup') {\r\n            let templateObjects = layer.objects.filter(o => o.template).map(o => o.template) as string[];\r\n            templates = templates.concat(templateObjects);\r\n         }\r\n      }\r\n      // unique template paths\r\n      const uniqueTemplatePaths = templates.filter((value, index, array) => {\r\n         return array.findIndex(path => path === value) === index;\r\n      });\r\n\r\n      // Load Friendly templates\r\n      for (const templatePath of uniqueTemplatePaths) {\r\n         const mappedPath = pathRelativeToBase(this.path, templatePath, this.pathMap);\r\n         this._templateLoader.getOrAdd(mappedPath, {\r\n            strict: this.strict,\r\n            headless: this.headless,\r\n            parser: this.parser,\r\n            fileLoader: this.fileLoader,\r\n            imageLoader: this._imageLoader,\r\n            pathMap: this.pathMap\r\n         } satisfies TemplateResourceOptions)\r\n      }\r\n   }\r\n\r\n   addToScene(scene: Scene, options?: TiledAddToSceneOptions) {\r\n      if (!this.isLoaded()) {\r\n         this.logger.warn(`TiledResource ${this.path} is not loaded! Nothing will be wired into excalibur!`);\r\n         return;\r\n      }\r\n      const defaultOptions: TiledAddToSceneOptions = {\r\n         pos: vec(0, 0)\r\n      };\r\n      const { pos } = { ...defaultOptions, ...options };\r\n      for (const layer of this.layers) {\r\n         if (layer instanceof TileLayer) {\r\n            layer.tilemap.pos = layer.tilemap.pos.add(pos);\r\n            scene.add(layer.tilemap);\r\n         }\r\n         if (layer instanceof IsoTileLayer) {\r\n            scene.add(layer.isometricMap);\r\n         }\r\n         if (layer instanceof ObjectLayer) {\r\n            for (const entity of layer.entities) {\r\n               const tx = entity.get(TransformComponent);\r\n               if (tx) {\r\n                  tx.pos = tx.pos.add(pos);\r\n               }\r\n               scene.add(entity);\r\n            }\r\n         }\r\n         if (layer instanceof ImageLayer) {\r\n            if (layer.imageActor) {\r\n               layer.imageActor.pos = layer.imageActor.pos.add(pos);\r\n               scene.add(layer.imageActor);\r\n            }\r\n         }\r\n      }\r\n\r\n      if (this.useExcaliburWiring) {\r\n         const objects = this.getObjectsByProperty(ExcaliburTiledProperties.Camera.Camera, true);\r\n         if (objects && objects.length) {\r\n            const cameraObject = objects[0];\r\n            let zoom = 1;\r\n            const zoomProp = cameraObject.properties.get(ExcaliburTiledProperties.Camera.Zoom);\r\n            if (zoomProp && typeof zoomProp === 'number') {\r\n               zoom = zoomProp;\r\n            }\r\n\r\n            if (this.map.orientation === 'isometric') {\r\n               scene.camera.pos = this.isometricTiledCoordToWorld(cameraObject.x, cameraObject.y);\r\n            } else {\r\n               scene.camera.pos = vec(cameraObject.x, cameraObject.y);\r\n            }\r\n            scene.camera.zoom = zoom;\r\n         }\r\n      }\r\n\r\n      if (this.useTilemapCameraStrategy) {\r\n         const firstLayer = this.getTileLayers()[0];\r\n         if (firstLayer) {\r\n            const mapBounds = BoundingBox.fromDimension(\r\n               this.map.width * this.map.tilewidth,\r\n               this.map.height * this.map.tileheight,\r\n               Vector.Zero, pos.add(firstLayer.tilemap.pos));\r\n            scene.camera.strategy.limitCameraBounds(mapBounds);\r\n         }\r\n      }\r\n\r\n      if (this.useMapBackgroundColor) {\r\n         if (this.map.backgroundcolor) {\r\n            scene.backgroundColor = Color.fromHex(this.map.backgroundcolor);\r\n         }\r\n      }\r\n   }\r\n\r\n   isometricTiledCoordToWorld(x: number, y: number): Vector {\r\n      // Transformation sourced from:\r\n      // https://discourse.mapeditor.org/t/how-to-get-cartesian-coords-of-objects-from-tileds-isometric-map/4623/3\r\n      const originX = 0;\r\n      const tileWidth = this.map.tilewidth;\r\n      const tileHeight = this.map.tileheight;\r\n      const tileY = y / tileHeight;\r\n      const tileX = x / tileHeight;\r\n      return vec(\r\n         (tileX - tileY) * tileWidth / 2 + originX,\r\n         (tileX + tileY) * tileHeight / 2);\r\n   }\r\n\r\n   isLoaded(): boolean {\r\n      return !!this.map;\r\n   }\r\n}", "import { ImageSource, Loadable } from \"excalibur\";\r\nimport { Tileset } from \"./tileset\";\r\nimport { TiledParser, TiledTile, TiledTilesetFile, isTiledTilesetCollectionOfImages, isTiledTilesetSingleImage } from \"../parser/tiled-parser\";\r\nimport { FetchLoader, FileLoader } from \"./file-loader\";\r\nimport { PathMap, pathRelativeToBase } from \"./path-util\";\r\nimport { LoaderCache } from \"./loader-cache\";\r\n\r\nexport interface TilesetResourceOptions {\r\n   orientation?: 'isometric' | 'orthogonal';\r\n   headless?: boolean;\r\n   strict?: boolean;\r\n   parser?: TiledParser;\r\n   fileLoader?: FileLoader;\r\n   imageLoader?: LoaderCache<ImageSource>;\r\n   pathMap?: PathMap;\r\n}\r\n\r\nexport class TilesetResource implements Loadable<Tileset> {\r\n   data!: Tileset;\r\n   public readonly firstGid: number;\r\n   public readonly strict: boolean = true;\r\n   public readonly headless: boolean = false;\r\n   public readonly orientation: 'isometric' | 'orthogonal' = 'orthogonal';\r\n\r\n   private fileLoader: FileLoader = FetchLoader;\r\n   private imageLoader: LoaderCache<ImageSource>;\r\n   private pathMap?: PathMap;\r\n   private parser: TiledParser;\r\n\r\n   constructor(public path: string, firstGid: number, options?: TilesetResourceOptions) {\r\n      const { fileLoader, parser, pathMap, imageLoader, strict, headless, orientation } = { ...options };\r\n      this.headless = headless ?? this.headless;\r\n      this.orientation = orientation ?? this.orientation;\r\n      this.strict = strict ?? this.strict;\r\n      this.fileLoader = fileLoader ?? this.fileLoader;\r\n      this.imageLoader = imageLoader ?? new LoaderCache(ImageSource);\r\n      this.parser = parser ?? new TiledParser();\r\n      this.firstGid = firstGid;\r\n      this.pathMap = pathMap;\r\n   }\r\n\r\n   async load(): Promise<Tileset> {\r\n      const tilesetType = this.path.includes('.tsx') ? 'xml' : 'json';\r\n      try {\r\n         const tilesetData = await this.fileLoader(this.path, tilesetType);\r\n         let tileset: TiledTilesetFile;\r\n\r\n         if (tilesetType === 'json') {\r\n            // Verify TMJ is correct\r\n            if (this.strict) {\r\n               tileset = TiledTilesetFile.parse(tilesetData);\r\n            } else {\r\n               tileset = tilesetData as TiledTilesetFile;\r\n            }\r\n         } else {\r\n            // Parse & Verify TMX tileset\r\n            tileset = this.parser.parseExternalTileset(tilesetData, this.strict);\r\n         }\r\n\r\n         if (isTiledTilesetSingleImage(tileset)) {\r\n            const imagePath = pathRelativeToBase(this.path, tileset.image, this.pathMap);\r\n            const image = this.headless ? undefined : this.imageLoader.getOrAdd(imagePath);\r\n            this.data = new Tileset({\r\n               name: tileset.name,\r\n               tiledTileset: tileset,\r\n               firstGid: this.firstGid,\r\n               ...({ image }),\r\n            });\r\n         }\r\n\r\n         if (isTiledTilesetCollectionOfImages(tileset)) {\r\n            const tileToImage = this.headless ? undefined : new Map<TiledTile, ImageSource>();\r\n            if (tileToImage) {\r\n               const images: ImageSource[] = [];\r\n               if (tileset.tiles) {\r\n                  for (let tile of tileset.tiles) {\r\n                     if (tile.image) {\r\n                        const imagePath = pathRelativeToBase(this.path, tile.image, this.pathMap);\r\n                        const image = this.imageLoader.getOrAdd(imagePath);\r\n                        tileToImage.set(tile, image);\r\n                        images.push(image);\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n\r\n            tileset.firstgid = this.firstGid;\r\n            this.data = new Tileset({\r\n               name: tileset.name,\r\n               tiledTileset: tileset,\r\n               firstGid: this.firstGid,\r\n               ...({ tileToImage }),\r\n            });\r\n         }\r\n\r\n         if (!this.headless) {\r\n            await this.imageLoader.load();\r\n         }\r\n\r\n         if (this.data) {\r\n            return this.data\r\n         }\r\n\r\n      } catch (e) {\r\n         console.error(`Could not load tileset at path ${this.path}`);\r\n         throw e;\r\n      }\r\n      throw new Error(`No tileset at path ${this.path}`);\r\n   }\r\n\r\n   isLoaded(): boolean {\r\n      return !!this.data;\r\n   }\r\n}\r\n", "import { AffineMatrix, Collider, Animation, Frame, Graphic, Shape, Sprite, SpriteSheet, Vector, vec, AnimationStrategy, ImageSource, BoundingBox } from \"excalibur\";\r\nimport { getCanonicalGid, isFlippedDiagonally, isFlippedHorizontally, isFlippedVertically } from \"./gid-util\";\r\nimport { TiledTile, TiledTileset, isTiledTilesetCollectionOfImages, isTiledTilesetSingleImage } from \"../parser/tiled-parser\";\r\nimport { Ellipse, Polygon, Rectangle, parseObjects } from \"./objects\";\r\nimport { Properties, mapProps } from \"./properties\";\r\nimport { PluginObject } from \"./objects\";\r\nimport { byClassCaseInsensitive, byPropertyCaseInsensitive } from \"./filter-util\";\r\n\r\n\r\nexport interface TileOptions {\r\n   id: number;\r\n   tileset: Tileset;\r\n   tiledTile: TiledTile;\r\n   image?: ImageSource;\r\n}\r\n\r\n/**\r\n * Friendly plugin representation of tiled Tile\r\n */\r\nexport class Tile implements Properties {\r\n   id: number;\r\n   tileset: Tileset;\r\n   tiledTile: TiledTile;\r\n   class?: string;\r\n   graphic?: Graphic;\r\n   objects: PluginObject[] = [];\r\n   colliders: Collider[] = [];\r\n   animation: { tileid: number, duration: number }[] = [];\r\n   properties = new Map<string, string | number | boolean>()\r\n   constructor(options: TileOptions) {\r\n      const { id, tileset, tiledTile } = options;\r\n      this.id = id;\r\n      this.tileset = tileset;\r\n      this.tiledTile = tiledTile;\r\n      this.class = tiledTile.type;\r\n\r\n      mapProps(this, tiledTile.properties);\r\n\r\n      if (tiledTile.objectgroup && tiledTile.objectgroup.objects) {\r\n         this.objects = parseObjects(tiledTile.objectgroup);\r\n      }\r\n\r\n      if (tiledTile.animation) {\r\n         this.animation = tiledTile.animation;\r\n      }\r\n\r\n   }\r\n}\r\n\r\nexport interface TilesetOptions {\r\n   name: string;\r\n   tiledTileset: TiledTileset;\r\n   firstGid: number;\r\n   image?: ImageSource;\r\n   tileToImage?: Map<TiledTile, ImageSource>;\r\n}\r\n\r\n/**\r\n * Friendly plugin representation of Tiled tilesets\r\n */\r\nexport class Tileset implements Properties {\r\n   // FIXME fill mode\r\n   name: string;\r\n   class?: string;\r\n   firstGid = -1;\r\n   tileCount: number = 0;\r\n   tiledTileset: TiledTileset;\r\n   tileWidth: number = 0;\r\n   tileHeight: number = 0;\r\n   tileOffset: Vector = vec(0, 0);\r\n   spritesheet!: SpriteSheet;\r\n   tiles: Tile[] = [];\r\n   objectalignment: string = 'bottomleft';\r\n   orientation: 'isometric' | 'orthogonal' = 'orthogonal';\r\n   properties = new Map<string, string | number | boolean>();\r\n\r\n   horizontalFlipTransform!: AffineMatrix;\r\n   verticalFlipTransform!: AffineMatrix;\r\n   diagonalFlipTransform!: AffineMatrix;\r\n\r\n   constructor(options: TilesetOptions) {\r\n      const { name, tiledTileset, image, tileToImage, firstGid } = options;\r\n      this.name = name;\r\n      this.tiledTileset = tiledTileset;\r\n      this.firstGid = firstGid;\r\n\r\n      if (isTiledTilesetSingleImage(tiledTileset)) {\r\n         mapProps(this, tiledTileset.properties);\r\n         const spacing = tiledTileset.spacing;\r\n         const columns = Math.floor((tiledTileset.imagewidth + spacing) / (tiledTileset.tilewidth + spacing));\r\n         const rows = Math.floor((tiledTileset.imageheight + spacing) / (tiledTileset.tileheight + spacing));\r\n         this.class = tiledTileset.class;\r\n         this.orientation = tiledTileset.grid?.orientation ?? 'orthogonal';\r\n         this.horizontalFlipTransform = AffineMatrix.identity().translate(tiledTileset.tilewidth, 0).scale(-1, 1);\r\n         this.verticalFlipTransform = AffineMatrix.identity().translate(0, tiledTileset.tileheight).scale(1, -1);\r\n         this.diagonalFlipTransform = AffineMatrix.identity().translate(0, 0).rotate(-Math.PI / 2).scale(-1, 1);\r\n         this.objectalignment = tiledTileset.objectalignment ?? (this.orientation === 'orthogonal' ? 'bottomleft' : 'bottom');\r\n         if (image) {\r\n            this.spritesheet =  SpriteSheet.fromImageSource({\r\n               image,\r\n               grid: {\r\n                  rows,\r\n                  columns,\r\n                  spriteWidth: tiledTileset.tilewidth,\r\n                  spriteHeight: tiledTileset.tileheight\r\n               },\r\n               spacing: {\r\n                  originOffset: {\r\n                     x: tiledTileset.margin ?? 0,\r\n                     y: tiledTileset.margin ?? 0\r\n                  },\r\n                  margin: {\r\n                     x: tiledTileset.spacing ?? 0,\r\n                     y: tiledTileset.spacing ?? 0\r\n                  }\r\n               }\r\n            });\r\n         }\r\n         this.tileCount = tiledTileset.tilecount;\r\n         this.tileWidth = tiledTileset.tilewidth;\r\n         this.tileHeight = tiledTileset.tileheight;\r\n         if (tiledTileset.tileoffset) {\r\n            this.tileOffset = vec(tiledTileset.tileoffset.x, tiledTileset.tileoffset.y);\r\n         }\r\n         if (tiledTileset.tiles) {\r\n            for (const tile of tiledTileset.tiles) {\r\n               this.tiles.push(new Tile({\r\n                  id: tile.id,\r\n                  tileset: this,\r\n                  tiledTile: tile,\r\n                  ...({ image })\r\n               }))\r\n            }\r\n         }\r\n      }\r\n      if (isTiledTilesetCollectionOfImages(tiledTileset) && tiledTileset.firstgid !== undefined) {\r\n         this.horizontalFlipTransform = AffineMatrix.identity().translate(tiledTileset.tilewidth, 0).scale(-1, 1);\r\n         this.verticalFlipTransform = AffineMatrix.identity().translate(0, tiledTileset.tileheight).scale(1, -1);\r\n         this.diagonalFlipTransform = AffineMatrix.identity().translate(0, 0).rotate(-Math.PI / 2).scale(-1, 1);\r\n         this.objectalignment = tiledTileset.objectalignment ?? (this.orientation === 'orthogonal' ? 'bottomleft' : 'bottom');\r\n         this.orientation = tiledTileset.grid?.orientation ?? 'orthogonal';\r\n         this.tileCount = tiledTileset.tilecount;\r\n         this.tileWidth = tiledTileset.tilewidth;\r\n         this.tileHeight = tiledTileset.tileheight;\r\n         if (tiledTileset.tileoffset) {\r\n            this.tileOffset = vec(tiledTileset.tileoffset.x, tiledTileset.tileoffset.y);\r\n         }\r\n         let sprites: Sprite[] = []\r\n         if (tiledTileset.tiles) {\r\n            for (const tile of tiledTileset.tiles) {\r\n               const image = tileToImage?.get(tile);\r\n               if (image) {\r\n                  sprites.push(image.toSprite())\r\n               }\r\n               this.tiles.push(new Tile({\r\n                  id: tile.id,\r\n                  tileset: this,\r\n                  tiledTile: tile,\r\n                  ...({ image })\r\n               }))\r\n            }\r\n         }\r\n         if (tileToImage) {\r\n            this.spritesheet = new SpriteSheet({ sprites });\r\n         }\r\n      }\r\n   }\r\n\r\n   getTilesetAlignmentAnchor(overrideAlignment?: string) {\r\n      // https://doc.mapeditor.org/en/stable/manual/editing-tilesets/#tileset-properties\r\n      switch(overrideAlignment ?? this.objectalignment) {\r\n         case 'topleft' : {\r\n            return vec(0, 0);\r\n         }\r\n         case 'top' : {\r\n            return vec(0.5, 0);\r\n         }\r\n         case 'topright' : {\r\n            return vec(1, 0);\r\n         }\r\n         case 'left' : {\r\n            return vec(0, .5);\r\n         }\r\n         case 'center' : {\r\n            return vec(0.5, 0.5);\r\n         }\r\n         case 'right' : {\r\n            return vec(1, .5);\r\n         }\r\n         case 'bottomleft' : {\r\n            return vec(0, 1);\r\n         }\r\n         case 'bottom' : {\r\n            return vec(0.5, 1);\r\n         }\r\n         case 'bottomright' : {\r\n            return vec(1, 1);\r\n         }\r\n         default: { // default is bottom left\r\n            return vec(0, 1);\r\n         }\r\n      }\r\n   }\r\n\r\n\r\n   /**\r\n    * Returns any specially configured tiles by gid, Tiled assigns a different id to tiles\r\n    * this helps retrieve tiles by a more common id\r\n    * @param gid\r\n    */\r\n   getTileByGid(gid: number): Tile | undefined {\r\n      const normalizedGid = getCanonicalGid(gid);\r\n      const tileIndex = normalizedGid - this.firstGid;\r\n      const tile = this.tiles.find(t => t.id === tileIndex);\r\n      return tile;\r\n   }\r\n\r\n   getTilesByClassName(className: string): Tile[] {\r\n      return this.tiles.filter(byClassCaseInsensitive(className));\r\n   }\r\n\r\n   getTilesByProperty(name: string, value?: any): Tile[] {\r\n      return this.tiles.filter(byPropertyCaseInsensitive(name, value));\r\n   }\r\n\r\n   getSpriteForGid(gid: number): Sprite {\r\n      const h = isFlippedHorizontally(gid);\r\n      const v = isFlippedVertically(gid);\r\n      const d = isFlippedDiagonally(gid);\r\n      const normalizedGid = getCanonicalGid(gid);\r\n      const spriteIndex = normalizedGid - this.firstGid;\r\n      if (this.spritesheet) {\r\n         let sprite = this.spritesheet.sprites[spriteIndex];\r\n         if (d || h || v) {\r\n            sprite = sprite.clone();\r\n         }\r\n         // See https://github.com/mapeditor/tiled/issues/2119#issuecomment-491533214\r\n         if (d) {\r\n            sprite.rotation = -Math.PI / 2;\r\n            sprite.scale = vec(-1, 1);\r\n         }\r\n         if (h) {\r\n            sprite.scale = vec((d ? 1 : -1) * sprite.scale.x, (d ? -1 : 1) * sprite.scale.y);\r\n         }\r\n         if (v) {\r\n            sprite.scale = vec((d ? -1 : 1) * sprite.scale.x, (d ? 1 : -1) * sprite.scale.y);\r\n         }\r\n         return sprite;\r\n      }\r\n      throw new Error(`Tileset: [${this.name}] Could not find sprite for gid: [${gid}] normalized gid: [${normalizedGid}]`);\r\n   }\r\n\r\n   private _isometricTiledCoordToWorld(isoCoord: Vector): Vector {\r\n      // Transformation sourced from:\r\n      // https://discourse.mapeditor.org/t/how-to-get-cartesian-coords-of-objects-from-tileds-isometric-map/4623/3\r\n      const originX = 0;\r\n      const tileWidth = this.tileWidth;\r\n      // This is slightly different in tilesets because the grid aligns with actual image rectangles\r\n      // Tiled Resource DOES not, and aligns with the \"logical\" height\r\n      const halftileHeight = this.tileHeight / 2; \r\n      const tileY = isoCoord.y / halftileHeight;\r\n      const tileX = isoCoord.x / halftileHeight;\r\n      return vec(\r\n         (tileX - tileY) * tileWidth / 2 + originX,\r\n         (tileX + tileY) * halftileHeight / 2);\r\n   }\r\n\r\n   /**\r\n    * Returns any excalibur colliders setup for a Tile by gid\r\n    * \r\n    * By default it returns the collider in local coordinates, but sometimes you might need the collider in world coordinates\r\n    *\r\n    * Currently only supports Polygons, Boxes, and Ellipses*\r\n    *\r\n    * - Note: Ellipses can only be circles, the minimum dimension will be used to make a circle.\r\n    * @param gid\r\n    */\r\n   getCollidersForGid(gid: number, options?: { anchor?: Vector, scale?: Vector, orientationOverride?: 'isometric' | 'orthogonal', offset?: Vector }): Collider[] {\r\n      let { anchor, scale, orientationOverride, offset } = {\r\n         anchor: Vector.Zero,\r\n         scale: Vector.One,\r\n         offset: Vector.Zero,\r\n         orientationOverride: undefined,\r\n         ...options\r\n      };\r\n      const orientation = orientationOverride ?? this.orientation;\r\n      const tile = this.getTileByGid(gid);\r\n      const result: Collider[] = [];\r\n      if (tile && tile.objects) {\r\n         for (let object of tile.objects) {\r\n            if (object instanceof Polygon) {\r\n               // This is the offset into the first point (local space)\r\n               let points = object.points.map(p => p.scale(scale));\r\n               points = this._applyFlipsToPoints(points, gid);\r\n               if (orientation === 'isometric') {\r\n                  points = points.map(p => this._isometricTiledCoordToWorld(p));\r\n               }\r\n               points = points.map(p => p.add(offset));\r\n               let poly = Shape.Polygon(points, Vector.Zero, true);\r\n               if (!poly.isConvex()) {\r\n                  result.push(poly.triangulate());\r\n               } else {\r\n                  result.push(poly);\r\n               }\r\n            }\r\n            if (object instanceof Rectangle) {\r\n               const bb = BoundingBox.fromDimension(\r\n                  object.width * scale.x,\r\n                  object.height * scale.y,\r\n                  anchor);\r\n               let points = bb.getPoints().map(p => p.add(vec(object.x, object.y)));\r\n               if (orientation === 'isometric') {\r\n                  points = points.map(p => this._isometricTiledCoordToWorld(p));\r\n               }\r\n               points = this._applyFlipsToPoints(points, gid);\r\n               points = points.map(p => p.add(offset));\r\n               const box = Shape.Polygon(points);\r\n               result.push(box);\r\n            }\r\n            if (object instanceof Ellipse) {\r\n               // This is the offset into the first point (local space)\r\n               let offsetPoint = vec(object.x, object.y);\r\n               if (orientation === 'isometric') {\r\n                  offsetPoint = this._isometricTiledCoordToWorld(offsetPoint);\r\n               }\r\n               offsetPoint = offsetPoint.add(offset);\r\n               const radius = Math.min(object.width / 2, object.height / 2);\r\n               const circle = Shape.Circle(radius, offsetPoint.scale(scale));\r\n               result.push(circle);\r\n            }\r\n         }\r\n      }\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * Transforms points based on any gid transformations\r\n    * @param points\r\n    * @param gid\r\n    */\r\n   private _applyFlipsToPoints(points: Vector[], gid: number): Vector[] {\r\n      const h = isFlippedHorizontally(gid);\r\n      const v = isFlippedVertically(gid);\r\n      const d = isFlippedDiagonally(gid);\r\n      if (d) {\r\n         points = points.map(p => this.diagonalFlipTransform.multiply(p));\r\n      }\r\n      if (h) {\r\n         points = points.map(p => this.horizontalFlipTransform.multiply(p));\r\n      }\r\n      if (v) {\r\n         points = points.map(p => this.verticalFlipTransform.multiply(p));\r\n      }\r\n      return points;\r\n   }\r\n\r\n   public getAnimationForGid(gid: number): Animation | null {\r\n      const tile = this.getTileByGid(gid);\r\n      if (tile && tile.animation?.length) {\r\n         let exFrames: Frame[] = [];\r\n         for (let frame of tile.animation) {\r\n            exFrames.push({\r\n               graphic: this.getSpriteForGid(frame.tileid + this.firstGid),\r\n               duration: frame.duration\r\n            });\r\n         }\r\n         return new Animation({\r\n            frames: exFrames,\r\n            strategy: AnimationStrategy.Loop\r\n         });\r\n      }\r\n      return null;\r\n   }\r\n}", "module.exports = __WEBPACK_EXTERNAL_MODULE_excalibur__;", "if(typeof __WEBPACK_EXTERNAL_MODULE_jsdom__ === 'undefined') { var e = new Error(\"Cannot find module 'jsdom'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_jsdom__;", "var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: issueData.message || errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            getErrorMap(),\n            errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            syncPairs.push({\n                key: await pair.key,\n                value: await pair.value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        if (typeof ctx.data === \"undefined\") {\n            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };\n        }\n        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this, this._def);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[a-z][a-z0-9]*$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\nconst ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;\nconst ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\n// Adapted from https://stackoverflow.com/a/3143231\nconst datetimeRegex = (args) => {\n    if (args.precision) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}Z$`);\n        }\n    }\n    else if (args.precision === 0) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$`);\n        }\n    }\n    else {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$`);\n        }\n    }\n};\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            }\n            //\n            );\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * @deprecated Use z.string().min(1) instead.\n     * @see {@link ZodString.min}\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = BigInt(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    syncPairs.push({\n                        key,\n                        value: await pair.value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return Object.keys(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else {\n        return null;\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (this._def.values.indexOf(input.data) === -1) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values) {\n        return ZodEnum.create(values);\n    }\n    exclude(values) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (nativeEnumValues.indexOf(input.data) === -1) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.issues.length) {\n                return {\n                    status: \"dirty\",\n                    value: ctx.data,\n                };\n            }\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then((processed) => {\n                    return this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                });\n            }\n            else {\n                return this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc\n            // effect: RefinementEffect<any>\n            ) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        if (isValid(result)) {\n            result.value = Object.freeze(result.value);\n        }\n        return result;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\nconst custom = (check, params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) => {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            if (!check(data)) {\n                const p = typeof params === \"function\"\n                    ? params(data)\n                    : typeof params === \"string\"\n                        ? { message: params }\n                        : params;\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n            }\n        });\n    return ZodAny.create();\n};\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n", "let init;\nlet instance;\nlet heap;\nconst IMPORT_OBJECT = {\n  env: {\n    emscripten_notify_memory_growth: function (index) {\n      heap = new Uint8Array(instance.exports.memory.buffer);\n    }\n  }\n};\n/**\r\n * ZSTD (Zstandard) decoder.\r\n */\nclass ZSTDDecoder {\n  init() {\n    if (init) return init;\n    if (typeof fetch !== 'undefined') {\n      // Web.\n      init = fetch('data:application/wasm;base64,' + wasm).then(response => response.arrayBuffer()).then(arrayBuffer => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);\n    } else {\n      // Node.js.\n      init = WebAssembly.instantiate(Buffer.from(wasm, 'base64'), IMPORT_OBJECT).then(this._init);\n    }\n    return init;\n  }\n  _init(result) {\n    instance = result.instance;\n    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0); // initialize heap.\n  }\n\n  decode(array, uncompressedSize = 0) {\n    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);\n    // Write compressed data into WASM memory.\n    const compressedSize = array.byteLength;\n    const compressedPtr = instance.exports.malloc(compressedSize);\n    heap.set(array, compressedPtr);\n    // Decompress into WASM memory.\n    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));\n    const uncompressedPtr = instance.exports.malloc(uncompressedSize);\n    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);\n    // Read decompressed data and free WASM memory.\n    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);\n    instance.exports.free(compressedPtr);\n    instance.exports.free(uncompressedPtr);\n    return dec;\n  }\n}\n/**\r\n * BSD License\r\n *\r\n * For Zstandard software\r\n *\r\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n *  * Neither the name Facebook nor the names of its contributors may be used to\r\n *    endorse or promote products derived from this software without specific\r\n *    prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\n// wasm:begin\nconst wasm = '';\n// wasm:end\n\nexport { ZSTDDecoder };\n//# sourceMappingURL=zstddec.modern.js.map\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};", "// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};", "__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))", "// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],
  "mappings": "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",
  "names": ["root", "factory", "exports", "module", "require", "e", "define", "amd", "self", "__WEBPACK_EXTERNAL_MODULE_jsdom__", "__WEBPACK_EXTERNAL_MODULE_excalibur__", "compare", "v1", "v2", "operator", "assertValidOperator", "res", "A", "compareVersions", "operatorResMap", "includes", "allowedOperators", "Object", "keys", "op", "TypeError", "indexOf", "Error", "join", "t", "i", "s", "n1", "validateAndParse", "n2", "p1", "pop", "p2", "r", "compareSegments", "split", "semver", "version", "match", "shift", "isWildcard", "tryParse", "v", "n", "parseInt", "isNaN", "compareStrings", "a", "b", "ap", "bp", "String", "Math", "max", "length", "buildOptions", "defaultOptions", "attributeNamePrefix", "attrNodeName", "textNodeName", "ignoreAttributes", "cdataTagName", "cdataPositionChar", "format", "indentBy", "supressEmptyNode", "tagValueProcessor", "attrValueProcessor", "props", "Parser", "options", "this", "isAttribute", "attrPrefixLen", "isCDATA", "replaceCDATAstr", "replaceCDATAarr", "processTextOrObjNode", "indentate", "tagEndChar", "newLine", "buildTextNode", "buildEmptyTextNode", "buildObjNode", "buildEmptyObjNode", "buildTextValNode", "buildObjectNode", "object", "key", "level", "result", "j2x", "val", "attrStr", "str", "cdata", "replace", "repeat", "name", "startsWith", "substr", "prototype", "parse", "jObj", "Array", "isArray", "rootNodeName", "Date", "attr", "arrLen", "j", "item", "Ks", "L", "char", "fromCharCode", "chars", "nilChar", "missingChar", "nilPremitive", "missingPremitive", "emptyChar", "emptyValue", "boundryChar", "objStart", "arrStart", "arrayEnd", "charsArr", "_e", "node", "e_schema", "getValue", "hasValidData", "child", "attrsMap", "itemSchema", "arr_len", "arr_i", "processValue", "isAppChar", "ch", "x2j", "convert2nimn", "util", "convertToJson", "parentTagName", "alwaysCreateTextNode", "isEmptyObject", "isExist", "asArray", "isTagNameInArrayMode", "tagname", "arrayMode", "merge", "index", "tagName", "tag", "hasOwnProperty", "push", "_cToJsonStr", "convertToJsonString", "nodeToJson", "xmlToNodeobj", "x2xmlnode", "validator", "xmlData", "givenOptions", "validationOption", "validate", "err", "msg", "parseTrueNumberOnly", "parseNodeValue", "numParseOptions", "leadingZeros", "traversableObj", "getTraversalObj", "convertTonimn", "j2xParser", "parseToNimn", "schema", "nameStartChar", "nameRegexp", "regexName", "RegExp", "obj", "target", "len", "newOptions", "test", "isName", "string", "exec", "getAllMatches", "regex", "matches", "allmatches", "startIndex", "lastIndex", "allowBooleanAttributes", "readPI", "start", "getErrorObject", "getLineNumberForPosition", "readCommentAndCDATA", "angleBracketsCount", "tags", "tagFound", "reachedRoot", "tagStartPos", "closingTag", "trim", "substring", "readAttributeStr", "value", "attrStrStart", "isValid", "validateAttributeString", "code", "line", "tagClosed", "otg", "openPos", "col", "afterAmp", "validateAmpersand", "JSON", "stringify", "map", "doubleQuote", "singleQuote", "startChar", "validAttrStrRegxp", "attrNames", "getPositionFromMatch", "attrName", "validateAttrName", "re", "count", "message", "lineNumber", "lines", "parent", "addChild", "xmlNode", "toNumber", "Number", "window", "parseFloat", "ignoreNameSpace", "parseAttributeValue", "trimValues", "hex", "stopNodes", "processTagValue", "parseValue", "resolveNameSpace", "prefix", "charAt", "shouldParse", "newval", "attrsRegx", "buildAttributesMap", "attrs", "attrCollection", "closingIndexForOpeningTag", "data", "attrBoundary", "tagExp", "findClosingIndex", "errMsg", "closingIndex", "xmlObj", "currentNode", "textData", "closeIndex", "colonIndex", "undefined", "childNode", "separatorIndex", "shouldBuildAttributesMap", "lastIndexOf", "pako", "assign", "zlib_deflate", "utils", "strings", "ZStream", "toString", "Z_OK", "Z_DEFAULT_COMPRESSION", "Z_DEFAULT_STRATEGY", "Z_DEFLATED", "Deflate", "method", "chunkSize", "windowBits", "memLevel", "strategy", "to", "opt", "raw", "gzip", "ended", "chunks", "strm", "avail_out", "status", "deflateInit2", "header", "deflateSetHeader", "dictionary", "dict", "string2buf", "call", "Uint8Array", "deflateSetDictionary", "_dict_set", "deflate", "input", "deflator", "mode", "_mode", "next_in", "avail_in", "output", "Buf8", "next_out", "onEnd", "onData", "buf2binstring", "shrinkBuf", "deflateEnd", "chunk", "flattenChunks", "deflateRaw", "zlib_inflate", "c", "GZheader", "Inflate", "inflateInit2", "inflateGetHeader", "inflateSetDictionary", "inflate", "inflator", "next_out_utf8", "tail", "utf8str", "allowBufError", "Z_FINISH", "Z_NO_FLUSH", "binstring2buf", "Z_NEED_DICT", "Z_BUF_ERROR", "Z_STREAM_END", "Z_SYNC_FLUSH", "utf8border", "buf2string", "arraySet", "inflateEnd", "inflateRaw", "ungzip", "TYPED_OK", "Uint16Array", "Int32Array", "_has", "sources", "slice", "arguments", "source", "p", "buf", "size", "subarray", "fnTyped", "dest", "src", "src_offs", "dest_offs", "set", "l", "pos", "fnUntyped", "concat", "apply", "setTyped", "on", "Buf16", "Buf32", "STR_APPLY_OK", "STR_APPLY_UIA_OK", "__", "_utf8len", "q", "c2", "m_pos", "str_len", "buf_len", "charCodeAt", "out", "c_len", "utf16buf", "adler", "s1", "s2", "Z_PARTIAL_FLUSH", "Z_FULL_FLUSH", "Z_BLOCK", "Z_TREES", "Z_ERRNO", "Z_STREAM_ERROR", "Z_DATA_ERROR", "Z_NO_COMPRESSION", "Z_BEST_SPEED", "Z_BEST_COMPRESSION", "Z_FILTERED", "Z_HUFFMAN_ONLY", "Z_RLE", "Z_FIXED", "Z_BINARY", "Z_TEXT", "Z_UNKNOWN", "crcTable", "table", "k", "makeTable", "crc", "end", "configuration_table", "trees", "adler32", "crc32", "L_CODES", "LITERALS", "D_CODES", "BL_CODES", "HEAP_SIZE", "MAX_BITS", "MIN_MATCH", "MAX_MATCH", "MIN_LOOKAHEAD", "INIT_STATE", "HCRC_STATE", "BUSY_STATE", "FINISH_STATE", "errorCode", "rank", "f", "zero", "flush_pending", "state", "pending", "pending_buf", "pending_out", "total_out", "flush_block_only", "last", "_tr_flush_block", "block_start", "strstart", "put_byte", "putShortMSB", "longest_match", "cur_match", "chain_length", "max_chain_length", "scan", "best_len", "prev_length", "nice_match", "limit", "w_size", "_win", "wmask", "w_mask", "prev", "strend", "scan_end1", "scan_end", "good_match", "lookahead", "match_start", "fill_window", "m", "more", "_w_size", "window_size", "hash_size", "head", "wrap", "total_in", "insert", "ins_h", "hash_shift", "hash_mask", "deflate_fast", "flush", "hash_head", "bflush", "match_length", "_tr_tally", "max_lazy_match", "last_lit", "deflate_slow", "max_insert", "prev_match", "match_available", "Config", "good_length", "max_lazy", "nice_length", "max_chain", "func", "DeflateState", "pending_buf_size", "gzhead", "gzindex", "last_flush", "w_bits", "hash_bits", "dyn_ltree", "dyn_dtree", "bl_tree", "l_desc", "d_desc", "bl_desc", "bl_count", "heap", "heap_len", "heap_max", "depth", "l_buf", "lit_bufsize", "d_buf", "opt_len", "static_len", "bi_buf", "bi_valid", "deflateResetKeep", "data_type", "_tr_init", "deflateReset", "ret", "max_block_size", "max_start", "deflateInit", "old_flush", "beg", "text", "hcrc", "extra", "comment", "time", "os", "bstate", "_tr_align", "_tr_stored_block", "avail", "next", "tmpDict", "dictLength", "deflateInfo", "xflags", "extra_len", "done", "_in", "_out", "dmax", "wsize", "whave", "wnext", "s_window", "hold", "bits", "lcode", "dcode", "lmask", "dmask", "here", "dist", "from", "from_source", "lencode", "distcode", "lenbits", "distbits", "top", "dolen", "dodist", "sane", "inflate_fast", "inflate_table", "HEAD", "TYPE", "BAD", "ENOUGH_LENS", "ENOUGH_DISTS", "zswap32", "InflateState", "havedict", "flags", "check", "total", "wbits", "offset", "ncode", "nlen", "ndist", "have", "lens", "work", "lendyn", "distdyn", "back", "was", "inflateResetKeep", "inflateReset", "inflateReset2", "lenfix", "distfix", "virgin", "fixedtables", "sym", "updatewindow", "copy", "inflateInit", "put", "left", "here_bits", "here_op", "here_val", "last_bits", "last_op", "last_val", "opts", "hbuf", "order", "inf_leave", "inflateInfo", "lbase", "lext", "dbase", "dext", "type", "lens_index", "codes", "table_index", "incr", "fill", "low", "mask", "min", "curr", "drop", "used", "huff", "base", "base_index", "MAXBITS", "offs", "extra_index", "Buf_size", "extra_lbits", "extra_dbits", "extra_blbits", "bl_order", "static_ltree", "static_dtree", "_dist_code", "_length_code", "base_length", "static_l_desc", "static_d_desc", "static_bl_desc", "base_dist", "StaticTreeDesc", "static_tree", "extra_bits", "extra_base", "elems", "max_length", "has_stree", "TreeDesc", "dyn_tree", "stat_desc", "max_code", "d_code", "put_short", "w", "send_bits", "send_code", "tree", "bi_reverse", "gen_codes", "next_code", "init_block", "END_BLOCK", "bi_windup", "smaller", "_n2", "_m2", "pqdownheap", "compress_block", "ltree", "dtree", "lc", "lx", "build_tree", "desc", "stree", "h", "xbits", "overflow", "scan_tree", "curlen", "prevlen", "nextlen", "max_count", "min_count", "REP_3_6", "REPZ_3_10", "REPZ_11_138", "send_tree", "static_init_done", "stored_len", "LENGTH_CODES", "tr_static_init", "opt_lenb", "static_lenb", "max_blindex", "black_mask", "lcodes", "dcodes", "blcodes", "STATIC_TREES", "hexRegex", "numRegex", "consider", "decimalPoint", "eNotation", "trimmedStr", "skipLike", "sign", "numTrimmedByZeros", "numStr", "num", "search", "getProperty", "properties", "prop", "filter", "toLocaleLowerCase", "TiledEntity", "TiledLayerComponent", "Component", "layer", "super", "FLIPPED_HORIZONTALLY_FLAG", "FLIPPED_VERTICALLY_FLAG", "FLIPPED_DIAGONALLY_FLAG", "isFlippedHorizontally", "gid", "isFlippedVertically", "isFlippedDiagonally", "getCanonicalGid", "TiledLayer", "Vector", "Zero", "parallaxFactor", "encoding", "resultLayer", "id", "vec", "offsetx", "offsety", "parallaxx", "parallaxy", "width", "height", "compression", "o", "rawLayer", "TiledMap", "layers", "tileSets", "objectGroups", "getExcaliburObjects", "getObjectLayerByProperty", "getObjects", "tmxData", "_convertToArray", "plurlalize", "rawMap", "property", "objectgroup", "objectlayers", "objectlayer", "objects", "forEach", "halign", "d", "valign", "fontfamily", "pixelsize", "kerning", "italic", "bold", "underline", "strikeout", "color", "point", "ellipse", "polyline", "points", "x", "y", "polygon", "imagelayer", "imagelayers", "image", "tileset", "tilesets", "imagewidth", "imageheight", "objectalignment", "tiles", "_fromRawTiledMap", "rawJson", "_decompresslayers", "resultMap", "orientation", "tileWidth", "tilewidth", "tileHeight", "tileheight", "tagLayerWithOriginalOrder", "TiledObjectGroup", "TiledTileset", "decompressors", "decompressBase64", "decompressCsv", "b64", "tmp", "placeHolders", "arr", "PLUS", "SLASH", "NUMBER", "LOWER", "UPPER", "PLUS_URL_SAFE", "SLASH_URL_SAFE", "decode", "elt", "Promise", "resolve", "byteArray", "resultLen", "decoder", "ZSTDDecoder", "init", "then", "TiledMapFormat", "TiledMapResource", "path", "isoLayers", "_layerZIndexStart", "_mapToRawLayer", "Map", "mapFormatOverride", "startingLayerZIndex", "detectedType", "TMX", "_resource", "Resource", "mapFormat", "ex", "imageMap", "sheetMap", "tileImageMap", "convertPath", "originPath", "relativePath", "originSplit", "relativeSplit", "scene", "camera", "cameraPos", "isIsometric", "_isoTileToScreenCoords", "zoom", "colliders", "collider", "actor", "Actor", "collisionType", "CollisionType", "Fixed", "Color", "fromHex", "BoundingBox", "right", "bottom", "getPoints", "usePolygonCollider", "useBoxCollider", "useCircleCollider", "radius", "addComponent", "TiledObjectComponent", "tiled", "add", "zIndex", "z", "originX", "tileY", "tileX", "excaliburObjectLayers", "objectLayer", "textObjects", "getText", "worldPos", "pixelSize", "label", "Label", "anchor", "_getEntityName", "font", "Font", "family", "fontFamily", "unit", "FontUnit", "Px", "textAlign", "TextAlign", "Left", "baseAlign", "BaseAlign", "Top", "rotation", "Shape", "Box", "body", "PreventCollision", "_calculateZIndex", "iso", "IsometricEntityComponent", "elevation", "inserted", "getInsertedTiles", "tile", "collisionTypeProp", "sprite", "getSpriteForGid", "getCollidersForGid", "clear", "CompositeCollider", "graphics", "destSize", "use", "useSolidLayers", "tms", "getTileMapLayers", "tm", "get", "solid", "_addTiledCamera", "_addTiledColliders", "_addTiledText", "_addTiledInsertedTiles", "_parseExcaliburInfo", "find", "getObjectByClass", "getCamera", "boxColliders", "getObjectsByClass", "box", "circleColliders", "circle", "isLoaded", "load", "mapData", "tiledMap", "_importMapData", "externalTilesets", "ts", "external", "parseExternalTsx", "firstgid", "parseExternalJson", "Logger", "getInstance", "error", "all", "externalImages", "tileSetImages", "tx", "ImageSource", "debug", "tileImage", "_createTileMap", "fromTmx", "fromJson", "firstGid", "tileCount", "normalizedGid", "getTilesetForTile", "spriteIndex", "spriteSheet", "sprites", "clone", "PI", "scale", "diagonalFlipTransform", "multiply", "horizontalFlipTransform", "verticalFlipTransform", "tileIndex", "tileWithObjects", "getPolygons", "parsed", "tp", "poly", "Polygon", "_transformPoints", "getBoxes", "boxCollider", "getEllipses", "circleCollider", "Circle", "tileWithAnimation", "hasAnimation", "getAnimation", "entity", "tileLayerOrObjectGroup", "finalZ", "spacing", "cols", "floor", "rows", "ss", "SpriteSheet", "fromImageSource", "grid", "columns", "spriteWidth", "spriteHeight", "originOffset", "margin", "imageSource", "toSprite", "tileMapLayer", "TileMap", "factor", "ParallaxComponent", "addGraphic", "addCollider", "animation", "getAnimationForGid", "clearGraphics", "IsometricMap", "TransformComponent", "isoComponent", "updateColliders", "getIsometricMapLayers", "tilemap", "layerName", "tiledLayer", "getTileLayerByName", "tileGid", "tiledTileset", "getTileByPoint", "_lookupTile", "getTile", "getObjectsByType", "class", "getObjectsByName", "getPolyLines", "objectGroup", "resultObjectGroup", "rawObjectGroup", "TiledObject", "resultObject", "visible", "toRadians", "rawObject", "rawTileSet", "tileSet", "TiledTilesetTile", "tilecount", "tileOffset", "tileoffset", "tiledVersion", "tiledversion", "backgroundColor", "backgroundcolor", "transparentColor", "transparentcolor", "wangSets", "wangsets", "imageWidth", "imageHeight", "objectAlignment", "Matrix", "identity", "translate", "rotate", "exFrames", "frame", "graphic", "tileid", "duration", "Animation", "frames", "animationStrategy", "AnimationStrategy", "Loop", "rawTilesetTile", "terrain", "maybeStrategy", "toLowerCase", "End", "Freeze", "PingPong", "tsxData", "rawTsx", "rawTileset", "TiledIntProperty", "literal", "number", "int", "TiledBoolProperty", "boolean", "TiledFloatProperty", "TiledStringProperty", "TiledFileProperty", "TiledColorProperty", "TiledObjectProperty", "TiledProperty", "discriminatedUnion", "TiledTileLayerBase", "optional", "opacity", "array", "tintcolor", "TiledTileLayerCSV", "extend", "TiledTileLayerGZIP", "TiledTileLayerZLib", "TiledTileLayerZStandard", "TiledTileLayerBase64", "TiledTileLayerChunk", "TiledTileLayerInfinite", "startx", "starty", "TiledTileLayer", "union", "needsDecoding", "isCSV", "TiledPoint", "TiledPolygon", "TiledText", "template", "TiledAnimation", "TiledObjectLayer", "draworder", "TiledImageLayer", "repeatx", "repeaty", "TiledTile", "probability", "TiledTilesetEmbedded", "isTiledTilesetSingleImage", "isTiledTilesetCollectionOfImages", "TiledTilesetFile", "TiledTilesetExternal", "TiledTemplate", "compressionlevel", "infinite", "nextlayerid", "nextobjectid", "parallaxoriginx", "parallaxoriginy", "hexsidelength", "staggeraxis", "or", "staggerindex", "renderorder", "isInfiniteLayer", "tileLayer", "isTiledTilesetEmbedded", "isTiledTilesetExternal", "other", "otherRight", "otherBottom", "endRight", "endBottom", "TiledParser", "_largestBounds", "Boolean", "_coerceBoolean", "_coerceNumber", "propertiesNode", "children", "getAttribute", "innerHTML", "_coerceType", "numberProps", "booleanProps", "attribute", "attributes", "xml", "DOMParser", "parseFromString", "JSDOM", "contentType", "document", "console", "objectNode", "strict", "_parseAttributes", "querySelector", "_parsePropertiesNode", "textContent", "tilesetNode", "tilesetChild", "tileChild", "objectChild", "parseObject", "frameChild", "layerNode", "layerChild", "bounds", "chunkTag", "chunkBounds", "combine", "groupNode", "group", "groupChild", "imageNode", "imageLayer", "txXml", "templateElement", "_parseToDocument", "objectElement", "tileSetElement", "parseTileset", "tsxXml", "tilesetElement", "tmxXml", "mapElement", "parseHelper", "parseTileLayer", "parseObjectGroup", "parseImageLayer", "mapChild", "Decoder", "ExcaliburTiledProperties", "TileData", "Tiled", "ZIndex", "Camera", "Zoom", "Strategy", "Layer", "Solid", "Collision", "Type", "FetchLoader", "async", "response", "fetch", "json", "byNameCaseInsensitive", "localeCompare", "byClassCaseInsensitive", "className", "byPropertyCaseInsensitive", "propertyName", "lowercase", "normalizedValue", "has", "ImageLayer", "tiledImageLayer", "resource", "imageActor", "mapProps", "pathRelativeToBase", "pathMap", "hasTint", "tint", "White", "headless", "IsoTileLayer", "tiledTileLayer", "logger", "_gidToTileInfo", "isometricMap", "maybeTiled", "exTile", "tiledTile", "warn", "getTilesetForTileGid", "getTileByGid", "maybeTile", "isSolidLayer", "_recordTileData", "useExcaliburWiring", "halfWidth", "tileObj", "Transparent", "zoverride", "isometricTiledCoordToWorld", "infiniteStartPos", "TiledLayerDataComponent", "updateTile", "LoaderCache", "_loaded", "cache", "args", "values", "resources", "entries", "results", "allSettled", "errored", "reason", "ObjectLayer", "tiledObjectLayer", "entities", "_objectToEntity", "_entityToObject", "_logLoadedWarning", "getObjectsByProperty", "getObjectsByClassName", "getTemplates", "TemplateObject", "objectType", "factories", "_recordObjectEntityMapping", "newActor", "InsertedTile", "overrideAlignment", "getTilesetAlignmentAnchor", "scaleX", "tiledObject", "scaleY", "animationScaled", "halfTileWidth", "sub", "useCompositeCollider", "dimension", "Text", "localPoints", "isConvex", "triangulate", "Rectangle", "Ellipse", "parseObjects", "zindex", "GraphicsComponent", "Active", "Passive", "_actorFromObject", "TiledDataComponent", "PluginObject", "tiledTemplate", "Point", "textQuality", "Black", "_textAlignFromTiled", "_textBaselineFromTiled", "quality", "textWrap", "maxWidth", "Bottom", "Middle", "Center", "Right", "Start", "Polyline", "newObject", "I", "templates", "filenameFromPath", "templatePath", "Half", "tiledObjectGroup", "inputPath", "mapPath", "pathInMap", "basePath", "relativeToBase", "sourceProps", "TemplateResource", "fileLoader", "parser", "imageLoader", "templateType", "content", "parseExternalTemplate", "tilesetPath", "tilesetResource", "TilesetResource", "Template", "TileLayer", "TiledResource", "startZIndex", "useMapBackgroundColor", "useTilemapCameraStrategy", "_imageLoader", "_tilesetLoader", "_templateLoader", "entityClassNameFactories", "registerEntityFactory", "getObjectLayers", "runFactory", "delete", "getTileLayers", "getTilesByGid", "getIsoTileLayers", "getTilesByClassName", "getTilesByProperty", "getEntitiesByName", "getEntityByObject", "getObjectByEntity", "getEntitiesByProperty", "getEntitiesByClassName", "getTileByCoordinate", "_parseMap", "supportedTiledVersion", "_collectTilesets", "_collectTemplates", "friendlyLayers", "isolayer", "tilelayer", "imagePath", "getOrAdd", "friendlyTileset", "Tileset", "tileToImage", "sourcePath", "templateObjects", "uniqueTemplatePaths", "findIndex", "mappedPath", "cameraObject", "zoomProp", "firstLayer", "mapBounds", "fromDimension", "limitCameraBounds", "tilesetType", "tilesetData", "parseExternalTileset", "images", "Tile", "AffineMatrix", "spritesheet", "isoCoord", "halftileHeight", "orientationOverride", "One", "_applyFlipsToPoints", "_isometricTiledCoordToWorld", "offsetPoint", "objectUtil", "assertEqual", "assertIs", "_arg", "assertNever", "_x", "arrayToEnum", "items", "getValidEnumValues", "validKeys", "objectKeys", "filtered", "objectValues", "checker", "isInteger", "isFinite", "joinValues", "separator", "jsonStringifyReplacer", "_", "mergeShapes", "first", "second", "ZodParsedType", "getParsedType", "nan", "function", "bigint", "symbol", "null", "catch", "promise", "Set", "date", "unknown", "ZodIssueCode", "quotelessJson", "ZodError", "issues", "addIssue", "addIssues", "subs", "actualProto", "setPrototypeOf", "__proto__", "errors", "_mapper", "mapper", "issue", "fieldErrors", "_errors", "processError", "unionErrors", "returnTypeError", "argumentsError", "el", "isEmpty", "formErrors", "flatten", "create", "errorMap", "_ctx", "invalid_type", "received", "expected", "invalid_literal", "unrecognized_keys", "invalid_union", "invalid_union_discriminator", "invalid_enum_value", "invalid_arguments", "invalid_return_type", "invalid_date", "invalid_string", "validation", "position", "endsWith", "too_small", "exact", "inclusive", "minimum", "too_big", "maximum", "custom", "invalid_intersection_types", "not_multiple_of", "multipleOf", "not_finite", "defaultError", "overrideErrorMap", "setErrorMap", "getErrorMap", "makeIssue", "params", "errorMaps", "issueData", "fullPath", "fullIssue", "errorMessage", "maps", "reverse", "EMPTY_PATH", "addIssueToContext", "ctx", "common", "contextualErrorMap", "schemaErrorMap", "ParseStatus", "constructor", "dirty", "abort", "arrayValue", "INVALID", "pairs", "syncPairs", "pair", "mergeObjectSync", "finalObject", "alwaysSet", "freeze", "DIRTY", "OK", "isAborted", "isDirty", "isAsync", "errorUtil", "errToObj", "ParseInputLazyPath", "_cachedPath", "_path", "_key", "handleResult", "success", "_error", "processCreateParams", "invalid_type_error", "required_error", "description", "iss", "ZodType", "def", "spa", "safeParseAsync", "_def", "bind", "safeParse", "parseAsync", "refine", "refinement", "superRefine", "nullable", "nullish", "and", "transform", "brand", "default", "describe", "pipe", "readonly", "isNullable", "isOptional", "parsedType", "_parse", "_a", "_parseSync", "maybeAsyncResult", "getIssueProperties", "_refinement", "setError", "refinementData", "ZodEffects", "typeName", "ZodFirstPartyTypeKind", "effect", "ZodOptional", "ZodNullable", "ZodArray", "ZodPromise", "option", "ZodUnion", "incoming", "ZodIntersection", "defaultValueFunc", "ZodDefault", "innerType", "defaultValue", "ZodBranded", "catchValueFunc", "ZodCatch", "catchValue", "This", "ZodPipeline", "ZodReadonly", "cuidRegex", "cuid2Regex", "ulidRegex", "uuidRegex", "emailRegex", "emojiRegex", "ipv4Regex", "ipv6Regex", "ZodString", "coerce", "_getType", "_getOrReturnCtx", "checks", "kind", "tooBig", "tooSmall", "URL", "toUpperCase", "precision", "ip", "_addCheck", "minLength", "maxLength", "isDatetime", "isEmail", "isURL", "isEmoji", "isUUID", "isCUID", "isCUID2", "isULID", "isIP", "floatSafeRemainder", "step", "valDecCount", "stepDecCount", "decCount", "toFixed", "pow", "ZodNumber", "gte", "lte", "setLimit", "MIN_SAFE_INTEGER", "MAX_SAFE_INTEGER", "minValue", "maxValue", "isInt", "ZodBigInt", "BigInt", "ZodBoolean", "ZodDate", "getTime", "minDate", "maxDate", "ZodSymbol", "ZodUndefined", "ZodNull", "ZodAny", "_any", "ZodUnknown", "_unknown", "ZodNever", "never", "ZodVoid", "void", "_processInputParams", "exactLength", "_parseAsync", "mergeArray", "element", "deepPartialify", "ZodObject", "newShape", "shape", "fieldSchema", "unwrap", "ZodTuple", "_cached", "nonstrict", "passthrough", "augment", "_getCached", "shapeKeys", "extraKeys", "catchall", "unknownKeys", "keyValidator", "_b", "_c", "_d", "strip", "augmentation", "merging", "deepPartial", "newField", "keyof", "createZodEnum", "strictCreate", "lazycreate", "childCtx", "types", "getDiscriminator", "ZodLazy", "ZodLiteral", "ZodEnum", "ZodNativeEnum", "enum", "ZodDiscriminatedUnion", "discriminator", "discriminatorValue", "optionsMap", "discriminatorValues", "mergeValues", "aType", "bType", "valid", "bKeys", "sharedKeys", "newObj", "sharedValue", "newArray", "handleParsed", "parsedLeft", "parsedRight", "merged", "rest", "itemIndex", "schemas", "ZodRecord", "keySchema", "keyType", "valueSchema", "valueType", "mergeObjectAsync", "third", "ZodMap", "finalMap", "ZodSet", "minSize", "maxSize", "finalizeSet", "elements", "parsedSet", "ZodFunction", "implement", "makeArgsIssue", "makeReturnsIssue", "returns", "fn", "me", "parsedArgs", "Reflect", "parsedReturns", "parameters", "returnType", "getter", "expectedValues", "enumValues", "Values", "Enum", "nativeEnumValues", "promisified", "sourceType", "checkCtx", "arg", "fatal", "processed", "executeRefinement", "acc", "inner", "createWithPreprocess", "preprocess", "removeDefault", "newCtx", "removeCatch", "ZodNaN", "BRAND", "Symbol", "inResult", "in", "handleAsync", "_fatal", "late", "instanceOfType", "cls", "stringType", "numberType", "nanType", "bigIntType", "booleanType", "dateType", "symbolType", "undefinedType", "nullType", "anyType", "unknownType", "neverType", "voidType", "arrayType", "strictObjectType", "unionType", "discriminatedUnionType", "intersectionType", "tupleType", "recordType", "mapType", "setType", "functionType", "lazyType", "literalType", "enumType", "nativeEnumType", "promiseType", "effectsType", "optionalType", "nullableType", "preprocessType", "pipelineType", "ostring", "onumber", "oboolean", "NEVER", "defaultErrorMap", "ZodTransformer", "Schema", "ZodSchema", "any", "intersection", "lazy", "nativeEnum", "pipeline", "record", "strictObject", "transformer", "tuple", "instance", "IMPORT_OBJECT", "env", "emscripten_notify_memory_growth", "memory", "buffer", "wasm", "arrayBuffer", "WebAssembly", "instantiate", "_init", "Buffer", "uncompressedSize", "compressedSize", "byteLength", "compressedPtr", "malloc", "ZSTD_findDecompressedSize", "uncompressedPtr", "actualSize", "ZSTD_decompress", "dec", "free", "__webpack_module_cache__", "__webpack_require__", "moduleId", "cachedModule", "__webpack_modules__", "__esModule", "definition", "defineProperty", "enumerable", "toStringTag"]
}
